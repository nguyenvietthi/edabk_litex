// -----------------------------------------------------------------------------
// Auto-Generated by:        __   _ __      _  __
//                          / /  (_) /____ | |/_/
//                         / /__/ / __/ -_)>  <
//                        /____/_/\__/\__/_/|_|
//                     Build your hardware, easily!
//                   https://github.com/enjoy-digital/litex
//
// Filename   : top.v
// Device     : EP4CE115F29C7
// LiteX sha1 : ac1c84f
// Date       : 2022-05-25 17:58:30
//------------------------------------------------------------------------------


//------------------------------------------------------------------------------
// Module
//------------------------------------------------------------------------------

module top (
	input  wire clk50,
	input  wire cpu_reset,
	output reg  serial_tx,
	input  wire serial_rx,
	output wire user_led0,
	output wire user_led1,
	output wire user_led2,
	output wire user_led3,
	output wire user_led4,
	output wire user_led5,
	output wire user_led6,
	output wire user_led7,
	output wire user_led8,
	output wire user_led9,
	output wire user_led10,
	output wire user_led11,
	output wire user_led12,
	output wire user_led13,
	output wire user_led14,
	output wire user_led15,
	input  wire user_sw0,
	input  wire user_sw1,
	input  wire user_sw2,
	input  wire user_sw3,
	input  wire user_sw4,
	input  wire user_sw5,
	input  wire user_sw6,
	input  wire user_sw7,
	input  wire user_sw8,
	input  wire user_sw9,
	input  wire user_sw10,
	input  wire user_sw11,
	input  wire user_sw12,
	input  wire user_sw13,
	input  wire user_sw14,
	input  wire user_sw15,
	input  wire user_btn0,
	input  wire user_btn1,
	input  wire user_btn2,
	output wire [6:0] seven_seg0,
	output wire [6:0] seven_seg1,
	output wire [6:0] seven_seg2,
	output wire [6:0] seven_seg3,
	output wire [6:0] seven_seg4,
	output wire [6:0] seven_seg5
);


//------------------------------------------------------------------------------
// Signals
//------------------------------------------------------------------------------

reg  soc_rst = 1'd0;
wire cpu_rst;
reg  [1:0] reset_storage = 2'd0;
reg  reset_re = 1'd0;
reg  [31:0] scratch_storage = 32'd305419896;
reg  scratch_re = 1'd0;
wire [31:0] bus_errors_status;
wire bus_errors_we;
reg  bus_errors_re = 1'd0;
reg  bus_error = 1'd0;
reg  [31:0] bus_errors = 32'd0;
wire sys_clk;
wire sys_rst;
wire por_clk;
reg  int_rst = 1'd1;
reg  tx_sink_valid = 1'd0;
reg  tx_sink_ready = 1'd0;
wire tx_sink_last;
reg  [7:0] tx_sink_payload_data = 8'd0;
reg  [7:0] tx_data = 8'd0;
reg  [3:0] tx_count = 4'd0;
reg  tx_enable = 1'd0;
reg  tx_tick = 1'd0;
reg  [31:0] tx_phase = 32'd0;
reg  rx_source_valid = 1'd0;
reg  rx_source_ready = 1'd0;
reg  [7:0] rx_source_payload_data = 8'd0;
reg  [7:0] rx_data = 8'd0;
reg  [3:0] rx_count = 4'd0;
reg  rx_enable = 1'd0;
reg  rx_tick = 1'd0;
reg  [31:0] rx_phase = 32'd0;
wire rx_rx;
reg  rx_rx_d = 1'd0;
wire [31:0] wishbone_adr;
wire [31:0] wishbone_dat_w;
wire [31:0] wishbone_dat_r;
wire [3:0] wishbone_sel;
reg  wishbone_cyc = 1'd0;
reg  wishbone_stb = 1'd0;
wire wishbone_ack;
reg  wishbone_we = 1'd0;
reg  [2:0] wishbone_cti = 3'd0;
reg  [1:0] wishbone_bte = 2'd0;
wire wishbone_err;
reg  [7:0] cmd = 8'd0;
reg  incr = 1'd0;
reg  [7:0] length = 8'd0;
reg  [31:0] address = 32'd0;
reg  [31:0] data = 32'd0;
reg  [1:0] data_bytes_count = 2'd0;
reg  [1:0] addr_bytes_count = 2'd0;
reg  [7:0] words_count = 8'd0;
wire reset;
wire wait_1;
wire done;
reg  [22:0] count = 23'd5000000;
reg  is_ongoing = 1'd0;
reg  [15:0] leds_storage = 16'd0;
reg  leds_re = 1'd0;
wire [15:0] switches_status;
wire switches_we;
reg  switches_re = 1'd0;
wire [2:0] buttons_status;
wire buttons_we;
reg  buttons_re = 1'd0;
reg  [3:0] sel_storage = 4'd0;
reg  sel_re = 1'd0;
reg  [3:0] value_storage = 4'd0;
reg  value_re = 1'd0;
reg  write_re = 1'd0;
wire write_r;
reg  write_we = 1'd0;
reg  write_w = 1'd0;
wire [6:0] abcdefg0;
wire [6:0] abcdefg1;
wire [6:0] abcdefg2;
wire [6:0] abcdefg3;
wire [6:0] abcdefg4;
wire [6:0] abcdefg5;
reg  [3:0] values0 = 4'd0;
reg  [3:0] values1 = 4'd0;
reg  [3:0] values2 = 4'd0;
reg  [3:0] values3 = 4'd0;
reg  [3:0] values4 = 4'd0;
reg  [3:0] values5 = 4'd0;
wire [6:0] abcdefg6;
wire [6:0] abcdefg7;
wire [6:0] abcdefg8;
wire [6:0] abcdefg9;
wire [6:0] abcdefg10;
wire [6:0] abcdefg11;
wire [3:0] sevensegment0_value;
reg  [6:0] sevensegment0_abcdefg = 7'd0;
wire [3:0] sevensegment1_value;
reg  [6:0] sevensegment1_abcdefg = 7'd0;
wire [3:0] sevensegment2_value;
reg  [6:0] sevensegment2_abcdefg = 7'd0;
wire [3:0] sevensegment3_value;
reg  [6:0] sevensegment3_abcdefg = 7'd0;
wire [3:0] sevensegment4_value;
reg  [6:0] sevensegment4_abcdefg = 7'd0;
wire [3:0] sevensegment5_value;
reg  [6:0] sevensegment5_abcdefg = 7'd0;
reg  subfragments_rs232phytx_state = 1'd0;
reg  subfragments_rs232phytx_next_state = 1'd0;
reg  [3:0] tx_count_rs232phytx_next_value0 = 4'd0;
reg  tx_count_rs232phytx_next_value_ce0 = 1'd0;
reg  obj_serial_tx_rs232phytx_next_value1 = 1'd0;
reg  obj_serial_tx_rs232phytx_next_value_ce1 = 1'd0;
reg  [7:0] tx_data_rs232phytx_next_value2 = 8'd0;
reg  tx_data_rs232phytx_next_value_ce2 = 1'd0;
reg  subfragments_rs232phyrx_state = 1'd0;
reg  subfragments_rs232phyrx_next_state = 1'd0;
reg  [3:0] rx_count_rs232phyrx_next_value0 = 4'd0;
reg  rx_count_rs232phyrx_next_value_ce0 = 1'd0;
reg  [7:0] rx_data_rs232phyrx_next_value1 = 8'd0;
reg  rx_data_rs232phyrx_next_value_ce1 = 1'd0;
reg  [2:0] subfragments_state = 3'd0;
reg  [2:0] subfragments_next_state = 3'd0;
reg  [1:0] data_bytes_count_next_value0 = 2'd0;
reg  data_bytes_count_next_value_ce0 = 1'd0;
reg  [1:0] addr_bytes_count_next_value1 = 2'd0;
reg  addr_bytes_count_next_value_ce1 = 1'd0;
reg  [7:0] words_count_next_value2 = 8'd0;
reg  words_count_next_value_ce2 = 1'd0;
reg  [7:0] cmd_next_value3 = 8'd0;
reg  cmd_next_value_ce3 = 1'd0;
reg  [7:0] length_next_value4 = 8'd0;
reg  length_next_value_ce4 = 1'd0;
reg  [31:0] address_next_value5 = 32'd0;
reg  address_next_value_ce5 = 1'd0;
reg  incr_next_value6 = 1'd0;
reg  incr_next_value_ce6 = 1'd0;
reg  [31:0] data_next_value7 = 32'd0;
reg  data_next_value_ce7 = 1'd0;
reg  [13:0] basesoc_basesoc_adr = 14'd0;
reg  basesoc_basesoc_we = 1'd0;
reg  [31:0] basesoc_basesoc_dat_w = 32'd0;
wire [31:0] basesoc_basesoc_dat_r;
wire [29:0] basesoc_basesoc_wishbone_adr;
wire [31:0] basesoc_basesoc_wishbone_dat_w;
reg  [31:0] basesoc_basesoc_wishbone_dat_r = 32'd0;
wire [3:0] basesoc_basesoc_wishbone_sel;
wire basesoc_basesoc_wishbone_cyc;
wire basesoc_basesoc_wishbone_stb;
reg  basesoc_basesoc_wishbone_ack = 1'd0;
wire basesoc_basesoc_wishbone_we;
wire [2:0] basesoc_basesoc_wishbone_cti;
wire [1:0] basesoc_basesoc_wishbone_bte;
reg  basesoc_basesoc_wishbone_err = 1'd0;
wire [13:0] basesoc_csr_bankarray_interface0_bank_bus_adr;
wire basesoc_csr_bankarray_interface0_bank_bus_we;
wire [31:0] basesoc_csr_bankarray_interface0_bank_bus_dat_w;
reg  [31:0] basesoc_csr_bankarray_interface0_bank_bus_dat_r = 32'd0;
reg  basesoc_csr_bankarray_csrbank0_in_re = 1'd0;
wire [2:0] basesoc_csr_bankarray_csrbank0_in_r;
reg  basesoc_csr_bankarray_csrbank0_in_we = 1'd0;
wire [2:0] basesoc_csr_bankarray_csrbank0_in_w;
wire basesoc_csr_bankarray_csrbank0_sel;
wire [13:0] basesoc_csr_bankarray_interface1_bank_bus_adr;
wire basesoc_csr_bankarray_interface1_bank_bus_we;
wire [31:0] basesoc_csr_bankarray_interface1_bank_bus_dat_w;
reg  [31:0] basesoc_csr_bankarray_interface1_bank_bus_dat_r = 32'd0;
reg  basesoc_csr_bankarray_csrbank1_reset0_re = 1'd0;
wire [1:0] basesoc_csr_bankarray_csrbank1_reset0_r;
reg  basesoc_csr_bankarray_csrbank1_reset0_we = 1'd0;
wire [1:0] basesoc_csr_bankarray_csrbank1_reset0_w;
reg  basesoc_csr_bankarray_csrbank1_scratch0_re = 1'd0;
wire [31:0] basesoc_csr_bankarray_csrbank1_scratch0_r;
reg  basesoc_csr_bankarray_csrbank1_scratch0_we = 1'd0;
wire [31:0] basesoc_csr_bankarray_csrbank1_scratch0_w;
reg  basesoc_csr_bankarray_csrbank1_bus_errors_re = 1'd0;
wire [31:0] basesoc_csr_bankarray_csrbank1_bus_errors_r;
reg  basesoc_csr_bankarray_csrbank1_bus_errors_we = 1'd0;
wire [31:0] basesoc_csr_bankarray_csrbank1_bus_errors_w;
wire basesoc_csr_bankarray_csrbank1_sel;
wire [13:0] basesoc_csr_bankarray_interface2_bank_bus_adr;
wire basesoc_csr_bankarray_interface2_bank_bus_we;
wire [31:0] basesoc_csr_bankarray_interface2_bank_bus_dat_w;
reg  [31:0] basesoc_csr_bankarray_interface2_bank_bus_dat_r = 32'd0;
reg  basesoc_csr_bankarray_csrbank2_sel0_re = 1'd0;
wire [3:0] basesoc_csr_bankarray_csrbank2_sel0_r;
reg  basesoc_csr_bankarray_csrbank2_sel0_we = 1'd0;
wire [3:0] basesoc_csr_bankarray_csrbank2_sel0_w;
reg  basesoc_csr_bankarray_csrbank2_value0_re = 1'd0;
wire [3:0] basesoc_csr_bankarray_csrbank2_value0_r;
reg  basesoc_csr_bankarray_csrbank2_value0_we = 1'd0;
wire [3:0] basesoc_csr_bankarray_csrbank2_value0_w;
wire basesoc_csr_bankarray_csrbank2_sel;
wire [13:0] basesoc_csr_bankarray_sram_bus_adr;
wire basesoc_csr_bankarray_sram_bus_we;
wire [31:0] basesoc_csr_bankarray_sram_bus_dat_w;
reg  [31:0] basesoc_csr_bankarray_sram_bus_dat_r = 32'd0;
wire [5:0] basesoc_csr_bankarray_adr;
wire [7:0] basesoc_csr_bankarray_dat_r;
wire basesoc_csr_bankarray_sel;
reg  basesoc_csr_bankarray_sel_r = 1'd0;
wire [13:0] basesoc_csr_bankarray_interface3_bank_bus_adr;
wire basesoc_csr_bankarray_interface3_bank_bus_we;
wire [31:0] basesoc_csr_bankarray_interface3_bank_bus_dat_w;
reg  [31:0] basesoc_csr_bankarray_interface3_bank_bus_dat_r = 32'd0;
reg  basesoc_csr_bankarray_csrbank3_out0_re = 1'd0;
wire [15:0] basesoc_csr_bankarray_csrbank3_out0_r;
reg  basesoc_csr_bankarray_csrbank3_out0_we = 1'd0;
wire [15:0] basesoc_csr_bankarray_csrbank3_out0_w;
wire basesoc_csr_bankarray_csrbank3_sel;
wire [13:0] basesoc_csr_bankarray_interface4_bank_bus_adr;
wire basesoc_csr_bankarray_interface4_bank_bus_we;
wire [31:0] basesoc_csr_bankarray_interface4_bank_bus_dat_w;
reg  [31:0] basesoc_csr_bankarray_interface4_bank_bus_dat_r = 32'd0;
reg  basesoc_csr_bankarray_csrbank4_in_re = 1'd0;
wire [15:0] basesoc_csr_bankarray_csrbank4_in_r;
reg  basesoc_csr_bankarray_csrbank4_in_we = 1'd0;
wire [15:0] basesoc_csr_bankarray_csrbank4_in_w;
wire basesoc_csr_bankarray_csrbank4_sel;
wire [13:0] basesoc_csr_interconnect_adr;
wire basesoc_csr_interconnect_we;
wire [31:0] basesoc_csr_interconnect_dat_w;
wire [31:0] basesoc_csr_interconnect_dat_r;
reg  basesoc_state = 1'd0;
reg  basesoc_next_state = 1'd0;
reg  multiregimpl0_regs0 = 1'd0;
reg  multiregimpl0_regs1 = 1'd0;
reg  [15:0] multiregimpl1_regs0 = 16'd0;
reg  [15:0] multiregimpl1_regs1 = 16'd0;
reg  [2:0] multiregimpl2_regs0 = 3'd0;
reg  [2:0] multiregimpl2_regs1 = 3'd0;

//------------------------------------------------------------------------------
// Combinatorial Logic
//------------------------------------------------------------------------------

assign seven_seg0 = (~abcdefg0);
assign seven_seg1 = (~abcdefg1);
assign seven_seg2 = (~abcdefg2);
assign seven_seg3 = (~abcdefg3);
assign seven_seg4 = (~abcdefg4);
assign seven_seg5 = (~abcdefg5);
assign bus_errors_status = bus_errors;
assign sys_clk = clk50;
assign por_clk = clk50;
assign sys_rst = int_rst;
assign wait_1 = (~is_ongoing);
assign reset = done;
assign wishbone_adr = address;
assign wishbone_dat_w = data;
assign wishbone_sel = 4'd15;
always @(*) begin
	tx_sink_payload_data <= 8'd0;
	case (data_bytes_count)
		1'd0: begin
			tx_sink_payload_data <= data[31:24];
		end
		1'd1: begin
			tx_sink_payload_data <= data[31:16];
		end
		2'd2: begin
			tx_sink_payload_data <= data[31:8];
		end
		2'd3: begin
			tx_sink_payload_data <= data[31:0];
		end
	endcase
end
assign tx_sink_last = ((data_bytes_count == 2'd3) & (words_count == (length - 1'd1)));
always @(*) begin
	subfragments_rs232phytx_next_state <= 1'd0;
	tx_count_rs232phytx_next_value0 <= 4'd0;
	tx_count_rs232phytx_next_value_ce0 <= 1'd0;
	tx_enable <= 1'd0;
	obj_serial_tx_rs232phytx_next_value1 <= 1'd0;
	obj_serial_tx_rs232phytx_next_value_ce1 <= 1'd0;
	tx_data_rs232phytx_next_value2 <= 8'd0;
	tx_data_rs232phytx_next_value_ce2 <= 1'd0;
	tx_sink_ready <= 1'd0;
	subfragments_rs232phytx_next_state <= subfragments_rs232phytx_state;
	case (subfragments_rs232phytx_state)
		1'd1: begin
			tx_enable <= 1'd1;
			if (tx_tick) begin
				obj_serial_tx_rs232phytx_next_value1 <= tx_data;
				obj_serial_tx_rs232phytx_next_value_ce1 <= 1'd1;
				tx_count_rs232phytx_next_value0 <= (tx_count + 1'd1);
				tx_count_rs232phytx_next_value_ce0 <= 1'd1;
				tx_data_rs232phytx_next_value2 <= {1'd1, tx_data[7:1]};
				tx_data_rs232phytx_next_value_ce2 <= 1'd1;
				if ((tx_count == 4'd9)) begin
					tx_sink_ready <= 1'd1;
					subfragments_rs232phytx_next_state <= 1'd0;
				end
			end
		end
		default: begin
			tx_count_rs232phytx_next_value0 <= 1'd0;
			tx_count_rs232phytx_next_value_ce0 <= 1'd1;
			obj_serial_tx_rs232phytx_next_value1 <= 1'd1;
			obj_serial_tx_rs232phytx_next_value_ce1 <= 1'd1;
			if (tx_sink_valid) begin
				obj_serial_tx_rs232phytx_next_value1 <= 1'd0;
				obj_serial_tx_rs232phytx_next_value_ce1 <= 1'd1;
				tx_data_rs232phytx_next_value2 <= tx_sink_payload_data;
				tx_data_rs232phytx_next_value_ce2 <= 1'd1;
				subfragments_rs232phytx_next_state <= 1'd1;
			end
		end
	endcase
end
always @(*) begin
	subfragments_rs232phyrx_next_state <= 1'd0;
	rx_source_payload_data <= 8'd0;
	rx_count_rs232phyrx_next_value0 <= 4'd0;
	rx_count_rs232phyrx_next_value_ce0 <= 1'd0;
	rx_enable <= 1'd0;
	rx_data_rs232phyrx_next_value1 <= 8'd0;
	rx_data_rs232phyrx_next_value_ce1 <= 1'd0;
	rx_source_valid <= 1'd0;
	subfragments_rs232phyrx_next_state <= subfragments_rs232phyrx_state;
	case (subfragments_rs232phyrx_state)
		1'd1: begin
			rx_enable <= 1'd1;
			if (rx_tick) begin
				rx_count_rs232phyrx_next_value0 <= (rx_count + 1'd1);
				rx_count_rs232phyrx_next_value_ce0 <= 1'd1;
				rx_data_rs232phyrx_next_value1 <= {rx_rx, rx_data[7:1]};
				rx_data_rs232phyrx_next_value_ce1 <= 1'd1;
				if ((rx_count == 4'd9)) begin
					rx_source_valid <= (rx_rx == 1'd1);
					rx_source_payload_data <= rx_data;
					subfragments_rs232phyrx_next_state <= 1'd0;
				end
			end
		end
		default: begin
			rx_count_rs232phyrx_next_value0 <= 1'd0;
			rx_count_rs232phyrx_next_value_ce0 <= 1'd1;
			if (((rx_rx == 1'd0) & (rx_rx_d == 1'd1))) begin
				subfragments_rs232phyrx_next_state <= 1'd1;
			end
		end
	endcase
end
always @(*) begin
	subfragments_next_state <= 3'd0;
	data_bytes_count_next_value0 <= 2'd0;
	is_ongoing <= 1'd0;
	data_bytes_count_next_value_ce0 <= 1'd0;
	addr_bytes_count_next_value1 <= 2'd0;
	addr_bytes_count_next_value_ce1 <= 1'd0;
	words_count_next_value2 <= 8'd0;
	words_count_next_value_ce2 <= 1'd0;
	wishbone_cyc <= 1'd0;
	wishbone_stb <= 1'd0;
	cmd_next_value3 <= 8'd0;
	cmd_next_value_ce3 <= 1'd0;
	wishbone_we <= 1'd0;
	length_next_value4 <= 8'd0;
	length_next_value_ce4 <= 1'd0;
	rx_source_ready <= 1'd0;
	address_next_value5 <= 32'd0;
	address_next_value_ce5 <= 1'd0;
	incr_next_value6 <= 1'd0;
	incr_next_value_ce6 <= 1'd0;
	data_next_value7 <= 32'd0;
	data_next_value_ce7 <= 1'd0;
	tx_sink_valid <= 1'd0;
	subfragments_next_state <= subfragments_state;
	case (subfragments_state)
		1'd1: begin
			rx_source_ready <= 1'd1;
			if (rx_source_valid) begin
				length_next_value4 <= rx_source_payload_data;
				length_next_value_ce4 <= 1'd1;
				subfragments_next_state <= 2'd2;
			end
		end
		2'd2: begin
			rx_source_ready <= 1'd1;
			if (rx_source_valid) begin
				address_next_value5 <= {address, rx_source_payload_data};
				address_next_value_ce5 <= 1'd1;
				addr_bytes_count_next_value1 <= (addr_bytes_count + 1'd1);
				addr_bytes_count_next_value_ce1 <= 1'd1;
				if ((addr_bytes_count == 2'd3)) begin
					if (((cmd == 1'd1) | (cmd == 2'd3))) begin
						incr_next_value6 <= (cmd == 1'd1);
						incr_next_value_ce6 <= 1'd1;
						subfragments_next_state <= 2'd3;
					end else begin
						if (((cmd == 2'd2) | (cmd == 3'd4))) begin
							incr_next_value6 <= (cmd == 2'd2);
							incr_next_value_ce6 <= 1'd1;
							subfragments_next_state <= 3'd5;
						end else begin
							subfragments_next_state <= 1'd0;
						end
					end
				end
			end
		end
		2'd3: begin
			rx_source_ready <= 1'd1;
			if (rx_source_valid) begin
				data_next_value7 <= {data, rx_source_payload_data};
				data_next_value_ce7 <= 1'd1;
				data_bytes_count_next_value0 <= (data_bytes_count + 1'd1);
				data_bytes_count_next_value_ce0 <= 1'd1;
				if ((data_bytes_count == 2'd3)) begin
					subfragments_next_state <= 3'd4;
				end
			end
		end
		3'd4: begin
			rx_source_ready <= 1'd0;
			wishbone_stb <= 1'd1;
			wishbone_we <= 1'd1;
			wishbone_cyc <= 1'd1;
			if (wishbone_ack) begin
				words_count_next_value2 <= (words_count + 1'd1);
				words_count_next_value_ce2 <= 1'd1;
				address_next_value5 <= (address + incr);
				address_next_value_ce5 <= 1'd1;
				if ((words_count == (length - 1'd1))) begin
					subfragments_next_state <= 1'd0;
				end else begin
					subfragments_next_state <= 2'd3;
				end
			end
		end
		3'd5: begin
			rx_source_ready <= 1'd0;
			wishbone_stb <= 1'd1;
			wishbone_we <= 1'd0;
			wishbone_cyc <= 1'd1;
			if (wishbone_ack) begin
				data_next_value7 <= wishbone_dat_r;
				data_next_value_ce7 <= 1'd1;
				subfragments_next_state <= 3'd6;
			end
		end
		3'd6: begin
			rx_source_ready <= 1'd0;
			tx_sink_valid <= 1'd1;
			if (tx_sink_ready) begin
				data_bytes_count_next_value0 <= (data_bytes_count + 1'd1);
				data_bytes_count_next_value_ce0 <= 1'd1;
				if ((data_bytes_count == 2'd3)) begin
					words_count_next_value2 <= (words_count + 1'd1);
					words_count_next_value_ce2 <= 1'd1;
					address_next_value5 <= (address + incr);
					address_next_value_ce5 <= 1'd1;
					if ((words_count == (length - 1'd1))) begin
						subfragments_next_state <= 1'd0;
					end else begin
						subfragments_next_state <= 3'd5;
					end
				end
			end
		end
		default: begin
			is_ongoing <= 1'd1;
			rx_source_ready <= 1'd1;
			data_bytes_count_next_value0 <= 1'd0;
			data_bytes_count_next_value_ce0 <= 1'd1;
			addr_bytes_count_next_value1 <= 1'd0;
			addr_bytes_count_next_value_ce1 <= 1'd1;
			words_count_next_value2 <= 1'd0;
			words_count_next_value_ce2 <= 1'd1;
			if (rx_source_valid) begin
				cmd_next_value3 <= rx_source_payload_data;
				cmd_next_value_ce3 <= 1'd1;
				subfragments_next_state <= 1'd1;
			end
		end
	endcase
end
assign done = (count == 1'd0);
assign {user_led15, user_led14, user_led13, user_led12, user_led11, user_led10, user_led9, user_led8, user_led7, user_led6, user_led5, user_led4, user_led3, user_led2, user_led1, user_led0} = leds_storage;
assign abcdefg0 = abcdefg6;
assign abcdefg1 = abcdefg7;
assign abcdefg2 = abcdefg8;
assign abcdefg3 = abcdefg9;
assign abcdefg4 = abcdefg10;
assign abcdefg5 = abcdefg11;
assign sevensegment0_value = values0;
assign sevensegment1_value = values1;
assign sevensegment2_value = values2;
assign sevensegment3_value = values3;
assign sevensegment4_value = values4;
assign sevensegment5_value = values5;
assign abcdefg6 = sevensegment0_abcdefg;
assign abcdefg7 = sevensegment1_abcdefg;
assign abcdefg8 = sevensegment2_abcdefg;
assign abcdefg9 = sevensegment3_abcdefg;
assign abcdefg10 = sevensegment4_abcdefg;
assign abcdefg11 = sevensegment5_abcdefg;
always @(*) begin
	sevensegment0_abcdefg <= 7'd0;
	case (sevensegment0_value)
		1'd0: begin
			sevensegment0_abcdefg <= 6'd63;
		end
		1'd1: begin
			sevensegment0_abcdefg <= 3'd6;
		end
		2'd2: begin
			sevensegment0_abcdefg <= 7'd91;
		end
		2'd3: begin
			sevensegment0_abcdefg <= 7'd79;
		end
		3'd4: begin
			sevensegment0_abcdefg <= 7'd102;
		end
		3'd5: begin
			sevensegment0_abcdefg <= 7'd109;
		end
		3'd6: begin
			sevensegment0_abcdefg <= 7'd125;
		end
		3'd7: begin
			sevensegment0_abcdefg <= 3'd7;
		end
		4'd8: begin
			sevensegment0_abcdefg <= 7'd127;
		end
		4'd9: begin
			sevensegment0_abcdefg <= 7'd111;
		end
		4'd10: begin
			sevensegment0_abcdefg <= 7'd119;
		end
		4'd11: begin
			sevensegment0_abcdefg <= 7'd124;
		end
		4'd12: begin
			sevensegment0_abcdefg <= 6'd57;
		end
		4'd13: begin
			sevensegment0_abcdefg <= 7'd94;
		end
		4'd14: begin
			sevensegment0_abcdefg <= 7'd121;
		end
		4'd15: begin
			sevensegment0_abcdefg <= 7'd113;
		end
	endcase
end
always @(*) begin
	sevensegment1_abcdefg <= 7'd0;
	case (sevensegment1_value)
		1'd0: begin
			sevensegment1_abcdefg <= 6'd63;
		end
		1'd1: begin
			sevensegment1_abcdefg <= 3'd6;
		end
		2'd2: begin
			sevensegment1_abcdefg <= 7'd91;
		end
		2'd3: begin
			sevensegment1_abcdefg <= 7'd79;
		end
		3'd4: begin
			sevensegment1_abcdefg <= 7'd102;
		end
		3'd5: begin
			sevensegment1_abcdefg <= 7'd109;
		end
		3'd6: begin
			sevensegment1_abcdefg <= 7'd125;
		end
		3'd7: begin
			sevensegment1_abcdefg <= 3'd7;
		end
		4'd8: begin
			sevensegment1_abcdefg <= 7'd127;
		end
		4'd9: begin
			sevensegment1_abcdefg <= 7'd111;
		end
		4'd10: begin
			sevensegment1_abcdefg <= 7'd119;
		end
		4'd11: begin
			sevensegment1_abcdefg <= 7'd124;
		end
		4'd12: begin
			sevensegment1_abcdefg <= 6'd57;
		end
		4'd13: begin
			sevensegment1_abcdefg <= 7'd94;
		end
		4'd14: begin
			sevensegment1_abcdefg <= 7'd121;
		end
		4'd15: begin
			sevensegment1_abcdefg <= 7'd113;
		end
	endcase
end
always @(*) begin
	sevensegment2_abcdefg <= 7'd0;
	case (sevensegment2_value)
		1'd0: begin
			sevensegment2_abcdefg <= 6'd63;
		end
		1'd1: begin
			sevensegment2_abcdefg <= 3'd6;
		end
		2'd2: begin
			sevensegment2_abcdefg <= 7'd91;
		end
		2'd3: begin
			sevensegment2_abcdefg <= 7'd79;
		end
		3'd4: begin
			sevensegment2_abcdefg <= 7'd102;
		end
		3'd5: begin
			sevensegment2_abcdefg <= 7'd109;
		end
		3'd6: begin
			sevensegment2_abcdefg <= 7'd125;
		end
		3'd7: begin
			sevensegment2_abcdefg <= 3'd7;
		end
		4'd8: begin
			sevensegment2_abcdefg <= 7'd127;
		end
		4'd9: begin
			sevensegment2_abcdefg <= 7'd111;
		end
		4'd10: begin
			sevensegment2_abcdefg <= 7'd119;
		end
		4'd11: begin
			sevensegment2_abcdefg <= 7'd124;
		end
		4'd12: begin
			sevensegment2_abcdefg <= 6'd57;
		end
		4'd13: begin
			sevensegment2_abcdefg <= 7'd94;
		end
		4'd14: begin
			sevensegment2_abcdefg <= 7'd121;
		end
		4'd15: begin
			sevensegment2_abcdefg <= 7'd113;
		end
	endcase
end
always @(*) begin
	sevensegment3_abcdefg <= 7'd0;
	case (sevensegment3_value)
		1'd0: begin
			sevensegment3_abcdefg <= 6'd63;
		end
		1'd1: begin
			sevensegment3_abcdefg <= 3'd6;
		end
		2'd2: begin
			sevensegment3_abcdefg <= 7'd91;
		end
		2'd3: begin
			sevensegment3_abcdefg <= 7'd79;
		end
		3'd4: begin
			sevensegment3_abcdefg <= 7'd102;
		end
		3'd5: begin
			sevensegment3_abcdefg <= 7'd109;
		end
		3'd6: begin
			sevensegment3_abcdefg <= 7'd125;
		end
		3'd7: begin
			sevensegment3_abcdefg <= 3'd7;
		end
		4'd8: begin
			sevensegment3_abcdefg <= 7'd127;
		end
		4'd9: begin
			sevensegment3_abcdefg <= 7'd111;
		end
		4'd10: begin
			sevensegment3_abcdefg <= 7'd119;
		end
		4'd11: begin
			sevensegment3_abcdefg <= 7'd124;
		end
		4'd12: begin
			sevensegment3_abcdefg <= 6'd57;
		end
		4'd13: begin
			sevensegment3_abcdefg <= 7'd94;
		end
		4'd14: begin
			sevensegment3_abcdefg <= 7'd121;
		end
		4'd15: begin
			sevensegment3_abcdefg <= 7'd113;
		end
	endcase
end
always @(*) begin
	sevensegment4_abcdefg <= 7'd0;
	case (sevensegment4_value)
		1'd0: begin
			sevensegment4_abcdefg <= 6'd63;
		end
		1'd1: begin
			sevensegment4_abcdefg <= 3'd6;
		end
		2'd2: begin
			sevensegment4_abcdefg <= 7'd91;
		end
		2'd3: begin
			sevensegment4_abcdefg <= 7'd79;
		end
		3'd4: begin
			sevensegment4_abcdefg <= 7'd102;
		end
		3'd5: begin
			sevensegment4_abcdefg <= 7'd109;
		end
		3'd6: begin
			sevensegment4_abcdefg <= 7'd125;
		end
		3'd7: begin
			sevensegment4_abcdefg <= 3'd7;
		end
		4'd8: begin
			sevensegment4_abcdefg <= 7'd127;
		end
		4'd9: begin
			sevensegment4_abcdefg <= 7'd111;
		end
		4'd10: begin
			sevensegment4_abcdefg <= 7'd119;
		end
		4'd11: begin
			sevensegment4_abcdefg <= 7'd124;
		end
		4'd12: begin
			sevensegment4_abcdefg <= 6'd57;
		end
		4'd13: begin
			sevensegment4_abcdefg <= 7'd94;
		end
		4'd14: begin
			sevensegment4_abcdefg <= 7'd121;
		end
		4'd15: begin
			sevensegment4_abcdefg <= 7'd113;
		end
	endcase
end
always @(*) begin
	sevensegment5_abcdefg <= 7'd0;
	case (sevensegment5_value)
		1'd0: begin
			sevensegment5_abcdefg <= 6'd63;
		end
		1'd1: begin
			sevensegment5_abcdefg <= 3'd6;
		end
		2'd2: begin
			sevensegment5_abcdefg <= 7'd91;
		end
		2'd3: begin
			sevensegment5_abcdefg <= 7'd79;
		end
		3'd4: begin
			sevensegment5_abcdefg <= 7'd102;
		end
		3'd5: begin
			sevensegment5_abcdefg <= 7'd109;
		end
		3'd6: begin
			sevensegment5_abcdefg <= 7'd125;
		end
		3'd7: begin
			sevensegment5_abcdefg <= 3'd7;
		end
		4'd8: begin
			sevensegment5_abcdefg <= 7'd127;
		end
		4'd9: begin
			sevensegment5_abcdefg <= 7'd111;
		end
		4'd10: begin
			sevensegment5_abcdefg <= 7'd119;
		end
		4'd11: begin
			sevensegment5_abcdefg <= 7'd124;
		end
		4'd12: begin
			sevensegment5_abcdefg <= 6'd57;
		end
		4'd13: begin
			sevensegment5_abcdefg <= 7'd94;
		end
		4'd14: begin
			sevensegment5_abcdefg <= 7'd121;
		end
		4'd15: begin
			sevensegment5_abcdefg <= 7'd113;
		end
	endcase
end
always @(*) begin
	basesoc_basesoc_wishbone_dat_r <= 32'd0;
	basesoc_basesoc_dat_w <= 32'd0;
	basesoc_basesoc_adr <= 14'd0;
	basesoc_basesoc_we <= 1'd0;
	basesoc_basesoc_wishbone_ack <= 1'd0;
	basesoc_next_state <= 1'd0;
	basesoc_next_state <= basesoc_state;
	case (basesoc_state)
		1'd1: begin
			basesoc_basesoc_wishbone_ack <= 1'd1;
			basesoc_basesoc_wishbone_dat_r <= basesoc_basesoc_dat_r;
			basesoc_next_state <= 1'd0;
		end
		default: begin
			basesoc_basesoc_dat_w <= basesoc_basesoc_wishbone_dat_w;
			if ((basesoc_basesoc_wishbone_cyc & basesoc_basesoc_wishbone_stb)) begin
				basesoc_basesoc_adr <= basesoc_basesoc_wishbone_adr;
				basesoc_basesoc_we <= (basesoc_basesoc_wishbone_we & (basesoc_basesoc_wishbone_sel != 1'd0));
				basesoc_next_state <= 1'd1;
			end
		end
	endcase
end
assign basesoc_basesoc_wishbone_adr = wishbone_adr;
assign basesoc_basesoc_wishbone_dat_w = wishbone_dat_w;
assign wishbone_dat_r = basesoc_basesoc_wishbone_dat_r;
assign basesoc_basesoc_wishbone_sel = wishbone_sel;
assign basesoc_basesoc_wishbone_cyc = wishbone_cyc;
assign basesoc_basesoc_wishbone_stb = wishbone_stb;
assign wishbone_ack = basesoc_basesoc_wishbone_ack;
assign basesoc_basesoc_wishbone_we = wishbone_we;
assign basesoc_basesoc_wishbone_cti = wishbone_cti;
assign basesoc_basesoc_wishbone_bte = wishbone_bte;
assign wishbone_err = basesoc_basesoc_wishbone_err;
assign basesoc_csr_bankarray_csrbank0_sel = (basesoc_csr_bankarray_interface0_bank_bus_adr[13:9] == 2'd2);
assign basesoc_csr_bankarray_csrbank0_in_r = basesoc_csr_bankarray_interface0_bank_bus_dat_w[2:0];
always @(*) begin
	basesoc_csr_bankarray_csrbank0_in_we <= 1'd0;
	basesoc_csr_bankarray_csrbank0_in_re <= 1'd0;
	if ((basesoc_csr_bankarray_csrbank0_sel & (basesoc_csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd0))) begin
		basesoc_csr_bankarray_csrbank0_in_re <= basesoc_csr_bankarray_interface0_bank_bus_we;
		basesoc_csr_bankarray_csrbank0_in_we <= (~basesoc_csr_bankarray_interface0_bank_bus_we);
	end
end
assign basesoc_csr_bankarray_csrbank0_in_w = buttons_status[2:0];
assign buttons_we = basesoc_csr_bankarray_csrbank0_in_we;
assign basesoc_csr_bankarray_csrbank1_sel = (basesoc_csr_bankarray_interface1_bank_bus_adr[13:9] == 3'd4);
assign basesoc_csr_bankarray_csrbank1_reset0_r = basesoc_csr_bankarray_interface1_bank_bus_dat_w[1:0];
always @(*) begin
	basesoc_csr_bankarray_csrbank1_reset0_we <= 1'd0;
	basesoc_csr_bankarray_csrbank1_reset0_re <= 1'd0;
	if ((basesoc_csr_bankarray_csrbank1_sel & (basesoc_csr_bankarray_interface1_bank_bus_adr[8:0] == 1'd0))) begin
		basesoc_csr_bankarray_csrbank1_reset0_re <= basesoc_csr_bankarray_interface1_bank_bus_we;
		basesoc_csr_bankarray_csrbank1_reset0_we <= (~basesoc_csr_bankarray_interface1_bank_bus_we);
	end
end
assign basesoc_csr_bankarray_csrbank1_scratch0_r = basesoc_csr_bankarray_interface1_bank_bus_dat_w[31:0];
always @(*) begin
	basesoc_csr_bankarray_csrbank1_scratch0_we <= 1'd0;
	basesoc_csr_bankarray_csrbank1_scratch0_re <= 1'd0;
	if ((basesoc_csr_bankarray_csrbank1_sel & (basesoc_csr_bankarray_interface1_bank_bus_adr[8:0] == 1'd1))) begin
		basesoc_csr_bankarray_csrbank1_scratch0_re <= basesoc_csr_bankarray_interface1_bank_bus_we;
		basesoc_csr_bankarray_csrbank1_scratch0_we <= (~basesoc_csr_bankarray_interface1_bank_bus_we);
	end
end
assign basesoc_csr_bankarray_csrbank1_bus_errors_r = basesoc_csr_bankarray_interface1_bank_bus_dat_w[31:0];
always @(*) begin
	basesoc_csr_bankarray_csrbank1_bus_errors_re <= 1'd0;
	basesoc_csr_bankarray_csrbank1_bus_errors_we <= 1'd0;
	if ((basesoc_csr_bankarray_csrbank1_sel & (basesoc_csr_bankarray_interface1_bank_bus_adr[8:0] == 2'd2))) begin
		basesoc_csr_bankarray_csrbank1_bus_errors_re <= basesoc_csr_bankarray_interface1_bank_bus_we;
		basesoc_csr_bankarray_csrbank1_bus_errors_we <= (~basesoc_csr_bankarray_interface1_bank_bus_we);
	end
end
always @(*) begin
	soc_rst <= 1'd0;
	if (reset_re) begin
		soc_rst <= reset_storage[0];
	end
end
assign cpu_rst = reset_storage[1];
assign basesoc_csr_bankarray_csrbank1_reset0_w = reset_storage[1:0];
assign basesoc_csr_bankarray_csrbank1_scratch0_w = scratch_storage[31:0];
assign basesoc_csr_bankarray_csrbank1_bus_errors_w = bus_errors_status[31:0];
assign bus_errors_we = basesoc_csr_bankarray_csrbank1_bus_errors_we;
assign basesoc_csr_bankarray_csrbank2_sel = (basesoc_csr_bankarray_interface2_bank_bus_adr[13:9] == 2'd3);
assign basesoc_csr_bankarray_csrbank2_sel0_r = basesoc_csr_bankarray_interface2_bank_bus_dat_w[3:0];
always @(*) begin
	basesoc_csr_bankarray_csrbank2_sel0_re <= 1'd0;
	basesoc_csr_bankarray_csrbank2_sel0_we <= 1'd0;
	if ((basesoc_csr_bankarray_csrbank2_sel & (basesoc_csr_bankarray_interface2_bank_bus_adr[8:0] == 1'd0))) begin
		basesoc_csr_bankarray_csrbank2_sel0_re <= basesoc_csr_bankarray_interface2_bank_bus_we;
		basesoc_csr_bankarray_csrbank2_sel0_we <= (~basesoc_csr_bankarray_interface2_bank_bus_we);
	end
end
assign basesoc_csr_bankarray_csrbank2_value0_r = basesoc_csr_bankarray_interface2_bank_bus_dat_w[3:0];
always @(*) begin
	basesoc_csr_bankarray_csrbank2_value0_re <= 1'd0;
	basesoc_csr_bankarray_csrbank2_value0_we <= 1'd0;
	if ((basesoc_csr_bankarray_csrbank2_sel & (basesoc_csr_bankarray_interface2_bank_bus_adr[8:0] == 1'd1))) begin
		basesoc_csr_bankarray_csrbank2_value0_re <= basesoc_csr_bankarray_interface2_bank_bus_we;
		basesoc_csr_bankarray_csrbank2_value0_we <= (~basesoc_csr_bankarray_interface2_bank_bus_we);
	end
end
assign write_r = basesoc_csr_bankarray_interface2_bank_bus_dat_w[0];
always @(*) begin
	write_we <= 1'd0;
	write_re <= 1'd0;
	if ((basesoc_csr_bankarray_csrbank2_sel & (basesoc_csr_bankarray_interface2_bank_bus_adr[8:0] == 2'd2))) begin
		write_re <= basesoc_csr_bankarray_interface2_bank_bus_we;
		write_we <= (~basesoc_csr_bankarray_interface2_bank_bus_we);
	end
end
assign basesoc_csr_bankarray_csrbank2_sel0_w = sel_storage[3:0];
assign basesoc_csr_bankarray_csrbank2_value0_w = value_storage[3:0];
assign basesoc_csr_bankarray_sel = (basesoc_csr_bankarray_sram_bus_adr[13:9] == 3'd5);
always @(*) begin
	basesoc_csr_bankarray_sram_bus_dat_r <= 32'd0;
	if (basesoc_csr_bankarray_sel_r) begin
		basesoc_csr_bankarray_sram_bus_dat_r <= basesoc_csr_bankarray_dat_r;
	end
end
assign basesoc_csr_bankarray_adr = basesoc_csr_bankarray_sram_bus_adr[5:0];
assign basesoc_csr_bankarray_csrbank3_sel = (basesoc_csr_bankarray_interface3_bank_bus_adr[13:9] == 1'd0);
assign basesoc_csr_bankarray_csrbank3_out0_r = basesoc_csr_bankarray_interface3_bank_bus_dat_w[15:0];
always @(*) begin
	basesoc_csr_bankarray_csrbank3_out0_re <= 1'd0;
	basesoc_csr_bankarray_csrbank3_out0_we <= 1'd0;
	if ((basesoc_csr_bankarray_csrbank3_sel & (basesoc_csr_bankarray_interface3_bank_bus_adr[8:0] == 1'd0))) begin
		basesoc_csr_bankarray_csrbank3_out0_re <= basesoc_csr_bankarray_interface3_bank_bus_we;
		basesoc_csr_bankarray_csrbank3_out0_we <= (~basesoc_csr_bankarray_interface3_bank_bus_we);
	end
end
assign basesoc_csr_bankarray_csrbank3_out0_w = leds_storage[15:0];
assign basesoc_csr_bankarray_csrbank4_sel = (basesoc_csr_bankarray_interface4_bank_bus_adr[13:9] == 1'd1);
assign basesoc_csr_bankarray_csrbank4_in_r = basesoc_csr_bankarray_interface4_bank_bus_dat_w[15:0];
always @(*) begin
	basesoc_csr_bankarray_csrbank4_in_re <= 1'd0;
	basesoc_csr_bankarray_csrbank4_in_we <= 1'd0;
	if ((basesoc_csr_bankarray_csrbank4_sel & (basesoc_csr_bankarray_interface4_bank_bus_adr[8:0] == 1'd0))) begin
		basesoc_csr_bankarray_csrbank4_in_re <= basesoc_csr_bankarray_interface4_bank_bus_we;
		basesoc_csr_bankarray_csrbank4_in_we <= (~basesoc_csr_bankarray_interface4_bank_bus_we);
	end
end
assign basesoc_csr_bankarray_csrbank4_in_w = switches_status[15:0];
assign switches_we = basesoc_csr_bankarray_csrbank4_in_we;
assign basesoc_csr_interconnect_adr = basesoc_basesoc_adr;
assign basesoc_csr_interconnect_we = basesoc_basesoc_we;
assign basesoc_csr_interconnect_dat_w = basesoc_basesoc_dat_w;
assign basesoc_basesoc_dat_r = basesoc_csr_interconnect_dat_r;
assign basesoc_csr_bankarray_interface0_bank_bus_adr = basesoc_csr_interconnect_adr;
assign basesoc_csr_bankarray_interface1_bank_bus_adr = basesoc_csr_interconnect_adr;
assign basesoc_csr_bankarray_interface2_bank_bus_adr = basesoc_csr_interconnect_adr;
assign basesoc_csr_bankarray_interface3_bank_bus_adr = basesoc_csr_interconnect_adr;
assign basesoc_csr_bankarray_interface4_bank_bus_adr = basesoc_csr_interconnect_adr;
assign basesoc_csr_bankarray_sram_bus_adr = basesoc_csr_interconnect_adr;
assign basesoc_csr_bankarray_interface0_bank_bus_we = basesoc_csr_interconnect_we;
assign basesoc_csr_bankarray_interface1_bank_bus_we = basesoc_csr_interconnect_we;
assign basesoc_csr_bankarray_interface2_bank_bus_we = basesoc_csr_interconnect_we;
assign basesoc_csr_bankarray_interface3_bank_bus_we = basesoc_csr_interconnect_we;
assign basesoc_csr_bankarray_interface4_bank_bus_we = basesoc_csr_interconnect_we;
assign basesoc_csr_bankarray_sram_bus_we = basesoc_csr_interconnect_we;
assign basesoc_csr_bankarray_interface0_bank_bus_dat_w = basesoc_csr_interconnect_dat_w;
assign basesoc_csr_bankarray_interface1_bank_bus_dat_w = basesoc_csr_interconnect_dat_w;
assign basesoc_csr_bankarray_interface2_bank_bus_dat_w = basesoc_csr_interconnect_dat_w;
assign basesoc_csr_bankarray_interface3_bank_bus_dat_w = basesoc_csr_interconnect_dat_w;
assign basesoc_csr_bankarray_interface4_bank_bus_dat_w = basesoc_csr_interconnect_dat_w;
assign basesoc_csr_bankarray_sram_bus_dat_w = basesoc_csr_interconnect_dat_w;
assign basesoc_csr_interconnect_dat_r = (((((basesoc_csr_bankarray_interface0_bank_bus_dat_r | basesoc_csr_bankarray_interface1_bank_bus_dat_r) | basesoc_csr_bankarray_interface2_bank_bus_dat_r) | basesoc_csr_bankarray_interface3_bank_bus_dat_r) | basesoc_csr_bankarray_interface4_bank_bus_dat_r) | basesoc_csr_bankarray_sram_bus_dat_r);
assign rx_rx = multiregimpl0_regs1;
assign switches_status = multiregimpl1_regs1;
assign buttons_status = multiregimpl2_regs1;


//------------------------------------------------------------------------------
// Synchronous Logic
//------------------------------------------------------------------------------

always @(posedge por_clk) begin
	int_rst <= (~cpu_reset);
end

always @(posedge sys_clk) begin
	if ((bus_errors != 32'd4294967295)) begin
		if (bus_error) begin
			bus_errors <= (bus_errors + 1'd1);
		end
	end
	{tx_tick, tx_phase} <= 24'd9895604;
	if (tx_enable) begin
		{tx_tick, tx_phase} <= (tx_phase + 24'd9895604);
	end
	subfragments_rs232phytx_state <= subfragments_rs232phytx_next_state;
	if (tx_count_rs232phytx_next_value_ce0) begin
		tx_count <= tx_count_rs232phytx_next_value0;
	end
	if (obj_serial_tx_rs232phytx_next_value_ce1) begin
		serial_tx <= obj_serial_tx_rs232phytx_next_value1;
	end
	if (tx_data_rs232phytx_next_value_ce2) begin
		tx_data <= tx_data_rs232phytx_next_value2;
	end
	rx_rx_d <= rx_rx;
	{rx_tick, rx_phase} <= 32'd2147483648;
	if (rx_enable) begin
		{rx_tick, rx_phase} <= (rx_phase + 24'd9895604);
	end
	subfragments_rs232phyrx_state <= subfragments_rs232phyrx_next_state;
	if (rx_count_rs232phyrx_next_value_ce0) begin
		rx_count <= rx_count_rs232phyrx_next_value0;
	end
	if (rx_data_rs232phyrx_next_value_ce1) begin
		rx_data <= rx_data_rs232phyrx_next_value1;
	end
	subfragments_state <= subfragments_next_state;
	if (data_bytes_count_next_value_ce0) begin
		data_bytes_count <= data_bytes_count_next_value0;
	end
	if (addr_bytes_count_next_value_ce1) begin
		addr_bytes_count <= addr_bytes_count_next_value1;
	end
	if (words_count_next_value_ce2) begin
		words_count <= words_count_next_value2;
	end
	if (cmd_next_value_ce3) begin
		cmd <= cmd_next_value3;
	end
	if (length_next_value_ce4) begin
		length <= length_next_value4;
	end
	if (address_next_value_ce5) begin
		address <= address_next_value5;
	end
	if (incr_next_value_ce6) begin
		incr <= incr_next_value6;
	end
	if (data_next_value_ce7) begin
		data <= data_next_value7;
	end
	if (reset) begin
		incr <= 1'd0;
		subfragments_state <= 3'd0;
	end
	if (wait_1) begin
		if ((~done)) begin
			count <= (count - 1'd1);
		end
	end else begin
		count <= 23'd5000000;
	end
	if (write_re) begin
		case (sel_storage)
			1'd0: begin
				values0 <= value_storage;
			end
			1'd1: begin
				values1 <= value_storage;
			end
			2'd2: begin
				values2 <= value_storage;
			end
			2'd3: begin
				values3 <= value_storage;
			end
			3'd4: begin
				values4 <= value_storage;
			end
			3'd5: begin
				values5 <= value_storage;
			end
		endcase
	end
	basesoc_state <= basesoc_next_state;
	basesoc_csr_bankarray_interface0_bank_bus_dat_r <= 1'd0;
	if (basesoc_csr_bankarray_csrbank0_sel) begin
		case (basesoc_csr_bankarray_interface0_bank_bus_adr[8:0])
			1'd0: begin
				basesoc_csr_bankarray_interface0_bank_bus_dat_r <= basesoc_csr_bankarray_csrbank0_in_w;
			end
		endcase
	end
	buttons_re <= basesoc_csr_bankarray_csrbank0_in_re;
	basesoc_csr_bankarray_interface1_bank_bus_dat_r <= 1'd0;
	if (basesoc_csr_bankarray_csrbank1_sel) begin
		case (basesoc_csr_bankarray_interface1_bank_bus_adr[8:0])
			1'd0: begin
				basesoc_csr_bankarray_interface1_bank_bus_dat_r <= basesoc_csr_bankarray_csrbank1_reset0_w;
			end
			1'd1: begin
				basesoc_csr_bankarray_interface1_bank_bus_dat_r <= basesoc_csr_bankarray_csrbank1_scratch0_w;
			end
			2'd2: begin
				basesoc_csr_bankarray_interface1_bank_bus_dat_r <= basesoc_csr_bankarray_csrbank1_bus_errors_w;
			end
		endcase
	end
	if (basesoc_csr_bankarray_csrbank1_reset0_re) begin
		reset_storage[1:0] <= basesoc_csr_bankarray_csrbank1_reset0_r;
	end
	reset_re <= basesoc_csr_bankarray_csrbank1_reset0_re;
	if (basesoc_csr_bankarray_csrbank1_scratch0_re) begin
		scratch_storage[31:0] <= basesoc_csr_bankarray_csrbank1_scratch0_r;
	end
	scratch_re <= basesoc_csr_bankarray_csrbank1_scratch0_re;
	bus_errors_re <= basesoc_csr_bankarray_csrbank1_bus_errors_re;
	basesoc_csr_bankarray_interface2_bank_bus_dat_r <= 1'd0;
	if (basesoc_csr_bankarray_csrbank2_sel) begin
		case (basesoc_csr_bankarray_interface2_bank_bus_adr[8:0])
			1'd0: begin
				basesoc_csr_bankarray_interface2_bank_bus_dat_r <= basesoc_csr_bankarray_csrbank2_sel0_w;
			end
			1'd1: begin
				basesoc_csr_bankarray_interface2_bank_bus_dat_r <= basesoc_csr_bankarray_csrbank2_value0_w;
			end
			2'd2: begin
				basesoc_csr_bankarray_interface2_bank_bus_dat_r <= write_w;
			end
		endcase
	end
	if (basesoc_csr_bankarray_csrbank2_sel0_re) begin
		sel_storage[3:0] <= basesoc_csr_bankarray_csrbank2_sel0_r;
	end
	sel_re <= basesoc_csr_bankarray_csrbank2_sel0_re;
	if (basesoc_csr_bankarray_csrbank2_value0_re) begin
		value_storage[3:0] <= basesoc_csr_bankarray_csrbank2_value0_r;
	end
	value_re <= basesoc_csr_bankarray_csrbank2_value0_re;
	basesoc_csr_bankarray_sel_r <= basesoc_csr_bankarray_sel;
	basesoc_csr_bankarray_interface3_bank_bus_dat_r <= 1'd0;
	if (basesoc_csr_bankarray_csrbank3_sel) begin
		case (basesoc_csr_bankarray_interface3_bank_bus_adr[8:0])
			1'd0: begin
				basesoc_csr_bankarray_interface3_bank_bus_dat_r <= basesoc_csr_bankarray_csrbank3_out0_w;
			end
		endcase
	end
	if (basesoc_csr_bankarray_csrbank3_out0_re) begin
		leds_storage[15:0] <= basesoc_csr_bankarray_csrbank3_out0_r;
	end
	leds_re <= basesoc_csr_bankarray_csrbank3_out0_re;
	basesoc_csr_bankarray_interface4_bank_bus_dat_r <= 1'd0;
	if (basesoc_csr_bankarray_csrbank4_sel) begin
		case (basesoc_csr_bankarray_interface4_bank_bus_adr[8:0])
			1'd0: begin
				basesoc_csr_bankarray_interface4_bank_bus_dat_r <= basesoc_csr_bankarray_csrbank4_in_w;
			end
		endcase
	end
	switches_re <= basesoc_csr_bankarray_csrbank4_in_re;
	if (sys_rst) begin
		reset_storage <= 2'd0;
		reset_re <= 1'd0;
		scratch_storage <= 32'd305419896;
		scratch_re <= 1'd0;
		bus_errors_re <= 1'd0;
		bus_errors <= 32'd0;
		serial_tx <= 1'd1;
		tx_tick <= 1'd0;
		rx_tick <= 1'd0;
		rx_rx_d <= 1'd0;
		incr <= 1'd0;
		count <= 23'd5000000;
		leds_storage <= 16'd0;
		leds_re <= 1'd0;
		switches_re <= 1'd0;
		buttons_re <= 1'd0;
		sel_storage <= 4'd0;
		sel_re <= 1'd0;
		value_storage <= 4'd0;
		value_re <= 1'd0;
		values0 <= 4'd0;
		values1 <= 4'd0;
		values2 <= 4'd0;
		values3 <= 4'd0;
		values4 <= 4'd0;
		values5 <= 4'd0;
		subfragments_rs232phytx_state <= 1'd0;
		subfragments_rs232phyrx_state <= 1'd0;
		subfragments_state <= 3'd0;
		basesoc_csr_bankarray_sel_r <= 1'd0;
		basesoc_state <= 1'd0;
	end
	multiregimpl0_regs0 <= serial_rx;
	multiregimpl0_regs1 <= multiregimpl0_regs0;
	multiregimpl1_regs0 <= {user_sw15, user_sw14, user_sw13, user_sw12, user_sw11, user_sw10, user_sw9, user_sw8, user_sw7, user_sw6, user_sw5, user_sw4, user_sw3, user_sw2, user_sw1, user_sw0};
	multiregimpl1_regs1 <= multiregimpl1_regs0;
	multiregimpl2_regs0 <= {user_btn2, user_btn1, user_btn0};
	multiregimpl2_regs1 <= multiregimpl2_regs0;
end


//------------------------------------------------------------------------------
// Specialized Logic
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Memory mem: 50-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: ---- | 
reg [7:0] mem[0:49];
initial begin
	$readmemh("top_mem.init", mem);
end
reg [5:0] mem_adr0;
always @(posedge sys_clk) begin
	mem_adr0 <= basesoc_csr_bankarray_adr;
end
assign basesoc_csr_bankarray_dat_r = mem[mem_adr0];


endmodule

// -----------------------------------------------------------------------------
//  Auto-Generated by LiteX on 2022-05-25 17:58:30.
//------------------------------------------------------------------------------
