// -----------------------------------------------------------------------------
// Auto-Generated by:        __   _ __      _  __
//                          / /  (_) /____ | |/_/
//                         / /__/ / __/ -_)>  <
//                        /____/_/\__/\__/_/|_|
//                     Build your hardware, easily!
//                   https://github.com/enjoy-digital/litex
//
// Filename   : top.v
// Device     : xc7a100t-csg324-1
// LiteX sha1 : c8b5ef9
// Date       : 2022-05-23 21:50:27
//------------------------------------------------------------------------------


//------------------------------------------------------------------------------
// Module
//------------------------------------------------------------------------------

module top (
	output reg  serial_tx,
	input  wire serial_rx,
	input  wire clk100,
	input  wire cpu_reset,
	output wire user_led0,
	output wire user_led1,
	output wire user_led2,
	output wire user_led3,
	output wire user_led4,
	output wire user_led5,
	output wire user_led6,
	output wire user_led7,
	output wire user_led8,
	output wire user_led9,
	output wire user_led10,
	output wire user_led11,
	output wire user_led12,
	output wire user_led13,
	output wire user_led14,
	output wire user_led15,
	input  wire user_sw0,
	input  wire user_sw1,
	input  wire user_sw2,
	input  wire user_sw3,
	input  wire user_sw4,
	input  wire user_sw5,
	input  wire user_sw6,
	input  wire user_sw7,
	input  wire user_sw8,
	input  wire user_sw9,
	input  wire user_sw10,
	input  wire user_sw11,
	input  wire user_sw12,
	input  wire user_sw13,
	input  wire user_sw14,
	input  wire user_sw15,
	input  wire user_btn0,
	input  wire user_btn1,
	input  wire user_btn2,
	input  wire user_btn3,
	input  wire user_btn4,
	output reg  user_rgb_led0_r,
	output reg  user_rgb_led0_g,
	output reg  user_rgb_led0_b,
	output reg  adxl362_spi_cs_n,
	output reg  adxl362_spi_clk,
	output reg  adxl362_spi_mosi,
	input  wire adxl362_spi_miso,
	output wire [7:0] display_cs_n,
	output wire [7:0] display_abcdefg
);


//------------------------------------------------------------------------------
// Signals
//------------------------------------------------------------------------------

reg  soc_rst = 1'd0;
wire cpu_rst;
reg  [1:0] reset_storage = 2'd0;
reg  reset_re = 1'd0;
reg  [31:0] scratch_storage = 32'd305419896;
reg  scratch_re = 1'd0;
wire [31:0] bus_errors_status;
wire bus_errors_we;
reg  bus_errors_re = 1'd0;
wire bus_error;
reg  [31:0] bus_errors = 32'd0;
wire reset;
reg  [31:0] interrupt = 32'd0;
wire [29:0] ibus_adr;
wire [31:0] ibus_dat_w;
wire [31:0] ibus_dat_r;
wire [3:0] ibus_sel;
wire ibus_cyc;
wire ibus_stb;
wire ibus_ack;
wire ibus_we;
wire [2:0] ibus_cti;
wire [1:0] ibus_bte;
wire ibus_err;
wire [29:0] dbus_adr;
wire [31:0] dbus_dat_w;
wire [31:0] dbus_dat_r;
wire [3:0] dbus_sel;
wire dbus_cyc;
wire dbus_stb;
wire dbus_ack;
wire dbus_we;
wire [2:0] dbus_cti;
wire [1:0] dbus_bte;
wire dbus_err;
reg  [31:0] vexriscv = 32'd0;
wire [29:0] ram_bus_adr;
wire [31:0] ram_bus_dat_w;
wire [31:0] ram_bus_dat_r;
wire [3:0] ram_bus_sel;
wire ram_bus_cyc;
wire ram_bus_stb;
reg  ram_bus_ack = 1'd0;
wire ram_bus_we;
wire [2:0] ram_bus_cti;
wire [1:0] ram_bus_bte;
reg  ram_bus_err = 1'd0;
reg  adr_burst = 1'd0;
wire [12:0] adr;
wire [31:0] dat_r;
wire [29:0] interface0_ram_bus_adr;
wire [31:0] interface0_ram_bus_dat_w;
wire [31:0] interface0_ram_bus_dat_r;
wire [3:0] interface0_ram_bus_sel;
wire interface0_ram_bus_cyc;
wire interface0_ram_bus_stb;
reg  interface0_ram_bus_ack = 1'd0;
wire interface0_ram_bus_we;
wire [2:0] interface0_ram_bus_cti;
wire [1:0] interface0_ram_bus_bte;
reg  interface0_ram_bus_err = 1'd0;
reg  sram0_adr_burst = 1'd0;
wire [10:0] sram0_adr;
wire [31:0] sram0_dat_r;
reg  [3:0] sram0_we = 4'd0;
wire [31:0] sram0_dat_w;
wire [29:0] interface1_ram_bus_adr;
wire [31:0] interface1_ram_bus_dat_w;
wire [31:0] interface1_ram_bus_dat_r;
wire [3:0] interface1_ram_bus_sel;
wire interface1_ram_bus_cyc;
wire interface1_ram_bus_stb;
reg  interface1_ram_bus_ack = 1'd0;
wire interface1_ram_bus_we;
wire [2:0] interface1_ram_bus_cti;
wire [1:0] interface1_ram_bus_bte;
reg  interface1_ram_bus_err = 1'd0;
reg  sram1_adr_burst = 1'd0;
wire [11:0] sram1_adr;
wire [31:0] sram1_dat_r;
reg  [3:0] sram1_we = 4'd0;
wire [31:0] sram1_dat_w;
wire tx_sink_valid;
reg  tx_sink_ready = 1'd0;
wire tx_sink_first;
wire tx_sink_last;
wire [7:0] tx_sink_payload_data;
reg  [7:0] tx_data = 8'd0;
reg  [3:0] tx_count = 4'd0;
reg  tx_enable = 1'd0;
reg  tx_tick = 1'd0;
reg  [31:0] tx_phase = 32'd0;
reg  rx_source_valid = 1'd0;
wire rx_source_ready;
reg  rx_source_first = 1'd0;
reg  rx_source_last = 1'd0;
reg  [7:0] rx_source_payload_data = 8'd0;
reg  [7:0] rx_data = 8'd0;
reg  [3:0] rx_count = 4'd0;
reg  rx_enable = 1'd0;
reg  rx_tick = 1'd0;
reg  [31:0] rx_phase = 32'd0;
wire rx_rx;
reg  rx_rx_d = 1'd0;
reg  uart_rxtx_re = 1'd0;
wire [7:0] uart_rxtx_r;
reg  uart_rxtx_we = 1'd0;
wire [7:0] uart_rxtx_w;
wire uart_txfull_status;
wire uart_txfull_we;
reg  uart_txfull_re = 1'd0;
wire uart_rxempty_status;
wire uart_rxempty_we;
reg  uart_rxempty_re = 1'd0;
wire uart_irq;
wire uart_tx_status;
reg  uart_tx_pending = 1'd0;
wire uart_tx_trigger;
reg  uart_tx_clear = 1'd0;
reg  uart_tx_trigger_d = 1'd0;
wire uart_rx_status;
reg  uart_rx_pending = 1'd0;
wire uart_rx_trigger;
reg  uart_rx_clear = 1'd0;
reg  uart_rx_trigger_d = 1'd0;
wire uart_tx0;
wire uart_rx0;
reg  [1:0] uart_status_status = 2'd0;
wire uart_status_we;
reg  uart_status_re = 1'd0;
wire uart_tx1;
wire uart_rx1;
reg  [1:0] uart_pending_status = 2'd0;
wire uart_pending_we;
reg  uart_pending_re = 1'd0;
reg  [1:0] uart_pending_r = 2'd0;
wire uart_tx2;
wire uart_rx2;
reg  [1:0] uart_enable_storage = 2'd0;
reg  uart_enable_re = 1'd0;
wire uart_txempty_status;
wire uart_txempty_we;
reg  uart_txempty_re = 1'd0;
wire uart_rxfull_status;
wire uart_rxfull_we;
reg  uart_rxfull_re = 1'd0;
wire uart_uart_sink_valid;
wire uart_uart_sink_ready;
wire uart_uart_sink_first;
wire uart_uart_sink_last;
wire [7:0] uart_uart_sink_payload_data;
wire uart_uart_source_valid;
wire uart_uart_source_ready;
wire uart_uart_source_first;
wire uart_uart_source_last;
wire [7:0] uart_uart_source_payload_data;
wire uart_tx_fifo_sink_valid;
wire uart_tx_fifo_sink_ready;
reg  uart_tx_fifo_sink_first = 1'd0;
reg  uart_tx_fifo_sink_last = 1'd0;
wire [7:0] uart_tx_fifo_sink_payload_data;
wire uart_tx_fifo_source_valid;
wire uart_tx_fifo_source_ready;
wire uart_tx_fifo_source_first;
wire uart_tx_fifo_source_last;
wire [7:0] uart_tx_fifo_source_payload_data;
wire uart_tx_fifo_re;
reg  uart_tx_fifo_readable = 1'd0;
wire uart_tx_fifo_syncfifo_we;
wire uart_tx_fifo_syncfifo_writable;
wire uart_tx_fifo_syncfifo_re;
wire uart_tx_fifo_syncfifo_readable;
wire [9:0] uart_tx_fifo_syncfifo_din;
wire [9:0] uart_tx_fifo_syncfifo_dout;
reg  [4:0] uart_tx_fifo_level0 = 5'd0;
reg  uart_tx_fifo_replace = 1'd0;
reg  [3:0] uart_tx_fifo_produce = 4'd0;
reg  [3:0] uart_tx_fifo_consume = 4'd0;
reg  [3:0] uart_tx_fifo_wrport_adr = 4'd0;
wire [9:0] uart_tx_fifo_wrport_dat_r;
wire uart_tx_fifo_wrport_we;
wire [9:0] uart_tx_fifo_wrport_dat_w;
wire uart_tx_fifo_do_read;
wire [3:0] uart_tx_fifo_rdport_adr;
wire [9:0] uart_tx_fifo_rdport_dat_r;
wire uart_tx_fifo_rdport_re;
wire [4:0] uart_tx_fifo_level1;
wire [7:0] uart_tx_fifo_fifo_in_payload_data;
wire uart_tx_fifo_fifo_in_first;
wire uart_tx_fifo_fifo_in_last;
wire [7:0] uart_tx_fifo_fifo_out_payload_data;
wire uart_tx_fifo_fifo_out_first;
wire uart_tx_fifo_fifo_out_last;
wire uart_rx_fifo_sink_valid;
wire uart_rx_fifo_sink_ready;
wire uart_rx_fifo_sink_first;
wire uart_rx_fifo_sink_last;
wire [7:0] uart_rx_fifo_sink_payload_data;
wire uart_rx_fifo_source_valid;
wire uart_rx_fifo_source_ready;
wire uart_rx_fifo_source_first;
wire uart_rx_fifo_source_last;
wire [7:0] uart_rx_fifo_source_payload_data;
wire uart_rx_fifo_re;
reg  uart_rx_fifo_readable = 1'd0;
wire uart_rx_fifo_syncfifo_we;
wire uart_rx_fifo_syncfifo_writable;
wire uart_rx_fifo_syncfifo_re;
wire uart_rx_fifo_syncfifo_readable;
wire [9:0] uart_rx_fifo_syncfifo_din;
wire [9:0] uart_rx_fifo_syncfifo_dout;
reg  [4:0] uart_rx_fifo_level0 = 5'd0;
reg  uart_rx_fifo_replace = 1'd0;
reg  [3:0] uart_rx_fifo_produce = 4'd0;
reg  [3:0] uart_rx_fifo_consume = 4'd0;
reg  [3:0] uart_rx_fifo_wrport_adr = 4'd0;
wire [9:0] uart_rx_fifo_wrport_dat_r;
wire uart_rx_fifo_wrport_we;
wire [9:0] uart_rx_fifo_wrport_dat_w;
wire uart_rx_fifo_do_read;
wire [3:0] uart_rx_fifo_rdport_adr;
wire [9:0] uart_rx_fifo_rdport_dat_r;
wire uart_rx_fifo_rdport_re;
wire [4:0] uart_rx_fifo_level1;
wire [7:0] uart_rx_fifo_fifo_in_payload_data;
wire uart_rx_fifo_fifo_in_first;
wire uart_rx_fifo_fifo_in_last;
wire [7:0] uart_rx_fifo_fifo_out_payload_data;
wire uart_rx_fifo_fifo_out_first;
wire uart_rx_fifo_fifo_out_last;
reg  [31:0] timer_load_storage = 32'd0;
reg  timer_load_re = 1'd0;
reg  [31:0] timer_reload_storage = 32'd0;
reg  timer_reload_re = 1'd0;
reg  timer_en_storage = 1'd0;
reg  timer_en_re = 1'd0;
reg  timer_update_value_storage = 1'd0;
reg  timer_update_value_re = 1'd0;
reg  [31:0] timer_value_status = 32'd0;
wire timer_value_we;
reg  timer_value_re = 1'd0;
wire timer_irq;
wire timer_zero_status;
reg  timer_zero_pending = 1'd0;
wire timer_zero_trigger;
reg  timer_zero_clear = 1'd0;
reg  timer_zero_trigger_d = 1'd0;
wire timer_zero0;
wire timer_status_status;
wire timer_status_we;
reg  timer_status_re = 1'd0;
wire timer_zero1;
wire timer_pending_status;
wire timer_pending_we;
reg  timer_pending_re = 1'd0;
reg  timer_pending_r = 1'd0;
wire timer_zero2;
reg  timer_enable_storage = 1'd0;
reg  timer_enable_re = 1'd0;
reg  [31:0] timer_value = 32'd0;
wire sys_clk;
wire sys_rst;
wire por_clk;
reg  int_rst = 1'd1;
reg  [56:0] dna_status = 57'd0;
wire dna_we;
reg  dna_re = 1'd0;
wire dna_do;
reg  [6:0] dna_count = 7'd0;
wire dna_clk;
reg  [11:0] xadc_temperature_status = 12'd0;
wire xadc_temperature_we;
reg  xadc_temperature_re = 1'd0;
reg  [11:0] xadc_vccint_status = 12'd0;
wire xadc_vccint_we;
reg  xadc_vccint_re = 1'd0;
reg  [11:0] xadc_vccaux_status = 12'd0;
wire xadc_vccaux_we;
reg  xadc_vccaux_re = 1'd0;
reg  [11:0] xadc_vccbram_status = 12'd0;
wire xadc_vccbram_we;
reg  xadc_vccbram_re = 1'd0;
reg  xadc_eoc_status = 1'd0;
wire xadc_eoc_we;
reg  xadc_eoc_re = 1'd0;
reg  xadc_eos_status = 1'd0;
wire xadc_eos_we;
reg  xadc_eos_re = 1'd0;
wire [7:0] xadc_alarm;
wire xadc_ot;
wire xadc_busy;
wire [6:0] xadc_channel;
wire xadc_eoc;
wire xadc_eos;
reg  xadc_dwe = 1'd0;
reg  xadc_den = 1'd0;
wire xadc_drdy;
reg  [6:0] xadc_dadr = 7'd0;
reg  [15:0] xadc_di = 16'd0;
wire [15:0] xadc_do;
reg  xadc_drp_en = 1'd0;
reg  [15:0] leds_storage = 16'd0;
reg  leds_re = 1'd0;
wire [15:0] switches_status;
wire switches_we;
reg  switches_re = 1'd0;
wire [4:0] buttons_status;
wire buttons_we;
reg  buttons_re = 1'd0;
reg  r_enable_storage = 1'd0;
reg  r_enable_re = 1'd0;
reg  [31:0] r_width_storage = 32'd0;
reg  r_width_re = 1'd0;
reg  [31:0] r_period_storage = 32'd0;
reg  r_period_re = 1'd0;
wire r_enable;
wire [31:0] r_width;
wire [31:0] r_period;
reg  [31:0] r_count = 32'd0;
reg  g_enable_storage = 1'd0;
reg  g_enable_re = 1'd0;
reg  [31:0] g_width_storage = 32'd0;
reg  g_width_re = 1'd0;
reg  [31:0] g_period_storage = 32'd0;
reg  g_period_re = 1'd0;
wire g_enable;
wire [31:0] g_width;
wire [31:0] g_period;
reg  [31:0] g_count = 32'd0;
reg  b_enable_storage = 1'd0;
reg  b_enable_re = 1'd0;
reg  [31:0] b_width_storage = 32'd0;
reg  b_width_re = 1'd0;
reg  [31:0] b_period_storage = 32'd0;
reg  b_period_re = 1'd0;
wire b_enable;
wire [31:0] b_width;
wire [31:0] b_period;
reg  [31:0] b_count = 32'd0;
wire adxl362_start0;
wire [7:0] adxl362_length0;
reg  adxl362_done0 = 1'd0;
reg  adxl362_irq = 1'd0;
wire [31:0] adxl362_mosi;
reg  [31:0] adxl362_miso = 32'd0;
wire adxl362_cs;
wire adxl362_cs_mode;
wire adxl362_loopback;
reg  [15:0] adxl362_clk_divider0 = 16'd100;
reg  adxl362_start1 = 1'd0;
wire [7:0] adxl362_length1;
reg  [15:0] adxl362_control_storage = 16'd0;
reg  adxl362_control_re = 1'd0;
wire adxl362_done1;
wire adxl362_status_status;
wire adxl362_status_we;
reg  adxl362_status_re = 1'd0;
reg  [31:0] adxl362_mosi_storage = 32'd0;
reg  adxl362_mosi_re = 1'd0;
wire [31:0] adxl362_miso_status;
wire adxl362_miso_we;
reg  adxl362_miso_re = 1'd0;
wire adxl362_sel;
wire adxl362_mode0;
reg  [16:0] adxl362_cs_storage = 17'd1;
reg  adxl362_cs_re = 1'd0;
wire adxl362_mode1;
reg  adxl362_loopback_storage = 1'd0;
reg  adxl362_loopback_re = 1'd0;
reg  adxl362_clk_enable = 1'd0;
reg  adxl362_xfer_enable = 1'd0;
reg  [4:0] adxl362_count = 5'd0;
reg  adxl362_mosi_latch = 1'd0;
reg  adxl362_miso_latch = 1'd0;
reg  [15:0] adxl362_clk_divider1 = 16'd0;
wire adxl362_clk_rise;
wire adxl362_clk_fall;
reg  [31:0] adxl362_mosi_data = 32'd0;
reg  [4:0] adxl362_mosi_sel = 5'd0;
reg  [31:0] adxl362_miso_data = 32'd0;
reg  [3:0] display_sel_storage = 4'd0;
reg  display_sel_re = 1'd0;
reg  [3:0] display_value_storage = 4'd0;
reg  display_value_re = 1'd0;
reg  display_write_re = 1'd0;
wire display_write_r;
reg  display_write_we = 1'd0;
reg  display_write_w = 1'd0;
wire [5:0] display_cs0;
wire [6:0] display_abcdefg0;
reg  [4:0] display_values0 = 5'd0;
reg  [4:0] display_values1 = 5'd0;
reg  [4:0] display_values2 = 5'd0;
reg  [4:0] display_values3 = 5'd0;
reg  [4:0] display_values4 = 5'd0;
reg  [4:0] display_values5 = 5'd0;
wire [5:0] display_cs1;
wire [6:0] display_abcdefg1;
reg  [3:0] display_value = 4'd0;
reg  [6:0] display_abcdefg2 = 7'd0;
reg  display_enable = 1'd1;
wire display_ce;
reg  [16:0] display_counter = 17'd0;
reg  [5:0] display_cs2 = 6'd1;
reg  subfragments_rs232phytx_state = 1'd0;
reg  subfragments_rs232phytx_next_state = 1'd0;
reg  [3:0] tx_count_rs232phytx_next_value0 = 4'd0;
reg  tx_count_rs232phytx_next_value_ce0 = 1'd0;
reg  serial_tx_rs232phytx_next_value1 = 1'd0;
reg  serial_tx_rs232phytx_next_value_ce1 = 1'd0;
reg  [7:0] tx_data_rs232phytx_next_value2 = 8'd0;
reg  tx_data_rs232phytx_next_value_ce2 = 1'd0;
reg  subfragments_rs232phyrx_state = 1'd0;
reg  subfragments_rs232phyrx_next_state = 1'd0;
reg  [3:0] rx_count_rs232phyrx_next_value0 = 4'd0;
reg  rx_count_rs232phyrx_next_value_ce0 = 1'd0;
reg  [7:0] rx_data_rs232phyrx_next_value1 = 8'd0;
reg  rx_data_rs232phyrx_next_value_ce1 = 1'd0;
reg  [1:0] subfragments_state = 2'd0;
reg  [1:0] subfragments_next_state = 2'd0;
reg  [4:0] adxl362_count_next_value = 5'd0;
reg  adxl362_count_next_value_ce = 1'd0;
reg  [13:0] basesoc_basesoc_adr = 14'd0;
reg  basesoc_basesoc_we = 1'd0;
reg  [31:0] basesoc_basesoc_dat_w = 32'd0;
wire [31:0] basesoc_basesoc_dat_r;
wire [29:0] basesoc_basesoc_wishbone_adr;
wire [31:0] basesoc_basesoc_wishbone_dat_w;
reg  [31:0] basesoc_basesoc_wishbone_dat_r = 32'd0;
wire [3:0] basesoc_basesoc_wishbone_sel;
wire basesoc_basesoc_wishbone_cyc;
wire basesoc_basesoc_wishbone_stb;
reg  basesoc_basesoc_wishbone_ack = 1'd0;
wire basesoc_basesoc_wishbone_we;
wire [2:0] basesoc_basesoc_wishbone_cti;
wire [1:0] basesoc_basesoc_wishbone_bte;
reg  basesoc_basesoc_wishbone_err = 1'd0;
wire [29:0] basesoc_shared_adr;
wire [31:0] basesoc_shared_dat_w;
reg  [31:0] basesoc_shared_dat_r = 32'd0;
wire [3:0] basesoc_shared_sel;
wire basesoc_shared_cyc;
wire basesoc_shared_stb;
reg  basesoc_shared_ack = 1'd0;
wire basesoc_shared_we;
wire [2:0] basesoc_shared_cti;
wire [1:0] basesoc_shared_bte;
wire basesoc_shared_err;
wire [1:0] basesoc_request;
reg  basesoc_grant = 1'd0;
reg  [3:0] basesoc_slave_sel = 4'd0;
reg  [3:0] basesoc_slave_sel_r = 4'd0;
reg  basesoc_error = 1'd0;
wire basesoc_wait;
wire basesoc_done;
reg  [19:0] basesoc_count = 20'd1000000;
wire [13:0] basesoc_csr_bankarray_interface0_bank_bus_adr;
wire basesoc_csr_bankarray_interface0_bank_bus_we;
wire [31:0] basesoc_csr_bankarray_interface0_bank_bus_dat_w;
reg  [31:0] basesoc_csr_bankarray_interface0_bank_bus_dat_r = 32'd0;
reg  basesoc_csr_bankarray_csrbank0_control0_re = 1'd0;
wire [15:0] basesoc_csr_bankarray_csrbank0_control0_r;
reg  basesoc_csr_bankarray_csrbank0_control0_we = 1'd0;
wire [15:0] basesoc_csr_bankarray_csrbank0_control0_w;
reg  basesoc_csr_bankarray_csrbank0_status_re = 1'd0;
wire basesoc_csr_bankarray_csrbank0_status_r;
reg  basesoc_csr_bankarray_csrbank0_status_we = 1'd0;
wire basesoc_csr_bankarray_csrbank0_status_w;
reg  basesoc_csr_bankarray_csrbank0_mosi0_re = 1'd0;
wire [31:0] basesoc_csr_bankarray_csrbank0_mosi0_r;
reg  basesoc_csr_bankarray_csrbank0_mosi0_we = 1'd0;
wire [31:0] basesoc_csr_bankarray_csrbank0_mosi0_w;
reg  basesoc_csr_bankarray_csrbank0_miso_re = 1'd0;
wire [31:0] basesoc_csr_bankarray_csrbank0_miso_r;
reg  basesoc_csr_bankarray_csrbank0_miso_we = 1'd0;
wire [31:0] basesoc_csr_bankarray_csrbank0_miso_w;
reg  basesoc_csr_bankarray_csrbank0_cs0_re = 1'd0;
wire [16:0] basesoc_csr_bankarray_csrbank0_cs0_r;
reg  basesoc_csr_bankarray_csrbank0_cs0_we = 1'd0;
wire [16:0] basesoc_csr_bankarray_csrbank0_cs0_w;
reg  basesoc_csr_bankarray_csrbank0_loopback0_re = 1'd0;
wire basesoc_csr_bankarray_csrbank0_loopback0_r;
reg  basesoc_csr_bankarray_csrbank0_loopback0_we = 1'd0;
wire basesoc_csr_bankarray_csrbank0_loopback0_w;
wire basesoc_csr_bankarray_csrbank0_sel;
wire [13:0] basesoc_csr_bankarray_interface1_bank_bus_adr;
wire basesoc_csr_bankarray_interface1_bank_bus_we;
wire [31:0] basesoc_csr_bankarray_interface1_bank_bus_dat_w;
reg  [31:0] basesoc_csr_bankarray_interface1_bank_bus_dat_r = 32'd0;
reg  basesoc_csr_bankarray_csrbank1_in_re = 1'd0;
wire [4:0] basesoc_csr_bankarray_csrbank1_in_r;
reg  basesoc_csr_bankarray_csrbank1_in_we = 1'd0;
wire [4:0] basesoc_csr_bankarray_csrbank1_in_w;
wire basesoc_csr_bankarray_csrbank1_sel;
wire [13:0] basesoc_csr_bankarray_interface2_bank_bus_adr;
wire basesoc_csr_bankarray_interface2_bank_bus_we;
wire [31:0] basesoc_csr_bankarray_interface2_bank_bus_dat_w;
reg  [31:0] basesoc_csr_bankarray_interface2_bank_bus_dat_r = 32'd0;
reg  basesoc_csr_bankarray_csrbank2_reset0_re = 1'd0;
wire [1:0] basesoc_csr_bankarray_csrbank2_reset0_r;
reg  basesoc_csr_bankarray_csrbank2_reset0_we = 1'd0;
wire [1:0] basesoc_csr_bankarray_csrbank2_reset0_w;
reg  basesoc_csr_bankarray_csrbank2_scratch0_re = 1'd0;
wire [31:0] basesoc_csr_bankarray_csrbank2_scratch0_r;
reg  basesoc_csr_bankarray_csrbank2_scratch0_we = 1'd0;
wire [31:0] basesoc_csr_bankarray_csrbank2_scratch0_w;
reg  basesoc_csr_bankarray_csrbank2_bus_errors_re = 1'd0;
wire [31:0] basesoc_csr_bankarray_csrbank2_bus_errors_r;
reg  basesoc_csr_bankarray_csrbank2_bus_errors_we = 1'd0;
wire [31:0] basesoc_csr_bankarray_csrbank2_bus_errors_w;
wire basesoc_csr_bankarray_csrbank2_sel;
wire [13:0] basesoc_csr_bankarray_interface3_bank_bus_adr;
wire basesoc_csr_bankarray_interface3_bank_bus_we;
wire [31:0] basesoc_csr_bankarray_interface3_bank_bus_dat_w;
reg  [31:0] basesoc_csr_bankarray_interface3_bank_bus_dat_r = 32'd0;
reg  basesoc_csr_bankarray_csrbank3_sel0_re = 1'd0;
wire [3:0] basesoc_csr_bankarray_csrbank3_sel0_r;
reg  basesoc_csr_bankarray_csrbank3_sel0_we = 1'd0;
wire [3:0] basesoc_csr_bankarray_csrbank3_sel0_w;
reg  basesoc_csr_bankarray_csrbank3_value0_re = 1'd0;
wire [3:0] basesoc_csr_bankarray_csrbank3_value0_r;
reg  basesoc_csr_bankarray_csrbank3_value0_we = 1'd0;
wire [3:0] basesoc_csr_bankarray_csrbank3_value0_w;
wire basesoc_csr_bankarray_csrbank3_sel;
wire [13:0] basesoc_csr_bankarray_interface4_bank_bus_adr;
wire basesoc_csr_bankarray_interface4_bank_bus_we;
wire [31:0] basesoc_csr_bankarray_interface4_bank_bus_dat_w;
reg  [31:0] basesoc_csr_bankarray_interface4_bank_bus_dat_r = 32'd0;
reg  basesoc_csr_bankarray_csrbank4_id1_re = 1'd0;
wire [24:0] basesoc_csr_bankarray_csrbank4_id1_r;
reg  basesoc_csr_bankarray_csrbank4_id1_we = 1'd0;
wire [24:0] basesoc_csr_bankarray_csrbank4_id1_w;
reg  basesoc_csr_bankarray_csrbank4_id0_re = 1'd0;
wire [31:0] basesoc_csr_bankarray_csrbank4_id0_r;
reg  basesoc_csr_bankarray_csrbank4_id0_we = 1'd0;
wire [31:0] basesoc_csr_bankarray_csrbank4_id0_w;
wire basesoc_csr_bankarray_csrbank4_sel;
wire [13:0] basesoc_csr_bankarray_sram_bus_adr;
wire basesoc_csr_bankarray_sram_bus_we;
wire [31:0] basesoc_csr_bankarray_sram_bus_dat_w;
reg  [31:0] basesoc_csr_bankarray_sram_bus_dat_r = 32'd0;
wire [5:0] basesoc_csr_bankarray_adr;
wire [7:0] basesoc_csr_bankarray_dat_r;
wire basesoc_csr_bankarray_sel;
reg  basesoc_csr_bankarray_sel_r = 1'd0;
wire [13:0] basesoc_csr_bankarray_interface5_bank_bus_adr;
wire basesoc_csr_bankarray_interface5_bank_bus_we;
wire [31:0] basesoc_csr_bankarray_interface5_bank_bus_dat_w;
reg  [31:0] basesoc_csr_bankarray_interface5_bank_bus_dat_r = 32'd0;
reg  basesoc_csr_bankarray_csrbank5_out0_re = 1'd0;
wire [15:0] basesoc_csr_bankarray_csrbank5_out0_r;
reg  basesoc_csr_bankarray_csrbank5_out0_we = 1'd0;
wire [15:0] basesoc_csr_bankarray_csrbank5_out0_w;
wire basesoc_csr_bankarray_csrbank5_sel;
wire [13:0] basesoc_csr_bankarray_interface6_bank_bus_adr;
wire basesoc_csr_bankarray_interface6_bank_bus_we;
wire [31:0] basesoc_csr_bankarray_interface6_bank_bus_dat_w;
reg  [31:0] basesoc_csr_bankarray_interface6_bank_bus_dat_r = 32'd0;
reg  basesoc_csr_bankarray_csrbank6_r_enable0_re = 1'd0;
wire basesoc_csr_bankarray_csrbank6_r_enable0_r;
reg  basesoc_csr_bankarray_csrbank6_r_enable0_we = 1'd0;
wire basesoc_csr_bankarray_csrbank6_r_enable0_w;
reg  basesoc_csr_bankarray_csrbank6_r_width0_re = 1'd0;
wire [31:0] basesoc_csr_bankarray_csrbank6_r_width0_r;
reg  basesoc_csr_bankarray_csrbank6_r_width0_we = 1'd0;
wire [31:0] basesoc_csr_bankarray_csrbank6_r_width0_w;
reg  basesoc_csr_bankarray_csrbank6_r_period0_re = 1'd0;
wire [31:0] basesoc_csr_bankarray_csrbank6_r_period0_r;
reg  basesoc_csr_bankarray_csrbank6_r_period0_we = 1'd0;
wire [31:0] basesoc_csr_bankarray_csrbank6_r_period0_w;
reg  basesoc_csr_bankarray_csrbank6_g_enable0_re = 1'd0;
wire basesoc_csr_bankarray_csrbank6_g_enable0_r;
reg  basesoc_csr_bankarray_csrbank6_g_enable0_we = 1'd0;
wire basesoc_csr_bankarray_csrbank6_g_enable0_w;
reg  basesoc_csr_bankarray_csrbank6_g_width0_re = 1'd0;
wire [31:0] basesoc_csr_bankarray_csrbank6_g_width0_r;
reg  basesoc_csr_bankarray_csrbank6_g_width0_we = 1'd0;
wire [31:0] basesoc_csr_bankarray_csrbank6_g_width0_w;
reg  basesoc_csr_bankarray_csrbank6_g_period0_re = 1'd0;
wire [31:0] basesoc_csr_bankarray_csrbank6_g_period0_r;
reg  basesoc_csr_bankarray_csrbank6_g_period0_we = 1'd0;
wire [31:0] basesoc_csr_bankarray_csrbank6_g_period0_w;
reg  basesoc_csr_bankarray_csrbank6_b_enable0_re = 1'd0;
wire basesoc_csr_bankarray_csrbank6_b_enable0_r;
reg  basesoc_csr_bankarray_csrbank6_b_enable0_we = 1'd0;
wire basesoc_csr_bankarray_csrbank6_b_enable0_w;
reg  basesoc_csr_bankarray_csrbank6_b_width0_re = 1'd0;
wire [31:0] basesoc_csr_bankarray_csrbank6_b_width0_r;
reg  basesoc_csr_bankarray_csrbank6_b_width0_we = 1'd0;
wire [31:0] basesoc_csr_bankarray_csrbank6_b_width0_w;
reg  basesoc_csr_bankarray_csrbank6_b_period0_re = 1'd0;
wire [31:0] basesoc_csr_bankarray_csrbank6_b_period0_r;
reg  basesoc_csr_bankarray_csrbank6_b_period0_we = 1'd0;
wire [31:0] basesoc_csr_bankarray_csrbank6_b_period0_w;
wire basesoc_csr_bankarray_csrbank6_sel;
wire [13:0] basesoc_csr_bankarray_interface7_bank_bus_adr;
wire basesoc_csr_bankarray_interface7_bank_bus_we;
wire [31:0] basesoc_csr_bankarray_interface7_bank_bus_dat_w;
reg  [31:0] basesoc_csr_bankarray_interface7_bank_bus_dat_r = 32'd0;
reg  basesoc_csr_bankarray_csrbank7_in_re = 1'd0;
wire [15:0] basesoc_csr_bankarray_csrbank7_in_r;
reg  basesoc_csr_bankarray_csrbank7_in_we = 1'd0;
wire [15:0] basesoc_csr_bankarray_csrbank7_in_w;
wire basesoc_csr_bankarray_csrbank7_sel;
wire [13:0] basesoc_csr_bankarray_interface8_bank_bus_adr;
wire basesoc_csr_bankarray_interface8_bank_bus_we;
wire [31:0] basesoc_csr_bankarray_interface8_bank_bus_dat_w;
reg  [31:0] basesoc_csr_bankarray_interface8_bank_bus_dat_r = 32'd0;
reg  basesoc_csr_bankarray_csrbank8_load0_re = 1'd0;
wire [31:0] basesoc_csr_bankarray_csrbank8_load0_r;
reg  basesoc_csr_bankarray_csrbank8_load0_we = 1'd0;
wire [31:0] basesoc_csr_bankarray_csrbank8_load0_w;
reg  basesoc_csr_bankarray_csrbank8_reload0_re = 1'd0;
wire [31:0] basesoc_csr_bankarray_csrbank8_reload0_r;
reg  basesoc_csr_bankarray_csrbank8_reload0_we = 1'd0;
wire [31:0] basesoc_csr_bankarray_csrbank8_reload0_w;
reg  basesoc_csr_bankarray_csrbank8_en0_re = 1'd0;
wire basesoc_csr_bankarray_csrbank8_en0_r;
reg  basesoc_csr_bankarray_csrbank8_en0_we = 1'd0;
wire basesoc_csr_bankarray_csrbank8_en0_w;
reg  basesoc_csr_bankarray_csrbank8_update_value0_re = 1'd0;
wire basesoc_csr_bankarray_csrbank8_update_value0_r;
reg  basesoc_csr_bankarray_csrbank8_update_value0_we = 1'd0;
wire basesoc_csr_bankarray_csrbank8_update_value0_w;
reg  basesoc_csr_bankarray_csrbank8_value_re = 1'd0;
wire [31:0] basesoc_csr_bankarray_csrbank8_value_r;
reg  basesoc_csr_bankarray_csrbank8_value_we = 1'd0;
wire [31:0] basesoc_csr_bankarray_csrbank8_value_w;
reg  basesoc_csr_bankarray_csrbank8_ev_status_re = 1'd0;
wire basesoc_csr_bankarray_csrbank8_ev_status_r;
reg  basesoc_csr_bankarray_csrbank8_ev_status_we = 1'd0;
wire basesoc_csr_bankarray_csrbank8_ev_status_w;
reg  basesoc_csr_bankarray_csrbank8_ev_pending_re = 1'd0;
wire basesoc_csr_bankarray_csrbank8_ev_pending_r;
reg  basesoc_csr_bankarray_csrbank8_ev_pending_we = 1'd0;
wire basesoc_csr_bankarray_csrbank8_ev_pending_w;
reg  basesoc_csr_bankarray_csrbank8_ev_enable0_re = 1'd0;
wire basesoc_csr_bankarray_csrbank8_ev_enable0_r;
reg  basesoc_csr_bankarray_csrbank8_ev_enable0_we = 1'd0;
wire basesoc_csr_bankarray_csrbank8_ev_enable0_w;
wire basesoc_csr_bankarray_csrbank8_sel;
wire [13:0] basesoc_csr_bankarray_interface9_bank_bus_adr;
wire basesoc_csr_bankarray_interface9_bank_bus_we;
wire [31:0] basesoc_csr_bankarray_interface9_bank_bus_dat_w;
reg  [31:0] basesoc_csr_bankarray_interface9_bank_bus_dat_r = 32'd0;
reg  basesoc_csr_bankarray_csrbank9_txfull_re = 1'd0;
wire basesoc_csr_bankarray_csrbank9_txfull_r;
reg  basesoc_csr_bankarray_csrbank9_txfull_we = 1'd0;
wire basesoc_csr_bankarray_csrbank9_txfull_w;
reg  basesoc_csr_bankarray_csrbank9_rxempty_re = 1'd0;
wire basesoc_csr_bankarray_csrbank9_rxempty_r;
reg  basesoc_csr_bankarray_csrbank9_rxempty_we = 1'd0;
wire basesoc_csr_bankarray_csrbank9_rxempty_w;
reg  basesoc_csr_bankarray_csrbank9_ev_status_re = 1'd0;
wire [1:0] basesoc_csr_bankarray_csrbank9_ev_status_r;
reg  basesoc_csr_bankarray_csrbank9_ev_status_we = 1'd0;
wire [1:0] basesoc_csr_bankarray_csrbank9_ev_status_w;
reg  basesoc_csr_bankarray_csrbank9_ev_pending_re = 1'd0;
wire [1:0] basesoc_csr_bankarray_csrbank9_ev_pending_r;
reg  basesoc_csr_bankarray_csrbank9_ev_pending_we = 1'd0;
wire [1:0] basesoc_csr_bankarray_csrbank9_ev_pending_w;
reg  basesoc_csr_bankarray_csrbank9_ev_enable0_re = 1'd0;
wire [1:0] basesoc_csr_bankarray_csrbank9_ev_enable0_r;
reg  basesoc_csr_bankarray_csrbank9_ev_enable0_we = 1'd0;
wire [1:0] basesoc_csr_bankarray_csrbank9_ev_enable0_w;
reg  basesoc_csr_bankarray_csrbank9_txempty_re = 1'd0;
wire basesoc_csr_bankarray_csrbank9_txempty_r;
reg  basesoc_csr_bankarray_csrbank9_txempty_we = 1'd0;
wire basesoc_csr_bankarray_csrbank9_txempty_w;
reg  basesoc_csr_bankarray_csrbank9_rxfull_re = 1'd0;
wire basesoc_csr_bankarray_csrbank9_rxfull_r;
reg  basesoc_csr_bankarray_csrbank9_rxfull_we = 1'd0;
wire basesoc_csr_bankarray_csrbank9_rxfull_w;
wire basesoc_csr_bankarray_csrbank9_sel;
wire [13:0] basesoc_csr_bankarray_interface10_bank_bus_adr;
wire basesoc_csr_bankarray_interface10_bank_bus_we;
wire [31:0] basesoc_csr_bankarray_interface10_bank_bus_dat_w;
reg  [31:0] basesoc_csr_bankarray_interface10_bank_bus_dat_r = 32'd0;
reg  basesoc_csr_bankarray_csrbank10_temperature_re = 1'd0;
wire [11:0] basesoc_csr_bankarray_csrbank10_temperature_r;
reg  basesoc_csr_bankarray_csrbank10_temperature_we = 1'd0;
wire [11:0] basesoc_csr_bankarray_csrbank10_temperature_w;
reg  basesoc_csr_bankarray_csrbank10_vccint_re = 1'd0;
wire [11:0] basesoc_csr_bankarray_csrbank10_vccint_r;
reg  basesoc_csr_bankarray_csrbank10_vccint_we = 1'd0;
wire [11:0] basesoc_csr_bankarray_csrbank10_vccint_w;
reg  basesoc_csr_bankarray_csrbank10_vccaux_re = 1'd0;
wire [11:0] basesoc_csr_bankarray_csrbank10_vccaux_r;
reg  basesoc_csr_bankarray_csrbank10_vccaux_we = 1'd0;
wire [11:0] basesoc_csr_bankarray_csrbank10_vccaux_w;
reg  basesoc_csr_bankarray_csrbank10_vccbram_re = 1'd0;
wire [11:0] basesoc_csr_bankarray_csrbank10_vccbram_r;
reg  basesoc_csr_bankarray_csrbank10_vccbram_we = 1'd0;
wire [11:0] basesoc_csr_bankarray_csrbank10_vccbram_w;
reg  basesoc_csr_bankarray_csrbank10_eoc_re = 1'd0;
wire basesoc_csr_bankarray_csrbank10_eoc_r;
reg  basesoc_csr_bankarray_csrbank10_eoc_we = 1'd0;
wire basesoc_csr_bankarray_csrbank10_eoc_w;
reg  basesoc_csr_bankarray_csrbank10_eos_re = 1'd0;
wire basesoc_csr_bankarray_csrbank10_eos_r;
reg  basesoc_csr_bankarray_csrbank10_eos_we = 1'd0;
wire basesoc_csr_bankarray_csrbank10_eos_w;
wire basesoc_csr_bankarray_csrbank10_sel;
wire [13:0] basesoc_csr_interconnect_adr;
wire basesoc_csr_interconnect_we;
wire [31:0] basesoc_csr_interconnect_dat_w;
wire [31:0] basesoc_csr_interconnect_dat_r;
reg  basesoc_state = 1'd0;
reg  basesoc_next_state = 1'd0;
reg  [29:0] comb_array_muxed0 = 30'd0;
reg  [31:0] comb_array_muxed1 = 32'd0;
reg  [3:0] comb_array_muxed2 = 4'd0;
reg  comb_array_muxed3 = 1'd0;
reg  comb_array_muxed4 = 1'd0;
reg  comb_array_muxed5 = 1'd0;
reg  [2:0] comb_array_muxed6 = 3'd0;
reg  [1:0] comb_array_muxed7 = 2'd0;
reg  sync_array_muxed = 1'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *) reg  xilinxmultiregimpl0_regs0 = 1'd0;
(* async_reg = "true", dont_touch = "true" *) reg  xilinxmultiregimpl0_regs1 = 1'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *) reg  [15:0] xilinxmultiregimpl1_regs0 = 16'd0;
(* async_reg = "true", dont_touch = "true" *) reg  [15:0] xilinxmultiregimpl1_regs1 = 16'd0;
wire xilinxmultiregimpl1;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *) reg  [4:0] xilinxmultiregimpl2_regs0 = 5'd0;
(* async_reg = "true", dont_touch = "true" *) reg  [4:0] xilinxmultiregimpl2_regs1 = 5'd0;
wire xilinxmultiregimpl2;

//------------------------------------------------------------------------------
// Combinatorial Logic
//------------------------------------------------------------------------------

assign reset = (soc_rst | cpu_rst);
assign display_cs_n = (~display_cs0);
assign display_abcdefg = (~display_abcdefg0);
assign bus_error = basesoc_error;
always @(*) begin
	interrupt <= 32'd0;
	interrupt[1] <= timer_irq;
	interrupt[0] <= uart_irq;
end
assign bus_errors_status = bus_errors;
assign adr = ram_bus_adr[12:0];
assign ram_bus_dat_r = dat_r;
always @(*) begin
	sram0_we <= 4'd0;
	sram0_we[0] <= (((interface0_ram_bus_cyc & interface0_ram_bus_stb) & interface0_ram_bus_we) & interface0_ram_bus_sel[0]);
	sram0_we[1] <= (((interface0_ram_bus_cyc & interface0_ram_bus_stb) & interface0_ram_bus_we) & interface0_ram_bus_sel[1]);
	sram0_we[2] <= (((interface0_ram_bus_cyc & interface0_ram_bus_stb) & interface0_ram_bus_we) & interface0_ram_bus_sel[2]);
	sram0_we[3] <= (((interface0_ram_bus_cyc & interface0_ram_bus_stb) & interface0_ram_bus_we) & interface0_ram_bus_sel[3]);
end
assign sram0_adr = interface0_ram_bus_adr[10:0];
assign interface0_ram_bus_dat_r = sram0_dat_r;
assign sram0_dat_w = interface0_ram_bus_dat_w;
always @(*) begin
	sram1_we <= 4'd0;
	sram1_we[0] <= (((interface1_ram_bus_cyc & interface1_ram_bus_stb) & interface1_ram_bus_we) & interface1_ram_bus_sel[0]);
	sram1_we[1] <= (((interface1_ram_bus_cyc & interface1_ram_bus_stb) & interface1_ram_bus_we) & interface1_ram_bus_sel[1]);
	sram1_we[2] <= (((interface1_ram_bus_cyc & interface1_ram_bus_stb) & interface1_ram_bus_we) & interface1_ram_bus_sel[2]);
	sram1_we[3] <= (((interface1_ram_bus_cyc & interface1_ram_bus_stb) & interface1_ram_bus_we) & interface1_ram_bus_sel[3]);
end
assign sram1_adr = interface1_ram_bus_adr[11:0];
assign interface1_ram_bus_dat_r = sram1_dat_r;
assign sram1_dat_w = interface1_ram_bus_dat_w;
always @(*) begin
	tx_sink_ready <= 1'd0;
	subfragments_rs232phytx_next_state <= 1'd0;
	tx_count_rs232phytx_next_value0 <= 4'd0;
	tx_count_rs232phytx_next_value_ce0 <= 1'd0;
	serial_tx_rs232phytx_next_value1 <= 1'd0;
	serial_tx_rs232phytx_next_value_ce1 <= 1'd0;
	tx_enable <= 1'd0;
	tx_data_rs232phytx_next_value2 <= 8'd0;
	tx_data_rs232phytx_next_value_ce2 <= 1'd0;
	subfragments_rs232phytx_next_state <= subfragments_rs232phytx_state;
	case (subfragments_rs232phytx_state)
		1'd1: begin
			tx_enable <= 1'd1;
			if (tx_tick) begin
				serial_tx_rs232phytx_next_value1 <= tx_data;
				serial_tx_rs232phytx_next_value_ce1 <= 1'd1;
				tx_count_rs232phytx_next_value0 <= (tx_count + 1'd1);
				tx_count_rs232phytx_next_value_ce0 <= 1'd1;
				tx_data_rs232phytx_next_value2 <= {1'd1, tx_data[7:1]};
				tx_data_rs232phytx_next_value_ce2 <= 1'd1;
				if ((tx_count == 4'd9)) begin
					tx_sink_ready <= 1'd1;
					subfragments_rs232phytx_next_state <= 1'd0;
				end
			end
		end
		default: begin
			tx_count_rs232phytx_next_value0 <= 1'd0;
			tx_count_rs232phytx_next_value_ce0 <= 1'd1;
			serial_tx_rs232phytx_next_value1 <= 1'd1;
			serial_tx_rs232phytx_next_value_ce1 <= 1'd1;
			if (tx_sink_valid) begin
				serial_tx_rs232phytx_next_value1 <= 1'd0;
				serial_tx_rs232phytx_next_value_ce1 <= 1'd1;
				tx_data_rs232phytx_next_value2 <= tx_sink_payload_data;
				tx_data_rs232phytx_next_value_ce2 <= 1'd1;
				subfragments_rs232phytx_next_state <= 1'd1;
			end
		end
	endcase
end
always @(*) begin
	rx_source_valid <= 1'd0;
	subfragments_rs232phyrx_next_state <= 1'd0;
	rx_count_rs232phyrx_next_value0 <= 4'd0;
	rx_count_rs232phyrx_next_value_ce0 <= 1'd0;
	rx_source_payload_data <= 8'd0;
	rx_enable <= 1'd0;
	rx_data_rs232phyrx_next_value1 <= 8'd0;
	rx_data_rs232phyrx_next_value_ce1 <= 1'd0;
	subfragments_rs232phyrx_next_state <= subfragments_rs232phyrx_state;
	case (subfragments_rs232phyrx_state)
		1'd1: begin
			rx_enable <= 1'd1;
			if (rx_tick) begin
				rx_count_rs232phyrx_next_value0 <= (rx_count + 1'd1);
				rx_count_rs232phyrx_next_value_ce0 <= 1'd1;
				rx_data_rs232phyrx_next_value1 <= {rx_rx, rx_data[7:1]};
				rx_data_rs232phyrx_next_value_ce1 <= 1'd1;
				if ((rx_count == 4'd9)) begin
					rx_source_valid <= (rx_rx == 1'd1);
					rx_source_payload_data <= rx_data;
					subfragments_rs232phyrx_next_state <= 1'd0;
				end
			end
		end
		default: begin
			rx_count_rs232phyrx_next_value0 <= 1'd0;
			rx_count_rs232phyrx_next_value_ce0 <= 1'd1;
			if (((rx_rx == 1'd0) & (rx_rx_d == 1'd1))) begin
				subfragments_rs232phyrx_next_state <= 1'd1;
			end
		end
	endcase
end
assign uart_uart_sink_valid = rx_source_valid;
assign rx_source_ready = uart_uart_sink_ready;
assign uart_uart_sink_first = rx_source_first;
assign uart_uart_sink_last = rx_source_last;
assign uart_uart_sink_payload_data = rx_source_payload_data;
assign tx_sink_valid = uart_uart_source_valid;
assign uart_uart_source_ready = tx_sink_ready;
assign tx_sink_first = uart_uart_source_first;
assign tx_sink_last = uart_uart_source_last;
assign tx_sink_payload_data = uart_uart_source_payload_data;
assign uart_tx_fifo_sink_valid = uart_rxtx_re;
assign uart_tx_fifo_sink_payload_data = uart_rxtx_r;
assign uart_uart_source_valid = uart_tx_fifo_source_valid;
assign uart_tx_fifo_source_ready = uart_uart_source_ready;
assign uart_uart_source_first = uart_tx_fifo_source_first;
assign uart_uart_source_last = uart_tx_fifo_source_last;
assign uart_uart_source_payload_data = uart_tx_fifo_source_payload_data;
assign uart_txfull_status = (~uart_tx_fifo_sink_ready);
assign uart_txempty_status = (~uart_tx_fifo_source_valid);
assign uart_tx_trigger = uart_tx_fifo_sink_ready;
assign uart_rx_fifo_sink_valid = uart_uart_sink_valid;
assign uart_uart_sink_ready = uart_rx_fifo_sink_ready;
assign uart_rx_fifo_sink_first = uart_uart_sink_first;
assign uart_rx_fifo_sink_last = uart_uart_sink_last;
assign uart_rx_fifo_sink_payload_data = uart_uart_sink_payload_data;
assign uart_rxtx_w = uart_rx_fifo_source_payload_data;
assign uart_rx_fifo_source_ready = (uart_rx_clear | (1'd0 & uart_rxtx_we));
assign uart_rxempty_status = (~uart_rx_fifo_source_valid);
assign uart_rxfull_status = (~uart_rx_fifo_sink_ready);
assign uart_rx_trigger = uart_rx_fifo_source_valid;
assign uart_tx0 = uart_tx_status;
assign uart_tx1 = uart_tx_pending;
always @(*) begin
	uart_tx_clear <= 1'd0;
	if ((uart_pending_re & uart_pending_r[0])) begin
		uart_tx_clear <= 1'd1;
	end
end
assign uart_rx0 = uart_rx_status;
assign uart_rx1 = uart_rx_pending;
always @(*) begin
	uart_rx_clear <= 1'd0;
	if ((uart_pending_re & uart_pending_r[1])) begin
		uart_rx_clear <= 1'd1;
	end
end
assign uart_irq = ((uart_pending_status[0] & uart_enable_storage[0]) | (uart_pending_status[1] & uart_enable_storage[1]));
assign uart_tx_status = uart_tx_trigger;
assign uart_rx_status = uart_rx_trigger;
assign uart_tx_fifo_syncfifo_din = {uart_tx_fifo_fifo_in_last, uart_tx_fifo_fifo_in_first, uart_tx_fifo_fifo_in_payload_data};
assign {uart_tx_fifo_fifo_out_last, uart_tx_fifo_fifo_out_first, uart_tx_fifo_fifo_out_payload_data} = uart_tx_fifo_syncfifo_dout;
assign uart_tx_fifo_sink_ready = uart_tx_fifo_syncfifo_writable;
assign uart_tx_fifo_syncfifo_we = uart_tx_fifo_sink_valid;
assign uart_tx_fifo_fifo_in_first = uart_tx_fifo_sink_first;
assign uart_tx_fifo_fifo_in_last = uart_tx_fifo_sink_last;
assign uart_tx_fifo_fifo_in_payload_data = uart_tx_fifo_sink_payload_data;
assign uart_tx_fifo_source_valid = uart_tx_fifo_readable;
assign uart_tx_fifo_source_first = uart_tx_fifo_fifo_out_first;
assign uart_tx_fifo_source_last = uart_tx_fifo_fifo_out_last;
assign uart_tx_fifo_source_payload_data = uart_tx_fifo_fifo_out_payload_data;
assign uart_tx_fifo_re = uart_tx_fifo_source_ready;
assign uart_tx_fifo_syncfifo_re = (uart_tx_fifo_syncfifo_readable & ((~uart_tx_fifo_readable) | uart_tx_fifo_re));
assign uart_tx_fifo_level1 = (uart_tx_fifo_level0 + uart_tx_fifo_readable);
always @(*) begin
	uart_tx_fifo_wrport_adr <= 4'd0;
	if (uart_tx_fifo_replace) begin
		uart_tx_fifo_wrport_adr <= (uart_tx_fifo_produce - 1'd1);
	end else begin
		uart_tx_fifo_wrport_adr <= uart_tx_fifo_produce;
	end
end
assign uart_tx_fifo_wrport_dat_w = uart_tx_fifo_syncfifo_din;
assign uart_tx_fifo_wrport_we = (uart_tx_fifo_syncfifo_we & (uart_tx_fifo_syncfifo_writable | uart_tx_fifo_replace));
assign uart_tx_fifo_do_read = (uart_tx_fifo_syncfifo_readable & uart_tx_fifo_syncfifo_re);
assign uart_tx_fifo_rdport_adr = uart_tx_fifo_consume;
assign uart_tx_fifo_syncfifo_dout = uart_tx_fifo_rdport_dat_r;
assign uart_tx_fifo_rdport_re = uart_tx_fifo_do_read;
assign uart_tx_fifo_syncfifo_writable = (uart_tx_fifo_level0 != 5'd16);
assign uart_tx_fifo_syncfifo_readable = (uart_tx_fifo_level0 != 1'd0);
assign uart_rx_fifo_syncfifo_din = {uart_rx_fifo_fifo_in_last, uart_rx_fifo_fifo_in_first, uart_rx_fifo_fifo_in_payload_data};
assign {uart_rx_fifo_fifo_out_last, uart_rx_fifo_fifo_out_first, uart_rx_fifo_fifo_out_payload_data} = uart_rx_fifo_syncfifo_dout;
assign uart_rx_fifo_sink_ready = uart_rx_fifo_syncfifo_writable;
assign uart_rx_fifo_syncfifo_we = uart_rx_fifo_sink_valid;
assign uart_rx_fifo_fifo_in_first = uart_rx_fifo_sink_first;
assign uart_rx_fifo_fifo_in_last = uart_rx_fifo_sink_last;
assign uart_rx_fifo_fifo_in_payload_data = uart_rx_fifo_sink_payload_data;
assign uart_rx_fifo_source_valid = uart_rx_fifo_readable;
assign uart_rx_fifo_source_first = uart_rx_fifo_fifo_out_first;
assign uart_rx_fifo_source_last = uart_rx_fifo_fifo_out_last;
assign uart_rx_fifo_source_payload_data = uart_rx_fifo_fifo_out_payload_data;
assign uart_rx_fifo_re = uart_rx_fifo_source_ready;
assign uart_rx_fifo_syncfifo_re = (uart_rx_fifo_syncfifo_readable & ((~uart_rx_fifo_readable) | uart_rx_fifo_re));
assign uart_rx_fifo_level1 = (uart_rx_fifo_level0 + uart_rx_fifo_readable);
always @(*) begin
	uart_rx_fifo_wrport_adr <= 4'd0;
	if (uart_rx_fifo_replace) begin
		uart_rx_fifo_wrport_adr <= (uart_rx_fifo_produce - 1'd1);
	end else begin
		uart_rx_fifo_wrport_adr <= uart_rx_fifo_produce;
	end
end
assign uart_rx_fifo_wrport_dat_w = uart_rx_fifo_syncfifo_din;
assign uart_rx_fifo_wrport_we = (uart_rx_fifo_syncfifo_we & (uart_rx_fifo_syncfifo_writable | uart_rx_fifo_replace));
assign uart_rx_fifo_do_read = (uart_rx_fifo_syncfifo_readable & uart_rx_fifo_syncfifo_re);
assign uart_rx_fifo_rdport_adr = uart_rx_fifo_consume;
assign uart_rx_fifo_syncfifo_dout = uart_rx_fifo_rdport_dat_r;
assign uart_rx_fifo_rdport_re = uart_rx_fifo_do_read;
assign uart_rx_fifo_syncfifo_writable = (uart_rx_fifo_level0 != 5'd16);
assign uart_rx_fifo_syncfifo_readable = (uart_rx_fifo_level0 != 1'd0);
assign timer_zero_trigger = (timer_value == 1'd0);
assign timer_zero0 = timer_zero_status;
assign timer_zero1 = timer_zero_pending;
always @(*) begin
	timer_zero_clear <= 1'd0;
	if ((timer_pending_re & timer_pending_r)) begin
		timer_zero_clear <= 1'd1;
	end
end
assign timer_irq = (timer_pending_status & timer_enable_storage);
assign timer_zero_status = timer_zero_trigger;
assign sys_clk = clk100;
assign por_clk = clk100;
assign sys_rst = int_rst;
assign dna_clk = dna_count[0];
always @(*) begin
	xadc_dadr <= 7'd0;
	xadc_den <= 1'd0;
	if ((~xadc_drp_en)) begin
		xadc_den <= xadc_eoc;
		xadc_dadr <= xadc_channel;
	end
end
assign {user_led15, user_led14, user_led13, user_led12, user_led11, user_led10, user_led9, user_led8, user_led7, user_led6, user_led5, user_led4, user_led3, user_led2, user_led1, user_led0} = leds_storage;
assign r_enable = r_enable_storage;
assign r_width = r_width_storage;
assign r_period = r_period_storage;
assign g_enable = g_enable_storage;
assign g_width = g_width_storage;
assign g_period = g_period_storage;
assign b_enable = b_enable_storage;
assign b_width = b_width_storage;
assign b_period = b_period_storage;
assign adxl362_start0 = adxl362_start1;
assign adxl362_length0 = adxl362_length1;
assign adxl362_done1 = adxl362_done0;
assign adxl362_mosi = adxl362_mosi_storage;
assign adxl362_miso_status = adxl362_miso;
assign adxl362_cs = adxl362_sel;
assign adxl362_cs_mode = adxl362_mode0;
assign adxl362_loopback = adxl362_mode1;
assign adxl362_clk_rise = (adxl362_clk_divider1 == (adxl362_clk_divider0[15:1] - 1'd1));
assign adxl362_clk_fall = (adxl362_clk_divider1 == (adxl362_clk_divider0 - 1'd1));
always @(*) begin
	subfragments_next_state <= 2'd0;
	adxl362_count_next_value <= 5'd0;
	adxl362_done0 <= 1'd0;
	adxl362_count_next_value_ce <= 1'd0;
	adxl362_irq <= 1'd0;
	adxl362_clk_enable <= 1'd0;
	adxl362_xfer_enable <= 1'd0;
	adxl362_mosi_latch <= 1'd0;
	adxl362_miso_latch <= 1'd0;
	subfragments_next_state <= subfragments_state;
	case (subfragments_state)
		1'd1: begin
			adxl362_count_next_value <= 1'd0;
			adxl362_count_next_value_ce <= 1'd1;
			if (adxl362_clk_fall) begin
				adxl362_xfer_enable <= 1'd1;
				subfragments_next_state <= 2'd2;
			end
		end
		2'd2: begin
			adxl362_clk_enable <= 1'd1;
			adxl362_xfer_enable <= 1'd1;
			if (adxl362_clk_fall) begin
				adxl362_count_next_value <= (adxl362_count + 1'd1);
				adxl362_count_next_value_ce <= 1'd1;
				if ((adxl362_count == (adxl362_length0 - 1'd1))) begin
					subfragments_next_state <= 2'd3;
				end
			end
		end
		2'd3: begin
			adxl362_xfer_enable <= 1'd1;
			if (adxl362_clk_rise) begin
				adxl362_miso_latch <= 1'd1;
				adxl362_irq <= 1'd1;
				subfragments_next_state <= 1'd0;
			end
		end
		default: begin
			adxl362_done0 <= 1'd1;
			if (adxl362_start0) begin
				adxl362_done0 <= 1'd0;
				adxl362_mosi_latch <= 1'd1;
				subfragments_next_state <= 1'd1;
			end
		end
	endcase
end
assign display_cs0 = display_cs1;
assign display_abcdefg0 = display_abcdefg1;
assign display_abcdefg1 = display_abcdefg2;
assign display_cs1 = display_cs2;
always @(*) begin
	display_value <= 4'd0;
	case (display_cs1)
		1'd1: begin
			display_value <= display_values0;
		end
		2'd2: begin
			display_value <= display_values1;
		end
		3'd4: begin
			display_value <= display_values2;
		end
		4'd8: begin
			display_value <= display_values3;
		end
		5'd16: begin
			display_value <= display_values4;
		end
		6'd32: begin
			display_value <= display_values5;
		end
	endcase
end
always @(*) begin
	display_abcdefg2 <= 7'd0;
	case (display_value)
		1'd0: begin
			display_abcdefg2 <= 6'd63;
		end
		1'd1: begin
			display_abcdefg2 <= 3'd6;
		end
		2'd2: begin
			display_abcdefg2 <= 7'd91;
		end
		2'd3: begin
			display_abcdefg2 <= 7'd79;
		end
		3'd4: begin
			display_abcdefg2 <= 7'd102;
		end
		3'd5: begin
			display_abcdefg2 <= 7'd109;
		end
		3'd6: begin
			display_abcdefg2 <= 7'd125;
		end
		3'd7: begin
			display_abcdefg2 <= 3'd7;
		end
		4'd8: begin
			display_abcdefg2 <= 7'd127;
		end
		4'd9: begin
			display_abcdefg2 <= 7'd111;
		end
		4'd10: begin
			display_abcdefg2 <= 7'd119;
		end
		4'd11: begin
			display_abcdefg2 <= 7'd124;
		end
		4'd12: begin
			display_abcdefg2 <= 6'd57;
		end
		4'd13: begin
			display_abcdefg2 <= 7'd94;
		end
		4'd14: begin
			display_abcdefg2 <= 7'd121;
		end
		4'd15: begin
			display_abcdefg2 <= 7'd113;
		end
	endcase
end
assign display_ce = (display_counter == 1'd0);
always @(*) begin
	basesoc_basesoc_we <= 1'd0;
	basesoc_basesoc_dat_w <= 32'd0;
	basesoc_basesoc_wishbone_ack <= 1'd0;
	basesoc_next_state <= 1'd0;
	basesoc_basesoc_wishbone_dat_r <= 32'd0;
	basesoc_basesoc_adr <= 14'd0;
	basesoc_next_state <= basesoc_state;
	case (basesoc_state)
		1'd1: begin
			basesoc_basesoc_wishbone_ack <= 1'd1;
			basesoc_basesoc_wishbone_dat_r <= basesoc_basesoc_dat_r;
			basesoc_next_state <= 1'd0;
		end
		default: begin
			basesoc_basesoc_dat_w <= basesoc_basesoc_wishbone_dat_w;
			if ((basesoc_basesoc_wishbone_cyc & basesoc_basesoc_wishbone_stb)) begin
				basesoc_basesoc_adr <= basesoc_basesoc_wishbone_adr;
				basesoc_basesoc_we <= (basesoc_basesoc_wishbone_we & (basesoc_basesoc_wishbone_sel != 1'd0));
				basesoc_next_state <= 1'd1;
			end
		end
	endcase
end
assign basesoc_shared_adr = comb_array_muxed0;
assign basesoc_shared_dat_w = comb_array_muxed1;
assign basesoc_shared_sel = comb_array_muxed2;
assign basesoc_shared_cyc = comb_array_muxed3;
assign basesoc_shared_stb = comb_array_muxed4;
assign basesoc_shared_we = comb_array_muxed5;
assign basesoc_shared_cti = comb_array_muxed6;
assign basesoc_shared_bte = comb_array_muxed7;
assign ibus_dat_r = basesoc_shared_dat_r;
assign dbus_dat_r = basesoc_shared_dat_r;
assign ibus_ack = (basesoc_shared_ack & (basesoc_grant == 1'd0));
assign dbus_ack = (basesoc_shared_ack & (basesoc_grant == 1'd1));
assign ibus_err = (basesoc_shared_err & (basesoc_grant == 1'd0));
assign dbus_err = (basesoc_shared_err & (basesoc_grant == 1'd1));
assign basesoc_request = {dbus_cyc, ibus_cyc};
always @(*) begin
	basesoc_slave_sel <= 4'd0;
	basesoc_slave_sel[0] <= (basesoc_shared_adr[29:13] == 1'd0);
	basesoc_slave_sel[1] <= (basesoc_shared_adr[29:11] == 16'd32768);
	basesoc_slave_sel[2] <= (basesoc_shared_adr[29:12] == 17'd65536);
	basesoc_slave_sel[3] <= (basesoc_shared_adr[29:14] == 16'd61440);
end
assign ram_bus_adr = basesoc_shared_adr;
assign ram_bus_dat_w = basesoc_shared_dat_w;
assign ram_bus_sel = basesoc_shared_sel;
assign ram_bus_stb = basesoc_shared_stb;
assign ram_bus_we = basesoc_shared_we;
assign ram_bus_cti = basesoc_shared_cti;
assign ram_bus_bte = basesoc_shared_bte;
assign interface0_ram_bus_adr = basesoc_shared_adr;
assign interface0_ram_bus_dat_w = basesoc_shared_dat_w;
assign interface0_ram_bus_sel = basesoc_shared_sel;
assign interface0_ram_bus_stb = basesoc_shared_stb;
assign interface0_ram_bus_we = basesoc_shared_we;
assign interface0_ram_bus_cti = basesoc_shared_cti;
assign interface0_ram_bus_bte = basesoc_shared_bte;
assign interface1_ram_bus_adr = basesoc_shared_adr;
assign interface1_ram_bus_dat_w = basesoc_shared_dat_w;
assign interface1_ram_bus_sel = basesoc_shared_sel;
assign interface1_ram_bus_stb = basesoc_shared_stb;
assign interface1_ram_bus_we = basesoc_shared_we;
assign interface1_ram_bus_cti = basesoc_shared_cti;
assign interface1_ram_bus_bte = basesoc_shared_bte;
assign basesoc_basesoc_wishbone_adr = basesoc_shared_adr;
assign basesoc_basesoc_wishbone_dat_w = basesoc_shared_dat_w;
assign basesoc_basesoc_wishbone_sel = basesoc_shared_sel;
assign basesoc_basesoc_wishbone_stb = basesoc_shared_stb;
assign basesoc_basesoc_wishbone_we = basesoc_shared_we;
assign basesoc_basesoc_wishbone_cti = basesoc_shared_cti;
assign basesoc_basesoc_wishbone_bte = basesoc_shared_bte;
assign ram_bus_cyc = (basesoc_shared_cyc & basesoc_slave_sel[0]);
assign interface0_ram_bus_cyc = (basesoc_shared_cyc & basesoc_slave_sel[1]);
assign interface1_ram_bus_cyc = (basesoc_shared_cyc & basesoc_slave_sel[2]);
assign basesoc_basesoc_wishbone_cyc = (basesoc_shared_cyc & basesoc_slave_sel[3]);
assign basesoc_shared_err = (((ram_bus_err | interface0_ram_bus_err) | interface1_ram_bus_err) | basesoc_basesoc_wishbone_err);
assign basesoc_wait = ((basesoc_shared_stb & basesoc_shared_cyc) & (~basesoc_shared_ack));
always @(*) begin
	basesoc_error <= 1'd0;
	basesoc_shared_ack <= 1'd0;
	basesoc_shared_dat_r <= 32'd0;
	basesoc_shared_ack <= (((ram_bus_ack | interface0_ram_bus_ack) | interface1_ram_bus_ack) | basesoc_basesoc_wishbone_ack);
	basesoc_shared_dat_r <= (((({32{basesoc_slave_sel_r[0]}} & ram_bus_dat_r) | ({32{basesoc_slave_sel_r[1]}} & interface0_ram_bus_dat_r)) | ({32{basesoc_slave_sel_r[2]}} & interface1_ram_bus_dat_r)) | ({32{basesoc_slave_sel_r[3]}} & basesoc_basesoc_wishbone_dat_r));
	if (basesoc_done) begin
		basesoc_shared_dat_r <= 32'd4294967295;
		basesoc_shared_ack <= 1'd1;
		basesoc_error <= 1'd1;
	end
end
assign basesoc_done = (basesoc_count == 1'd0);
assign basesoc_csr_bankarray_csrbank0_sel = (basesoc_csr_bankarray_interface0_bank_bus_adr[13:9] == 3'd6);
assign basesoc_csr_bankarray_csrbank0_control0_r = basesoc_csr_bankarray_interface0_bank_bus_dat_w[15:0];
always @(*) begin
	basesoc_csr_bankarray_csrbank0_control0_we <= 1'd0;
	basesoc_csr_bankarray_csrbank0_control0_re <= 1'd0;
	if ((basesoc_csr_bankarray_csrbank0_sel & (basesoc_csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd0))) begin
		basesoc_csr_bankarray_csrbank0_control0_re <= basesoc_csr_bankarray_interface0_bank_bus_we;
		basesoc_csr_bankarray_csrbank0_control0_we <= (~basesoc_csr_bankarray_interface0_bank_bus_we);
	end
end
assign basesoc_csr_bankarray_csrbank0_status_r = basesoc_csr_bankarray_interface0_bank_bus_dat_w[0];
always @(*) begin
	basesoc_csr_bankarray_csrbank0_status_re <= 1'd0;
	basesoc_csr_bankarray_csrbank0_status_we <= 1'd0;
	if ((basesoc_csr_bankarray_csrbank0_sel & (basesoc_csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd1))) begin
		basesoc_csr_bankarray_csrbank0_status_re <= basesoc_csr_bankarray_interface0_bank_bus_we;
		basesoc_csr_bankarray_csrbank0_status_we <= (~basesoc_csr_bankarray_interface0_bank_bus_we);
	end
end
assign basesoc_csr_bankarray_csrbank0_mosi0_r = basesoc_csr_bankarray_interface0_bank_bus_dat_w[31:0];
always @(*) begin
	basesoc_csr_bankarray_csrbank0_mosi0_we <= 1'd0;
	basesoc_csr_bankarray_csrbank0_mosi0_re <= 1'd0;
	if ((basesoc_csr_bankarray_csrbank0_sel & (basesoc_csr_bankarray_interface0_bank_bus_adr[8:0] == 2'd2))) begin
		basesoc_csr_bankarray_csrbank0_mosi0_re <= basesoc_csr_bankarray_interface0_bank_bus_we;
		basesoc_csr_bankarray_csrbank0_mosi0_we <= (~basesoc_csr_bankarray_interface0_bank_bus_we);
	end
end
assign basesoc_csr_bankarray_csrbank0_miso_r = basesoc_csr_bankarray_interface0_bank_bus_dat_w[31:0];
always @(*) begin
	basesoc_csr_bankarray_csrbank0_miso_we <= 1'd0;
	basesoc_csr_bankarray_csrbank0_miso_re <= 1'd0;
	if ((basesoc_csr_bankarray_csrbank0_sel & (basesoc_csr_bankarray_interface0_bank_bus_adr[8:0] == 2'd3))) begin
		basesoc_csr_bankarray_csrbank0_miso_re <= basesoc_csr_bankarray_interface0_bank_bus_we;
		basesoc_csr_bankarray_csrbank0_miso_we <= (~basesoc_csr_bankarray_interface0_bank_bus_we);
	end
end
assign basesoc_csr_bankarray_csrbank0_cs0_r = basesoc_csr_bankarray_interface0_bank_bus_dat_w[16:0];
always @(*) begin
	basesoc_csr_bankarray_csrbank0_cs0_re <= 1'd0;
	basesoc_csr_bankarray_csrbank0_cs0_we <= 1'd0;
	if ((basesoc_csr_bankarray_csrbank0_sel & (basesoc_csr_bankarray_interface0_bank_bus_adr[8:0] == 3'd4))) begin
		basesoc_csr_bankarray_csrbank0_cs0_re <= basesoc_csr_bankarray_interface0_bank_bus_we;
		basesoc_csr_bankarray_csrbank0_cs0_we <= (~basesoc_csr_bankarray_interface0_bank_bus_we);
	end
end
assign basesoc_csr_bankarray_csrbank0_loopback0_r = basesoc_csr_bankarray_interface0_bank_bus_dat_w[0];
always @(*) begin
	basesoc_csr_bankarray_csrbank0_loopback0_we <= 1'd0;
	basesoc_csr_bankarray_csrbank0_loopback0_re <= 1'd0;
	if ((basesoc_csr_bankarray_csrbank0_sel & (basesoc_csr_bankarray_interface0_bank_bus_adr[8:0] == 3'd5))) begin
		basesoc_csr_bankarray_csrbank0_loopback0_re <= basesoc_csr_bankarray_interface0_bank_bus_we;
		basesoc_csr_bankarray_csrbank0_loopback0_we <= (~basesoc_csr_bankarray_interface0_bank_bus_we);
	end
end
always @(*) begin
	adxl362_start1 <= 1'd0;
	if (adxl362_control_re) begin
		adxl362_start1 <= adxl362_control_storage[0];
	end
end
assign adxl362_length1 = adxl362_control_storage[15:8];
assign basesoc_csr_bankarray_csrbank0_control0_w = adxl362_control_storage[15:0];
assign adxl362_status_status = adxl362_done1;
assign basesoc_csr_bankarray_csrbank0_status_w = adxl362_status_status;
assign adxl362_status_we = basesoc_csr_bankarray_csrbank0_status_we;
assign basesoc_csr_bankarray_csrbank0_mosi0_w = adxl362_mosi_storage[31:0];
assign basesoc_csr_bankarray_csrbank0_miso_w = adxl362_miso_status[31:0];
assign adxl362_miso_we = basesoc_csr_bankarray_csrbank0_miso_we;
assign adxl362_sel = adxl362_cs_storage[0];
assign adxl362_mode0 = adxl362_cs_storage[16];
assign basesoc_csr_bankarray_csrbank0_cs0_w = adxl362_cs_storage[16:0];
assign adxl362_mode1 = adxl362_loopback_storage;
assign basesoc_csr_bankarray_csrbank0_loopback0_w = adxl362_loopback_storage;
assign basesoc_csr_bankarray_csrbank1_sel = (basesoc_csr_bankarray_interface1_bank_bus_adr[13:9] == 3'd4);
assign basesoc_csr_bankarray_csrbank1_in_r = basesoc_csr_bankarray_interface1_bank_bus_dat_w[4:0];
always @(*) begin
	basesoc_csr_bankarray_csrbank1_in_re <= 1'd0;
	basesoc_csr_bankarray_csrbank1_in_we <= 1'd0;
	if ((basesoc_csr_bankarray_csrbank1_sel & (basesoc_csr_bankarray_interface1_bank_bus_adr[8:0] == 1'd0))) begin
		basesoc_csr_bankarray_csrbank1_in_re <= basesoc_csr_bankarray_interface1_bank_bus_we;
		basesoc_csr_bankarray_csrbank1_in_we <= (~basesoc_csr_bankarray_interface1_bank_bus_we);
	end
end
assign basesoc_csr_bankarray_csrbank1_in_w = buttons_status[4:0];
assign buttons_we = basesoc_csr_bankarray_csrbank1_in_we;
assign basesoc_csr_bankarray_csrbank2_sel = (basesoc_csr_bankarray_interface2_bank_bus_adr[13:9] == 4'd8);
assign basesoc_csr_bankarray_csrbank2_reset0_r = basesoc_csr_bankarray_interface2_bank_bus_dat_w[1:0];
always @(*) begin
	basesoc_csr_bankarray_csrbank2_reset0_re <= 1'd0;
	basesoc_csr_bankarray_csrbank2_reset0_we <= 1'd0;
	if ((basesoc_csr_bankarray_csrbank2_sel & (basesoc_csr_bankarray_interface2_bank_bus_adr[8:0] == 1'd0))) begin
		basesoc_csr_bankarray_csrbank2_reset0_re <= basesoc_csr_bankarray_interface2_bank_bus_we;
		basesoc_csr_bankarray_csrbank2_reset0_we <= (~basesoc_csr_bankarray_interface2_bank_bus_we);
	end
end
assign basesoc_csr_bankarray_csrbank2_scratch0_r = basesoc_csr_bankarray_interface2_bank_bus_dat_w[31:0];
always @(*) begin
	basesoc_csr_bankarray_csrbank2_scratch0_re <= 1'd0;
	basesoc_csr_bankarray_csrbank2_scratch0_we <= 1'd0;
	if ((basesoc_csr_bankarray_csrbank2_sel & (basesoc_csr_bankarray_interface2_bank_bus_adr[8:0] == 1'd1))) begin
		basesoc_csr_bankarray_csrbank2_scratch0_re <= basesoc_csr_bankarray_interface2_bank_bus_we;
		basesoc_csr_bankarray_csrbank2_scratch0_we <= (~basesoc_csr_bankarray_interface2_bank_bus_we);
	end
end
assign basesoc_csr_bankarray_csrbank2_bus_errors_r = basesoc_csr_bankarray_interface2_bank_bus_dat_w[31:0];
always @(*) begin
	basesoc_csr_bankarray_csrbank2_bus_errors_we <= 1'd0;
	basesoc_csr_bankarray_csrbank2_bus_errors_re <= 1'd0;
	if ((basesoc_csr_bankarray_csrbank2_sel & (basesoc_csr_bankarray_interface2_bank_bus_adr[8:0] == 2'd2))) begin
		basesoc_csr_bankarray_csrbank2_bus_errors_re <= basesoc_csr_bankarray_interface2_bank_bus_we;
		basesoc_csr_bankarray_csrbank2_bus_errors_we <= (~basesoc_csr_bankarray_interface2_bank_bus_we);
	end
end
always @(*) begin
	soc_rst <= 1'd0;
	if (reset_re) begin
		soc_rst <= reset_storage[0];
	end
end
assign cpu_rst = reset_storage[1];
assign basesoc_csr_bankarray_csrbank2_reset0_w = reset_storage[1:0];
assign basesoc_csr_bankarray_csrbank2_scratch0_w = scratch_storage[31:0];
assign basesoc_csr_bankarray_csrbank2_bus_errors_w = bus_errors_status[31:0];
assign bus_errors_we = basesoc_csr_bankarray_csrbank2_bus_errors_we;
assign basesoc_csr_bankarray_csrbank3_sel = (basesoc_csr_bankarray_interface3_bank_bus_adr[13:9] == 3'd7);
assign basesoc_csr_bankarray_csrbank3_sel0_r = basesoc_csr_bankarray_interface3_bank_bus_dat_w[3:0];
always @(*) begin
	basesoc_csr_bankarray_csrbank3_sel0_we <= 1'd0;
	basesoc_csr_bankarray_csrbank3_sel0_re <= 1'd0;
	if ((basesoc_csr_bankarray_csrbank3_sel & (basesoc_csr_bankarray_interface3_bank_bus_adr[8:0] == 1'd0))) begin
		basesoc_csr_bankarray_csrbank3_sel0_re <= basesoc_csr_bankarray_interface3_bank_bus_we;
		basesoc_csr_bankarray_csrbank3_sel0_we <= (~basesoc_csr_bankarray_interface3_bank_bus_we);
	end
end
assign basesoc_csr_bankarray_csrbank3_value0_r = basesoc_csr_bankarray_interface3_bank_bus_dat_w[3:0];
always @(*) begin
	basesoc_csr_bankarray_csrbank3_value0_we <= 1'd0;
	basesoc_csr_bankarray_csrbank3_value0_re <= 1'd0;
	if ((basesoc_csr_bankarray_csrbank3_sel & (basesoc_csr_bankarray_interface3_bank_bus_adr[8:0] == 1'd1))) begin
		basesoc_csr_bankarray_csrbank3_value0_re <= basesoc_csr_bankarray_interface3_bank_bus_we;
		basesoc_csr_bankarray_csrbank3_value0_we <= (~basesoc_csr_bankarray_interface3_bank_bus_we);
	end
end
assign display_write_r = basesoc_csr_bankarray_interface3_bank_bus_dat_w[0];
always @(*) begin
	display_write_re <= 1'd0;
	display_write_we <= 1'd0;
	if ((basesoc_csr_bankarray_csrbank3_sel & (basesoc_csr_bankarray_interface3_bank_bus_adr[8:0] == 2'd2))) begin
		display_write_re <= basesoc_csr_bankarray_interface3_bank_bus_we;
		display_write_we <= (~basesoc_csr_bankarray_interface3_bank_bus_we);
	end
end
assign basesoc_csr_bankarray_csrbank3_sel0_w = display_sel_storage[3:0];
assign basesoc_csr_bankarray_csrbank3_value0_w = display_value_storage[3:0];
assign basesoc_csr_bankarray_csrbank4_sel = (basesoc_csr_bankarray_interface4_bank_bus_adr[13:9] == 1'd0);
assign basesoc_csr_bankarray_csrbank4_id1_r = basesoc_csr_bankarray_interface4_bank_bus_dat_w[24:0];
always @(*) begin
	basesoc_csr_bankarray_csrbank4_id1_we <= 1'd0;
	basesoc_csr_bankarray_csrbank4_id1_re <= 1'd0;
	if ((basesoc_csr_bankarray_csrbank4_sel & (basesoc_csr_bankarray_interface4_bank_bus_adr[8:0] == 1'd0))) begin
		basesoc_csr_bankarray_csrbank4_id1_re <= basesoc_csr_bankarray_interface4_bank_bus_we;
		basesoc_csr_bankarray_csrbank4_id1_we <= (~basesoc_csr_bankarray_interface4_bank_bus_we);
	end
end
assign basesoc_csr_bankarray_csrbank4_id0_r = basesoc_csr_bankarray_interface4_bank_bus_dat_w[31:0];
always @(*) begin
	basesoc_csr_bankarray_csrbank4_id0_re <= 1'd0;
	basesoc_csr_bankarray_csrbank4_id0_we <= 1'd0;
	if ((basesoc_csr_bankarray_csrbank4_sel & (basesoc_csr_bankarray_interface4_bank_bus_adr[8:0] == 1'd1))) begin
		basesoc_csr_bankarray_csrbank4_id0_re <= basesoc_csr_bankarray_interface4_bank_bus_we;
		basesoc_csr_bankarray_csrbank4_id0_we <= (~basesoc_csr_bankarray_interface4_bank_bus_we);
	end
end
assign basesoc_csr_bankarray_csrbank4_id1_w = dna_status[56:32];
assign basesoc_csr_bankarray_csrbank4_id0_w = dna_status[31:0];
assign dna_we = basesoc_csr_bankarray_csrbank4_id0_we;
assign basesoc_csr_bankarray_sel = (basesoc_csr_bankarray_sram_bus_adr[13:9] == 4'd9);
always @(*) begin
	basesoc_csr_bankarray_sram_bus_dat_r <= 32'd0;
	if (basesoc_csr_bankarray_sel_r) begin
		basesoc_csr_bankarray_sram_bus_dat_r <= basesoc_csr_bankarray_dat_r;
	end
end
assign basesoc_csr_bankarray_adr = basesoc_csr_bankarray_sram_bus_adr[5:0];
assign basesoc_csr_bankarray_csrbank5_sel = (basesoc_csr_bankarray_interface5_bank_bus_adr[13:9] == 2'd2);
assign basesoc_csr_bankarray_csrbank5_out0_r = basesoc_csr_bankarray_interface5_bank_bus_dat_w[15:0];
always @(*) begin
	basesoc_csr_bankarray_csrbank5_out0_we <= 1'd0;
	basesoc_csr_bankarray_csrbank5_out0_re <= 1'd0;
	if ((basesoc_csr_bankarray_csrbank5_sel & (basesoc_csr_bankarray_interface5_bank_bus_adr[8:0] == 1'd0))) begin
		basesoc_csr_bankarray_csrbank5_out0_re <= basesoc_csr_bankarray_interface5_bank_bus_we;
		basesoc_csr_bankarray_csrbank5_out0_we <= (~basesoc_csr_bankarray_interface5_bank_bus_we);
	end
end
assign basesoc_csr_bankarray_csrbank5_out0_w = leds_storage[15:0];
assign basesoc_csr_bankarray_csrbank6_sel = (basesoc_csr_bankarray_interface6_bank_bus_adr[13:9] == 3'd5);
assign basesoc_csr_bankarray_csrbank6_r_enable0_r = basesoc_csr_bankarray_interface6_bank_bus_dat_w[0];
always @(*) begin
	basesoc_csr_bankarray_csrbank6_r_enable0_we <= 1'd0;
	basesoc_csr_bankarray_csrbank6_r_enable0_re <= 1'd0;
	if ((basesoc_csr_bankarray_csrbank6_sel & (basesoc_csr_bankarray_interface6_bank_bus_adr[8:0] == 1'd0))) begin
		basesoc_csr_bankarray_csrbank6_r_enable0_re <= basesoc_csr_bankarray_interface6_bank_bus_we;
		basesoc_csr_bankarray_csrbank6_r_enable0_we <= (~basesoc_csr_bankarray_interface6_bank_bus_we);
	end
end
assign basesoc_csr_bankarray_csrbank6_r_width0_r = basesoc_csr_bankarray_interface6_bank_bus_dat_w[31:0];
always @(*) begin
	basesoc_csr_bankarray_csrbank6_r_width0_re <= 1'd0;
	basesoc_csr_bankarray_csrbank6_r_width0_we <= 1'd0;
	if ((basesoc_csr_bankarray_csrbank6_sel & (basesoc_csr_bankarray_interface6_bank_bus_adr[8:0] == 1'd1))) begin
		basesoc_csr_bankarray_csrbank6_r_width0_re <= basesoc_csr_bankarray_interface6_bank_bus_we;
		basesoc_csr_bankarray_csrbank6_r_width0_we <= (~basesoc_csr_bankarray_interface6_bank_bus_we);
	end
end
assign basesoc_csr_bankarray_csrbank6_r_period0_r = basesoc_csr_bankarray_interface6_bank_bus_dat_w[31:0];
always @(*) begin
	basesoc_csr_bankarray_csrbank6_r_period0_we <= 1'd0;
	basesoc_csr_bankarray_csrbank6_r_period0_re <= 1'd0;
	if ((basesoc_csr_bankarray_csrbank6_sel & (basesoc_csr_bankarray_interface6_bank_bus_adr[8:0] == 2'd2))) begin
		basesoc_csr_bankarray_csrbank6_r_period0_re <= basesoc_csr_bankarray_interface6_bank_bus_we;
		basesoc_csr_bankarray_csrbank6_r_period0_we <= (~basesoc_csr_bankarray_interface6_bank_bus_we);
	end
end
assign basesoc_csr_bankarray_csrbank6_g_enable0_r = basesoc_csr_bankarray_interface6_bank_bus_dat_w[0];
always @(*) begin
	basesoc_csr_bankarray_csrbank6_g_enable0_we <= 1'd0;
	basesoc_csr_bankarray_csrbank6_g_enable0_re <= 1'd0;
	if ((basesoc_csr_bankarray_csrbank6_sel & (basesoc_csr_bankarray_interface6_bank_bus_adr[8:0] == 2'd3))) begin
		basesoc_csr_bankarray_csrbank6_g_enable0_re <= basesoc_csr_bankarray_interface6_bank_bus_we;
		basesoc_csr_bankarray_csrbank6_g_enable0_we <= (~basesoc_csr_bankarray_interface6_bank_bus_we);
	end
end
assign basesoc_csr_bankarray_csrbank6_g_width0_r = basesoc_csr_bankarray_interface6_bank_bus_dat_w[31:0];
always @(*) begin
	basesoc_csr_bankarray_csrbank6_g_width0_re <= 1'd0;
	basesoc_csr_bankarray_csrbank6_g_width0_we <= 1'd0;
	if ((basesoc_csr_bankarray_csrbank6_sel & (basesoc_csr_bankarray_interface6_bank_bus_adr[8:0] == 3'd4))) begin
		basesoc_csr_bankarray_csrbank6_g_width0_re <= basesoc_csr_bankarray_interface6_bank_bus_we;
		basesoc_csr_bankarray_csrbank6_g_width0_we <= (~basesoc_csr_bankarray_interface6_bank_bus_we);
	end
end
assign basesoc_csr_bankarray_csrbank6_g_period0_r = basesoc_csr_bankarray_interface6_bank_bus_dat_w[31:0];
always @(*) begin
	basesoc_csr_bankarray_csrbank6_g_period0_we <= 1'd0;
	basesoc_csr_bankarray_csrbank6_g_period0_re <= 1'd0;
	if ((basesoc_csr_bankarray_csrbank6_sel & (basesoc_csr_bankarray_interface6_bank_bus_adr[8:0] == 3'd5))) begin
		basesoc_csr_bankarray_csrbank6_g_period0_re <= basesoc_csr_bankarray_interface6_bank_bus_we;
		basesoc_csr_bankarray_csrbank6_g_period0_we <= (~basesoc_csr_bankarray_interface6_bank_bus_we);
	end
end
assign basesoc_csr_bankarray_csrbank6_b_enable0_r = basesoc_csr_bankarray_interface6_bank_bus_dat_w[0];
always @(*) begin
	basesoc_csr_bankarray_csrbank6_b_enable0_re <= 1'd0;
	basesoc_csr_bankarray_csrbank6_b_enable0_we <= 1'd0;
	if ((basesoc_csr_bankarray_csrbank6_sel & (basesoc_csr_bankarray_interface6_bank_bus_adr[8:0] == 3'd6))) begin
		basesoc_csr_bankarray_csrbank6_b_enable0_re <= basesoc_csr_bankarray_interface6_bank_bus_we;
		basesoc_csr_bankarray_csrbank6_b_enable0_we <= (~basesoc_csr_bankarray_interface6_bank_bus_we);
	end
end
assign basesoc_csr_bankarray_csrbank6_b_width0_r = basesoc_csr_bankarray_interface6_bank_bus_dat_w[31:0];
always @(*) begin
	basesoc_csr_bankarray_csrbank6_b_width0_re <= 1'd0;
	basesoc_csr_bankarray_csrbank6_b_width0_we <= 1'd0;
	if ((basesoc_csr_bankarray_csrbank6_sel & (basesoc_csr_bankarray_interface6_bank_bus_adr[8:0] == 3'd7))) begin
		basesoc_csr_bankarray_csrbank6_b_width0_re <= basesoc_csr_bankarray_interface6_bank_bus_we;
		basesoc_csr_bankarray_csrbank6_b_width0_we <= (~basesoc_csr_bankarray_interface6_bank_bus_we);
	end
end
assign basesoc_csr_bankarray_csrbank6_b_period0_r = basesoc_csr_bankarray_interface6_bank_bus_dat_w[31:0];
always @(*) begin
	basesoc_csr_bankarray_csrbank6_b_period0_we <= 1'd0;
	basesoc_csr_bankarray_csrbank6_b_period0_re <= 1'd0;
	if ((basesoc_csr_bankarray_csrbank6_sel & (basesoc_csr_bankarray_interface6_bank_bus_adr[8:0] == 4'd8))) begin
		basesoc_csr_bankarray_csrbank6_b_period0_re <= basesoc_csr_bankarray_interface6_bank_bus_we;
		basesoc_csr_bankarray_csrbank6_b_period0_we <= (~basesoc_csr_bankarray_interface6_bank_bus_we);
	end
end
assign basesoc_csr_bankarray_csrbank6_r_enable0_w = r_enable_storage;
assign basesoc_csr_bankarray_csrbank6_r_width0_w = r_width_storage[31:0];
assign basesoc_csr_bankarray_csrbank6_r_period0_w = r_period_storage[31:0];
assign basesoc_csr_bankarray_csrbank6_g_enable0_w = g_enable_storage;
assign basesoc_csr_bankarray_csrbank6_g_width0_w = g_width_storage[31:0];
assign basesoc_csr_bankarray_csrbank6_g_period0_w = g_period_storage[31:0];
assign basesoc_csr_bankarray_csrbank6_b_enable0_w = b_enable_storage;
assign basesoc_csr_bankarray_csrbank6_b_width0_w = b_width_storage[31:0];
assign basesoc_csr_bankarray_csrbank6_b_period0_w = b_period_storage[31:0];
assign basesoc_csr_bankarray_csrbank7_sel = (basesoc_csr_bankarray_interface7_bank_bus_adr[13:9] == 2'd3);
assign basesoc_csr_bankarray_csrbank7_in_r = basesoc_csr_bankarray_interface7_bank_bus_dat_w[15:0];
always @(*) begin
	basesoc_csr_bankarray_csrbank7_in_we <= 1'd0;
	basesoc_csr_bankarray_csrbank7_in_re <= 1'd0;
	if ((basesoc_csr_bankarray_csrbank7_sel & (basesoc_csr_bankarray_interface7_bank_bus_adr[8:0] == 1'd0))) begin
		basesoc_csr_bankarray_csrbank7_in_re <= basesoc_csr_bankarray_interface7_bank_bus_we;
		basesoc_csr_bankarray_csrbank7_in_we <= (~basesoc_csr_bankarray_interface7_bank_bus_we);
	end
end
assign basesoc_csr_bankarray_csrbank7_in_w = switches_status[15:0];
assign switches_we = basesoc_csr_bankarray_csrbank7_in_we;
assign basesoc_csr_bankarray_csrbank8_sel = (basesoc_csr_bankarray_interface8_bank_bus_adr[13:9] == 4'd10);
assign basesoc_csr_bankarray_csrbank8_load0_r = basesoc_csr_bankarray_interface8_bank_bus_dat_w[31:0];
always @(*) begin
	basesoc_csr_bankarray_csrbank8_load0_we <= 1'd0;
	basesoc_csr_bankarray_csrbank8_load0_re <= 1'd0;
	if ((basesoc_csr_bankarray_csrbank8_sel & (basesoc_csr_bankarray_interface8_bank_bus_adr[8:0] == 1'd0))) begin
		basesoc_csr_bankarray_csrbank8_load0_re <= basesoc_csr_bankarray_interface8_bank_bus_we;
		basesoc_csr_bankarray_csrbank8_load0_we <= (~basesoc_csr_bankarray_interface8_bank_bus_we);
	end
end
assign basesoc_csr_bankarray_csrbank8_reload0_r = basesoc_csr_bankarray_interface8_bank_bus_dat_w[31:0];
always @(*) begin
	basesoc_csr_bankarray_csrbank8_reload0_re <= 1'd0;
	basesoc_csr_bankarray_csrbank8_reload0_we <= 1'd0;
	if ((basesoc_csr_bankarray_csrbank8_sel & (basesoc_csr_bankarray_interface8_bank_bus_adr[8:0] == 1'd1))) begin
		basesoc_csr_bankarray_csrbank8_reload0_re <= basesoc_csr_bankarray_interface8_bank_bus_we;
		basesoc_csr_bankarray_csrbank8_reload0_we <= (~basesoc_csr_bankarray_interface8_bank_bus_we);
	end
end
assign basesoc_csr_bankarray_csrbank8_en0_r = basesoc_csr_bankarray_interface8_bank_bus_dat_w[0];
always @(*) begin
	basesoc_csr_bankarray_csrbank8_en0_we <= 1'd0;
	basesoc_csr_bankarray_csrbank8_en0_re <= 1'd0;
	if ((basesoc_csr_bankarray_csrbank8_sel & (basesoc_csr_bankarray_interface8_bank_bus_adr[8:0] == 2'd2))) begin
		basesoc_csr_bankarray_csrbank8_en0_re <= basesoc_csr_bankarray_interface8_bank_bus_we;
		basesoc_csr_bankarray_csrbank8_en0_we <= (~basesoc_csr_bankarray_interface8_bank_bus_we);
	end
end
assign basesoc_csr_bankarray_csrbank8_update_value0_r = basesoc_csr_bankarray_interface8_bank_bus_dat_w[0];
always @(*) begin
	basesoc_csr_bankarray_csrbank8_update_value0_re <= 1'd0;
	basesoc_csr_bankarray_csrbank8_update_value0_we <= 1'd0;
	if ((basesoc_csr_bankarray_csrbank8_sel & (basesoc_csr_bankarray_interface8_bank_bus_adr[8:0] == 2'd3))) begin
		basesoc_csr_bankarray_csrbank8_update_value0_re <= basesoc_csr_bankarray_interface8_bank_bus_we;
		basesoc_csr_bankarray_csrbank8_update_value0_we <= (~basesoc_csr_bankarray_interface8_bank_bus_we);
	end
end
assign basesoc_csr_bankarray_csrbank8_value_r = basesoc_csr_bankarray_interface8_bank_bus_dat_w[31:0];
always @(*) begin
	basesoc_csr_bankarray_csrbank8_value_re <= 1'd0;
	basesoc_csr_bankarray_csrbank8_value_we <= 1'd0;
	if ((basesoc_csr_bankarray_csrbank8_sel & (basesoc_csr_bankarray_interface8_bank_bus_adr[8:0] == 3'd4))) begin
		basesoc_csr_bankarray_csrbank8_value_re <= basesoc_csr_bankarray_interface8_bank_bus_we;
		basesoc_csr_bankarray_csrbank8_value_we <= (~basesoc_csr_bankarray_interface8_bank_bus_we);
	end
end
assign basesoc_csr_bankarray_csrbank8_ev_status_r = basesoc_csr_bankarray_interface8_bank_bus_dat_w[0];
always @(*) begin
	basesoc_csr_bankarray_csrbank8_ev_status_we <= 1'd0;
	basesoc_csr_bankarray_csrbank8_ev_status_re <= 1'd0;
	if ((basesoc_csr_bankarray_csrbank8_sel & (basesoc_csr_bankarray_interface8_bank_bus_adr[8:0] == 3'd5))) begin
		basesoc_csr_bankarray_csrbank8_ev_status_re <= basesoc_csr_bankarray_interface8_bank_bus_we;
		basesoc_csr_bankarray_csrbank8_ev_status_we <= (~basesoc_csr_bankarray_interface8_bank_bus_we);
	end
end
assign basesoc_csr_bankarray_csrbank8_ev_pending_r = basesoc_csr_bankarray_interface8_bank_bus_dat_w[0];
always @(*) begin
	basesoc_csr_bankarray_csrbank8_ev_pending_we <= 1'd0;
	basesoc_csr_bankarray_csrbank8_ev_pending_re <= 1'd0;
	if ((basesoc_csr_bankarray_csrbank8_sel & (basesoc_csr_bankarray_interface8_bank_bus_adr[8:0] == 3'd6))) begin
		basesoc_csr_bankarray_csrbank8_ev_pending_re <= basesoc_csr_bankarray_interface8_bank_bus_we;
		basesoc_csr_bankarray_csrbank8_ev_pending_we <= (~basesoc_csr_bankarray_interface8_bank_bus_we);
	end
end
assign basesoc_csr_bankarray_csrbank8_ev_enable0_r = basesoc_csr_bankarray_interface8_bank_bus_dat_w[0];
always @(*) begin
	basesoc_csr_bankarray_csrbank8_ev_enable0_re <= 1'd0;
	basesoc_csr_bankarray_csrbank8_ev_enable0_we <= 1'd0;
	if ((basesoc_csr_bankarray_csrbank8_sel & (basesoc_csr_bankarray_interface8_bank_bus_adr[8:0] == 3'd7))) begin
		basesoc_csr_bankarray_csrbank8_ev_enable0_re <= basesoc_csr_bankarray_interface8_bank_bus_we;
		basesoc_csr_bankarray_csrbank8_ev_enable0_we <= (~basesoc_csr_bankarray_interface8_bank_bus_we);
	end
end
assign basesoc_csr_bankarray_csrbank8_load0_w = timer_load_storage[31:0];
assign basesoc_csr_bankarray_csrbank8_reload0_w = timer_reload_storage[31:0];
assign basesoc_csr_bankarray_csrbank8_en0_w = timer_en_storage;
assign basesoc_csr_bankarray_csrbank8_update_value0_w = timer_update_value_storage;
assign basesoc_csr_bankarray_csrbank8_value_w = timer_value_status[31:0];
assign timer_value_we = basesoc_csr_bankarray_csrbank8_value_we;
assign timer_status_status = timer_zero0;
assign basesoc_csr_bankarray_csrbank8_ev_status_w = timer_status_status;
assign timer_status_we = basesoc_csr_bankarray_csrbank8_ev_status_we;
assign timer_pending_status = timer_zero1;
assign basesoc_csr_bankarray_csrbank8_ev_pending_w = timer_pending_status;
assign timer_pending_we = basesoc_csr_bankarray_csrbank8_ev_pending_we;
assign timer_zero2 = timer_enable_storage;
assign basesoc_csr_bankarray_csrbank8_ev_enable0_w = timer_enable_storage;
assign basesoc_csr_bankarray_csrbank9_sel = (basesoc_csr_bankarray_interface9_bank_bus_adr[13:9] == 4'd11);
assign uart_rxtx_r = basesoc_csr_bankarray_interface9_bank_bus_dat_w[7:0];
always @(*) begin
	uart_rxtx_we <= 1'd0;
	uart_rxtx_re <= 1'd0;
	if ((basesoc_csr_bankarray_csrbank9_sel & (basesoc_csr_bankarray_interface9_bank_bus_adr[8:0] == 1'd0))) begin
		uart_rxtx_re <= basesoc_csr_bankarray_interface9_bank_bus_we;
		uart_rxtx_we <= (~basesoc_csr_bankarray_interface9_bank_bus_we);
	end
end
assign basesoc_csr_bankarray_csrbank9_txfull_r = basesoc_csr_bankarray_interface9_bank_bus_dat_w[0];
always @(*) begin
	basesoc_csr_bankarray_csrbank9_txfull_we <= 1'd0;
	basesoc_csr_bankarray_csrbank9_txfull_re <= 1'd0;
	if ((basesoc_csr_bankarray_csrbank9_sel & (basesoc_csr_bankarray_interface9_bank_bus_adr[8:0] == 1'd1))) begin
		basesoc_csr_bankarray_csrbank9_txfull_re <= basesoc_csr_bankarray_interface9_bank_bus_we;
		basesoc_csr_bankarray_csrbank9_txfull_we <= (~basesoc_csr_bankarray_interface9_bank_bus_we);
	end
end
assign basesoc_csr_bankarray_csrbank9_rxempty_r = basesoc_csr_bankarray_interface9_bank_bus_dat_w[0];
always @(*) begin
	basesoc_csr_bankarray_csrbank9_rxempty_we <= 1'd0;
	basesoc_csr_bankarray_csrbank9_rxempty_re <= 1'd0;
	if ((basesoc_csr_bankarray_csrbank9_sel & (basesoc_csr_bankarray_interface9_bank_bus_adr[8:0] == 2'd2))) begin
		basesoc_csr_bankarray_csrbank9_rxempty_re <= basesoc_csr_bankarray_interface9_bank_bus_we;
		basesoc_csr_bankarray_csrbank9_rxempty_we <= (~basesoc_csr_bankarray_interface9_bank_bus_we);
	end
end
assign basesoc_csr_bankarray_csrbank9_ev_status_r = basesoc_csr_bankarray_interface9_bank_bus_dat_w[1:0];
always @(*) begin
	basesoc_csr_bankarray_csrbank9_ev_status_re <= 1'd0;
	basesoc_csr_bankarray_csrbank9_ev_status_we <= 1'd0;
	if ((basesoc_csr_bankarray_csrbank9_sel & (basesoc_csr_bankarray_interface9_bank_bus_adr[8:0] == 2'd3))) begin
		basesoc_csr_bankarray_csrbank9_ev_status_re <= basesoc_csr_bankarray_interface9_bank_bus_we;
		basesoc_csr_bankarray_csrbank9_ev_status_we <= (~basesoc_csr_bankarray_interface9_bank_bus_we);
	end
end
assign basesoc_csr_bankarray_csrbank9_ev_pending_r = basesoc_csr_bankarray_interface9_bank_bus_dat_w[1:0];
always @(*) begin
	basesoc_csr_bankarray_csrbank9_ev_pending_re <= 1'd0;
	basesoc_csr_bankarray_csrbank9_ev_pending_we <= 1'd0;
	if ((basesoc_csr_bankarray_csrbank9_sel & (basesoc_csr_bankarray_interface9_bank_bus_adr[8:0] == 3'd4))) begin
		basesoc_csr_bankarray_csrbank9_ev_pending_re <= basesoc_csr_bankarray_interface9_bank_bus_we;
		basesoc_csr_bankarray_csrbank9_ev_pending_we <= (~basesoc_csr_bankarray_interface9_bank_bus_we);
	end
end
assign basesoc_csr_bankarray_csrbank9_ev_enable0_r = basesoc_csr_bankarray_interface9_bank_bus_dat_w[1:0];
always @(*) begin
	basesoc_csr_bankarray_csrbank9_ev_enable0_we <= 1'd0;
	basesoc_csr_bankarray_csrbank9_ev_enable0_re <= 1'd0;
	if ((basesoc_csr_bankarray_csrbank9_sel & (basesoc_csr_bankarray_interface9_bank_bus_adr[8:0] == 3'd5))) begin
		basesoc_csr_bankarray_csrbank9_ev_enable0_re <= basesoc_csr_bankarray_interface9_bank_bus_we;
		basesoc_csr_bankarray_csrbank9_ev_enable0_we <= (~basesoc_csr_bankarray_interface9_bank_bus_we);
	end
end
assign basesoc_csr_bankarray_csrbank9_txempty_r = basesoc_csr_bankarray_interface9_bank_bus_dat_w[0];
always @(*) begin
	basesoc_csr_bankarray_csrbank9_txempty_re <= 1'd0;
	basesoc_csr_bankarray_csrbank9_txempty_we <= 1'd0;
	if ((basesoc_csr_bankarray_csrbank9_sel & (basesoc_csr_bankarray_interface9_bank_bus_adr[8:0] == 3'd6))) begin
		basesoc_csr_bankarray_csrbank9_txempty_re <= basesoc_csr_bankarray_interface9_bank_bus_we;
		basesoc_csr_bankarray_csrbank9_txempty_we <= (~basesoc_csr_bankarray_interface9_bank_bus_we);
	end
end
assign basesoc_csr_bankarray_csrbank9_rxfull_r = basesoc_csr_bankarray_interface9_bank_bus_dat_w[0];
always @(*) begin
	basesoc_csr_bankarray_csrbank9_rxfull_re <= 1'd0;
	basesoc_csr_bankarray_csrbank9_rxfull_we <= 1'd0;
	if ((basesoc_csr_bankarray_csrbank9_sel & (basesoc_csr_bankarray_interface9_bank_bus_adr[8:0] == 3'd7))) begin
		basesoc_csr_bankarray_csrbank9_rxfull_re <= basesoc_csr_bankarray_interface9_bank_bus_we;
		basesoc_csr_bankarray_csrbank9_rxfull_we <= (~basesoc_csr_bankarray_interface9_bank_bus_we);
	end
end
assign basesoc_csr_bankarray_csrbank9_txfull_w = uart_txfull_status;
assign uart_txfull_we = basesoc_csr_bankarray_csrbank9_txfull_we;
assign basesoc_csr_bankarray_csrbank9_rxempty_w = uart_rxempty_status;
assign uart_rxempty_we = basesoc_csr_bankarray_csrbank9_rxempty_we;
always @(*) begin
	uart_status_status <= 2'd0;
	uart_status_status[0] <= uart_tx0;
	uart_status_status[1] <= uart_rx0;
end
assign basesoc_csr_bankarray_csrbank9_ev_status_w = uart_status_status[1:0];
assign uart_status_we = basesoc_csr_bankarray_csrbank9_ev_status_we;
always @(*) begin
	uart_pending_status <= 2'd0;
	uart_pending_status[0] <= uart_tx1;
	uart_pending_status[1] <= uart_rx1;
end
assign basesoc_csr_bankarray_csrbank9_ev_pending_w = uart_pending_status[1:0];
assign uart_pending_we = basesoc_csr_bankarray_csrbank9_ev_pending_we;
assign uart_tx2 = uart_enable_storage[0];
assign uart_rx2 = uart_enable_storage[1];
assign basesoc_csr_bankarray_csrbank9_ev_enable0_w = uart_enable_storage[1:0];
assign basesoc_csr_bankarray_csrbank9_txempty_w = uart_txempty_status;
assign uart_txempty_we = basesoc_csr_bankarray_csrbank9_txempty_we;
assign basesoc_csr_bankarray_csrbank9_rxfull_w = uart_rxfull_status;
assign uart_rxfull_we = basesoc_csr_bankarray_csrbank9_rxfull_we;
assign basesoc_csr_bankarray_csrbank10_sel = (basesoc_csr_bankarray_interface10_bank_bus_adr[13:9] == 1'd1);
assign basesoc_csr_bankarray_csrbank10_temperature_r = basesoc_csr_bankarray_interface10_bank_bus_dat_w[11:0];
always @(*) begin
	basesoc_csr_bankarray_csrbank10_temperature_re <= 1'd0;
	basesoc_csr_bankarray_csrbank10_temperature_we <= 1'd0;
	if ((basesoc_csr_bankarray_csrbank10_sel & (basesoc_csr_bankarray_interface10_bank_bus_adr[8:0] == 1'd0))) begin
		basesoc_csr_bankarray_csrbank10_temperature_re <= basesoc_csr_bankarray_interface10_bank_bus_we;
		basesoc_csr_bankarray_csrbank10_temperature_we <= (~basesoc_csr_bankarray_interface10_bank_bus_we);
	end
end
assign basesoc_csr_bankarray_csrbank10_vccint_r = basesoc_csr_bankarray_interface10_bank_bus_dat_w[11:0];
always @(*) begin
	basesoc_csr_bankarray_csrbank10_vccint_we <= 1'd0;
	basesoc_csr_bankarray_csrbank10_vccint_re <= 1'd0;
	if ((basesoc_csr_bankarray_csrbank10_sel & (basesoc_csr_bankarray_interface10_bank_bus_adr[8:0] == 1'd1))) begin
		basesoc_csr_bankarray_csrbank10_vccint_re <= basesoc_csr_bankarray_interface10_bank_bus_we;
		basesoc_csr_bankarray_csrbank10_vccint_we <= (~basesoc_csr_bankarray_interface10_bank_bus_we);
	end
end
assign basesoc_csr_bankarray_csrbank10_vccaux_r = basesoc_csr_bankarray_interface10_bank_bus_dat_w[11:0];
always @(*) begin
	basesoc_csr_bankarray_csrbank10_vccaux_we <= 1'd0;
	basesoc_csr_bankarray_csrbank10_vccaux_re <= 1'd0;
	if ((basesoc_csr_bankarray_csrbank10_sel & (basesoc_csr_bankarray_interface10_bank_bus_adr[8:0] == 2'd2))) begin
		basesoc_csr_bankarray_csrbank10_vccaux_re <= basesoc_csr_bankarray_interface10_bank_bus_we;
		basesoc_csr_bankarray_csrbank10_vccaux_we <= (~basesoc_csr_bankarray_interface10_bank_bus_we);
	end
end
assign basesoc_csr_bankarray_csrbank10_vccbram_r = basesoc_csr_bankarray_interface10_bank_bus_dat_w[11:0];
always @(*) begin
	basesoc_csr_bankarray_csrbank10_vccbram_re <= 1'd0;
	basesoc_csr_bankarray_csrbank10_vccbram_we <= 1'd0;
	if ((basesoc_csr_bankarray_csrbank10_sel & (basesoc_csr_bankarray_interface10_bank_bus_adr[8:0] == 2'd3))) begin
		basesoc_csr_bankarray_csrbank10_vccbram_re <= basesoc_csr_bankarray_interface10_bank_bus_we;
		basesoc_csr_bankarray_csrbank10_vccbram_we <= (~basesoc_csr_bankarray_interface10_bank_bus_we);
	end
end
assign basesoc_csr_bankarray_csrbank10_eoc_r = basesoc_csr_bankarray_interface10_bank_bus_dat_w[0];
always @(*) begin
	basesoc_csr_bankarray_csrbank10_eoc_re <= 1'd0;
	basesoc_csr_bankarray_csrbank10_eoc_we <= 1'd0;
	if ((basesoc_csr_bankarray_csrbank10_sel & (basesoc_csr_bankarray_interface10_bank_bus_adr[8:0] == 3'd4))) begin
		basesoc_csr_bankarray_csrbank10_eoc_re <= basesoc_csr_bankarray_interface10_bank_bus_we;
		basesoc_csr_bankarray_csrbank10_eoc_we <= (~basesoc_csr_bankarray_interface10_bank_bus_we);
	end
end
assign basesoc_csr_bankarray_csrbank10_eos_r = basesoc_csr_bankarray_interface10_bank_bus_dat_w[0];
always @(*) begin
	basesoc_csr_bankarray_csrbank10_eos_we <= 1'd0;
	basesoc_csr_bankarray_csrbank10_eos_re <= 1'd0;
	if ((basesoc_csr_bankarray_csrbank10_sel & (basesoc_csr_bankarray_interface10_bank_bus_adr[8:0] == 3'd5))) begin
		basesoc_csr_bankarray_csrbank10_eos_re <= basesoc_csr_bankarray_interface10_bank_bus_we;
		basesoc_csr_bankarray_csrbank10_eos_we <= (~basesoc_csr_bankarray_interface10_bank_bus_we);
	end
end
assign basesoc_csr_bankarray_csrbank10_temperature_w = xadc_temperature_status[11:0];
assign xadc_temperature_we = basesoc_csr_bankarray_csrbank10_temperature_we;
assign basesoc_csr_bankarray_csrbank10_vccint_w = xadc_vccint_status[11:0];
assign xadc_vccint_we = basesoc_csr_bankarray_csrbank10_vccint_we;
assign basesoc_csr_bankarray_csrbank10_vccaux_w = xadc_vccaux_status[11:0];
assign xadc_vccaux_we = basesoc_csr_bankarray_csrbank10_vccaux_we;
assign basesoc_csr_bankarray_csrbank10_vccbram_w = xadc_vccbram_status[11:0];
assign xadc_vccbram_we = basesoc_csr_bankarray_csrbank10_vccbram_we;
assign basesoc_csr_bankarray_csrbank10_eoc_w = xadc_eoc_status;
assign xadc_eoc_we = basesoc_csr_bankarray_csrbank10_eoc_we;
assign basesoc_csr_bankarray_csrbank10_eos_w = xadc_eos_status;
assign xadc_eos_we = basesoc_csr_bankarray_csrbank10_eos_we;
assign basesoc_csr_interconnect_adr = basesoc_basesoc_adr;
assign basesoc_csr_interconnect_we = basesoc_basesoc_we;
assign basesoc_csr_interconnect_dat_w = basesoc_basesoc_dat_w;
assign basesoc_basesoc_dat_r = basesoc_csr_interconnect_dat_r;
assign basesoc_csr_bankarray_interface0_bank_bus_adr = basesoc_csr_interconnect_adr;
assign basesoc_csr_bankarray_interface1_bank_bus_adr = basesoc_csr_interconnect_adr;
assign basesoc_csr_bankarray_interface2_bank_bus_adr = basesoc_csr_interconnect_adr;
assign basesoc_csr_bankarray_interface3_bank_bus_adr = basesoc_csr_interconnect_adr;
assign basesoc_csr_bankarray_interface4_bank_bus_adr = basesoc_csr_interconnect_adr;
assign basesoc_csr_bankarray_interface5_bank_bus_adr = basesoc_csr_interconnect_adr;
assign basesoc_csr_bankarray_interface6_bank_bus_adr = basesoc_csr_interconnect_adr;
assign basesoc_csr_bankarray_interface7_bank_bus_adr = basesoc_csr_interconnect_adr;
assign basesoc_csr_bankarray_interface8_bank_bus_adr = basesoc_csr_interconnect_adr;
assign basesoc_csr_bankarray_interface9_bank_bus_adr = basesoc_csr_interconnect_adr;
assign basesoc_csr_bankarray_interface10_bank_bus_adr = basesoc_csr_interconnect_adr;
assign basesoc_csr_bankarray_sram_bus_adr = basesoc_csr_interconnect_adr;
assign basesoc_csr_bankarray_interface0_bank_bus_we = basesoc_csr_interconnect_we;
assign basesoc_csr_bankarray_interface1_bank_bus_we = basesoc_csr_interconnect_we;
assign basesoc_csr_bankarray_interface2_bank_bus_we = basesoc_csr_interconnect_we;
assign basesoc_csr_bankarray_interface3_bank_bus_we = basesoc_csr_interconnect_we;
assign basesoc_csr_bankarray_interface4_bank_bus_we = basesoc_csr_interconnect_we;
assign basesoc_csr_bankarray_interface5_bank_bus_we = basesoc_csr_interconnect_we;
assign basesoc_csr_bankarray_interface6_bank_bus_we = basesoc_csr_interconnect_we;
assign basesoc_csr_bankarray_interface7_bank_bus_we = basesoc_csr_interconnect_we;
assign basesoc_csr_bankarray_interface8_bank_bus_we = basesoc_csr_interconnect_we;
assign basesoc_csr_bankarray_interface9_bank_bus_we = basesoc_csr_interconnect_we;
assign basesoc_csr_bankarray_interface10_bank_bus_we = basesoc_csr_interconnect_we;
assign basesoc_csr_bankarray_sram_bus_we = basesoc_csr_interconnect_we;
assign basesoc_csr_bankarray_interface0_bank_bus_dat_w = basesoc_csr_interconnect_dat_w;
assign basesoc_csr_bankarray_interface1_bank_bus_dat_w = basesoc_csr_interconnect_dat_w;
assign basesoc_csr_bankarray_interface2_bank_bus_dat_w = basesoc_csr_interconnect_dat_w;
assign basesoc_csr_bankarray_interface3_bank_bus_dat_w = basesoc_csr_interconnect_dat_w;
assign basesoc_csr_bankarray_interface4_bank_bus_dat_w = basesoc_csr_interconnect_dat_w;
assign basesoc_csr_bankarray_interface5_bank_bus_dat_w = basesoc_csr_interconnect_dat_w;
assign basesoc_csr_bankarray_interface6_bank_bus_dat_w = basesoc_csr_interconnect_dat_w;
assign basesoc_csr_bankarray_interface7_bank_bus_dat_w = basesoc_csr_interconnect_dat_w;
assign basesoc_csr_bankarray_interface8_bank_bus_dat_w = basesoc_csr_interconnect_dat_w;
assign basesoc_csr_bankarray_interface9_bank_bus_dat_w = basesoc_csr_interconnect_dat_w;
assign basesoc_csr_bankarray_interface10_bank_bus_dat_w = basesoc_csr_interconnect_dat_w;
assign basesoc_csr_bankarray_sram_bus_dat_w = basesoc_csr_interconnect_dat_w;
assign basesoc_csr_interconnect_dat_r = (((((((((((basesoc_csr_bankarray_interface0_bank_bus_dat_r | basesoc_csr_bankarray_interface1_bank_bus_dat_r) | basesoc_csr_bankarray_interface2_bank_bus_dat_r) | basesoc_csr_bankarray_interface3_bank_bus_dat_r) | basesoc_csr_bankarray_interface4_bank_bus_dat_r) | basesoc_csr_bankarray_interface5_bank_bus_dat_r) | basesoc_csr_bankarray_interface6_bank_bus_dat_r) | basesoc_csr_bankarray_interface7_bank_bus_dat_r) | basesoc_csr_bankarray_interface8_bank_bus_dat_r) | basesoc_csr_bankarray_interface9_bank_bus_dat_r) | basesoc_csr_bankarray_interface10_bank_bus_dat_r) | basesoc_csr_bankarray_sram_bus_dat_r);
always @(*) begin
	comb_array_muxed0 <= 30'd0;
	case (basesoc_grant)
		1'd0: begin
			comb_array_muxed0 <= ibus_adr;
		end
		default: begin
			comb_array_muxed0 <= dbus_adr;
		end
	endcase
end
always @(*) begin
	comb_array_muxed1 <= 32'd0;
	case (basesoc_grant)
		1'd0: begin
			comb_array_muxed1 <= ibus_dat_w;
		end
		default: begin
			comb_array_muxed1 <= dbus_dat_w;
		end
	endcase
end
always @(*) begin
	comb_array_muxed2 <= 4'd0;
	case (basesoc_grant)
		1'd0: begin
			comb_array_muxed2 <= ibus_sel;
		end
		default: begin
			comb_array_muxed2 <= dbus_sel;
		end
	endcase
end
always @(*) begin
	comb_array_muxed3 <= 1'd0;
	case (basesoc_grant)
		1'd0: begin
			comb_array_muxed3 <= ibus_cyc;
		end
		default: begin
			comb_array_muxed3 <= dbus_cyc;
		end
	endcase
end
always @(*) begin
	comb_array_muxed4 <= 1'd0;
	case (basesoc_grant)
		1'd0: begin
			comb_array_muxed4 <= ibus_stb;
		end
		default: begin
			comb_array_muxed4 <= dbus_stb;
		end
	endcase
end
always @(*) begin
	comb_array_muxed5 <= 1'd0;
	case (basesoc_grant)
		1'd0: begin
			comb_array_muxed5 <= ibus_we;
		end
		default: begin
			comb_array_muxed5 <= dbus_we;
		end
	endcase
end
always @(*) begin
	comb_array_muxed6 <= 3'd0;
	case (basesoc_grant)
		1'd0: begin
			comb_array_muxed6 <= ibus_cti;
		end
		default: begin
			comb_array_muxed6 <= dbus_cti;
		end
	endcase
end
always @(*) begin
	comb_array_muxed7 <= 2'd0;
	case (basesoc_grant)
		1'd0: begin
			comb_array_muxed7 <= ibus_bte;
		end
		default: begin
			comb_array_muxed7 <= dbus_bte;
		end
	endcase
end
always @(*) begin
	sync_array_muxed <= 1'd0;
	case (adxl362_mosi_sel)
		1'd0: begin
			sync_array_muxed <= adxl362_mosi_data[0];
		end
		1'd1: begin
			sync_array_muxed <= adxl362_mosi_data[1];
		end
		2'd2: begin
			sync_array_muxed <= adxl362_mosi_data[2];
		end
		2'd3: begin
			sync_array_muxed <= adxl362_mosi_data[3];
		end
		3'd4: begin
			sync_array_muxed <= adxl362_mosi_data[4];
		end
		3'd5: begin
			sync_array_muxed <= adxl362_mosi_data[5];
		end
		3'd6: begin
			sync_array_muxed <= adxl362_mosi_data[6];
		end
		3'd7: begin
			sync_array_muxed <= adxl362_mosi_data[7];
		end
		4'd8: begin
			sync_array_muxed <= adxl362_mosi_data[8];
		end
		4'd9: begin
			sync_array_muxed <= adxl362_mosi_data[9];
		end
		4'd10: begin
			sync_array_muxed <= adxl362_mosi_data[10];
		end
		4'd11: begin
			sync_array_muxed <= adxl362_mosi_data[11];
		end
		4'd12: begin
			sync_array_muxed <= adxl362_mosi_data[12];
		end
		4'd13: begin
			sync_array_muxed <= adxl362_mosi_data[13];
		end
		4'd14: begin
			sync_array_muxed <= adxl362_mosi_data[14];
		end
		4'd15: begin
			sync_array_muxed <= adxl362_mosi_data[15];
		end
		5'd16: begin
			sync_array_muxed <= adxl362_mosi_data[16];
		end
		5'd17: begin
			sync_array_muxed <= adxl362_mosi_data[17];
		end
		5'd18: begin
			sync_array_muxed <= adxl362_mosi_data[18];
		end
		5'd19: begin
			sync_array_muxed <= adxl362_mosi_data[19];
		end
		5'd20: begin
			sync_array_muxed <= adxl362_mosi_data[20];
		end
		5'd21: begin
			sync_array_muxed <= adxl362_mosi_data[21];
		end
		5'd22: begin
			sync_array_muxed <= adxl362_mosi_data[22];
		end
		5'd23: begin
			sync_array_muxed <= adxl362_mosi_data[23];
		end
		5'd24: begin
			sync_array_muxed <= adxl362_mosi_data[24];
		end
		5'd25: begin
			sync_array_muxed <= adxl362_mosi_data[25];
		end
		5'd26: begin
			sync_array_muxed <= adxl362_mosi_data[26];
		end
		5'd27: begin
			sync_array_muxed <= adxl362_mosi_data[27];
		end
		5'd28: begin
			sync_array_muxed <= adxl362_mosi_data[28];
		end
		5'd29: begin
			sync_array_muxed <= adxl362_mosi_data[29];
		end
		5'd30: begin
			sync_array_muxed <= adxl362_mosi_data[30];
		end
		default: begin
			sync_array_muxed <= adxl362_mosi_data[31];
		end
	endcase
end
assign rx_rx = xilinxmultiregimpl0_regs1;
assign switches_status = xilinxmultiregimpl1_regs1;
assign xilinxmultiregimpl1 = {user_sw15, user_sw14, user_sw13, user_sw12, user_sw11, user_sw10, user_sw9, user_sw8, user_sw7, user_sw6, user_sw5, user_sw4, user_sw3, user_sw2, user_sw1, user_sw0};
assign buttons_status = xilinxmultiregimpl2_regs1;
assign xilinxmultiregimpl2 = {user_btn4, user_btn3, user_btn2, user_btn1, user_btn0};


//------------------------------------------------------------------------------
// Synchronous Logic
//------------------------------------------------------------------------------

always @(posedge por_clk) begin
	int_rst <= (~cpu_reset);
end

always @(posedge sys_clk) begin
	if ((bus_errors != 32'd4294967295)) begin
		if (bus_error) begin
			bus_errors <= (bus_errors + 1'd1);
		end
	end
	ram_bus_ack <= 1'd0;
	if (((ram_bus_cyc & ram_bus_stb) & ((~ram_bus_ack) | adr_burst))) begin
		ram_bus_ack <= 1'd1;
	end
	interface0_ram_bus_ack <= 1'd0;
	if (((interface0_ram_bus_cyc & interface0_ram_bus_stb) & ((~interface0_ram_bus_ack) | sram0_adr_burst))) begin
		interface0_ram_bus_ack <= 1'd1;
	end
	interface1_ram_bus_ack <= 1'd0;
	if (((interface1_ram_bus_cyc & interface1_ram_bus_stb) & ((~interface1_ram_bus_ack) | sram1_adr_burst))) begin
		interface1_ram_bus_ack <= 1'd1;
	end
	{tx_tick, tx_phase} <= 23'd4947802;
	if (tx_enable) begin
		{tx_tick, tx_phase} <= (tx_phase + 23'd4947802);
	end
	subfragments_rs232phytx_state <= subfragments_rs232phytx_next_state;
	if (tx_count_rs232phytx_next_value_ce0) begin
		tx_count <= tx_count_rs232phytx_next_value0;
	end
	if (serial_tx_rs232phytx_next_value_ce1) begin
		serial_tx <= serial_tx_rs232phytx_next_value1;
	end
	if (tx_data_rs232phytx_next_value_ce2) begin
		tx_data <= tx_data_rs232phytx_next_value2;
	end
	rx_rx_d <= rx_rx;
	{rx_tick, rx_phase} <= 32'd2147483648;
	if (rx_enable) begin
		{rx_tick, rx_phase} <= (rx_phase + 23'd4947802);
	end
	subfragments_rs232phyrx_state <= subfragments_rs232phyrx_next_state;
	if (rx_count_rs232phyrx_next_value_ce0) begin
		rx_count <= rx_count_rs232phyrx_next_value0;
	end
	if (rx_data_rs232phyrx_next_value_ce1) begin
		rx_data <= rx_data_rs232phyrx_next_value1;
	end
	if (uart_tx_clear) begin
		uart_tx_pending <= 1'd0;
	end
	uart_tx_trigger_d <= uart_tx_trigger;
	if ((uart_tx_trigger & (~uart_tx_trigger_d))) begin
		uart_tx_pending <= 1'd1;
	end
	if (uart_rx_clear) begin
		uart_rx_pending <= 1'd0;
	end
	uart_rx_trigger_d <= uart_rx_trigger;
	if ((uart_rx_trigger & (~uart_rx_trigger_d))) begin
		uart_rx_pending <= 1'd1;
	end
	if (uart_tx_fifo_syncfifo_re) begin
		uart_tx_fifo_readable <= 1'd1;
	end else begin
		if (uart_tx_fifo_re) begin
			uart_tx_fifo_readable <= 1'd0;
		end
	end
	if (((uart_tx_fifo_syncfifo_we & uart_tx_fifo_syncfifo_writable) & (~uart_tx_fifo_replace))) begin
		uart_tx_fifo_produce <= (uart_tx_fifo_produce + 1'd1);
	end
	if (uart_tx_fifo_do_read) begin
		uart_tx_fifo_consume <= (uart_tx_fifo_consume + 1'd1);
	end
	if (((uart_tx_fifo_syncfifo_we & uart_tx_fifo_syncfifo_writable) & (~uart_tx_fifo_replace))) begin
		if ((~uart_tx_fifo_do_read)) begin
			uart_tx_fifo_level0 <= (uart_tx_fifo_level0 + 1'd1);
		end
	end else begin
		if (uart_tx_fifo_do_read) begin
			uart_tx_fifo_level0 <= (uart_tx_fifo_level0 - 1'd1);
		end
	end
	if (uart_rx_fifo_syncfifo_re) begin
		uart_rx_fifo_readable <= 1'd1;
	end else begin
		if (uart_rx_fifo_re) begin
			uart_rx_fifo_readable <= 1'd0;
		end
	end
	if (((uart_rx_fifo_syncfifo_we & uart_rx_fifo_syncfifo_writable) & (~uart_rx_fifo_replace))) begin
		uart_rx_fifo_produce <= (uart_rx_fifo_produce + 1'd1);
	end
	if (uart_rx_fifo_do_read) begin
		uart_rx_fifo_consume <= (uart_rx_fifo_consume + 1'd1);
	end
	if (((uart_rx_fifo_syncfifo_we & uart_rx_fifo_syncfifo_writable) & (~uart_rx_fifo_replace))) begin
		if ((~uart_rx_fifo_do_read)) begin
			uart_rx_fifo_level0 <= (uart_rx_fifo_level0 + 1'd1);
		end
	end else begin
		if (uart_rx_fifo_do_read) begin
			uart_rx_fifo_level0 <= (uart_rx_fifo_level0 - 1'd1);
		end
	end
	if (timer_en_storage) begin
		if ((timer_value == 1'd0)) begin
			timer_value <= timer_reload_storage;
		end else begin
			timer_value <= (timer_value - 1'd1);
		end
	end else begin
		timer_value <= timer_load_storage;
	end
	if (timer_update_value_re) begin
		timer_value_status <= timer_value;
	end
	if (timer_zero_clear) begin
		timer_zero_pending <= 1'd0;
	end
	timer_zero_trigger_d <= timer_zero_trigger;
	if ((timer_zero_trigger & (~timer_zero_trigger_d))) begin
		timer_zero_pending <= 1'd1;
	end
	if ((dna_count < 7'd114)) begin
		dna_count <= (dna_count + 1'd1);
		if (dna_clk) begin
			dna_status <= {dna_status, dna_do};
		end
	end
	if (xadc_drdy) begin
		case (xadc_channel)
			1'd0: begin
				xadc_temperature_status <= (xadc_do >>> 3'd4);
			end
			1'd1: begin
				xadc_vccint_status <= (xadc_do >>> 3'd4);
			end
			2'd2: begin
				xadc_vccaux_status <= (xadc_do >>> 3'd4);
			end
			3'd6: begin
				xadc_vccbram_status <= (xadc_do >>> 3'd4);
			end
		endcase
	end
	xadc_eoc_status <= ((xadc_eoc_status & (~xadc_eoc_we)) | xadc_eoc);
	xadc_eos_status <= ((xadc_eos_status & (~xadc_eos_we)) | xadc_eos);
	if (r_enable) begin
		if ((r_count < r_width)) begin
			user_rgb_led0_r <= 1'd1;
		end else begin
			user_rgb_led0_r <= 1'd0;
		end
		if ((r_count == (r_period - 1'd1))) begin
			r_count <= 1'd0;
		end else begin
			r_count <= (r_count + 1'd1);
		end
	end else begin
		r_count <= 1'd0;
		user_rgb_led0_r <= 1'd0;
	end
	if (g_enable) begin
		if ((g_count < g_width)) begin
			user_rgb_led0_g <= 1'd1;
		end else begin
			user_rgb_led0_g <= 1'd0;
		end
		if ((g_count == (g_period - 1'd1))) begin
			g_count <= 1'd0;
		end else begin
			g_count <= (g_count + 1'd1);
		end
	end else begin
		g_count <= 1'd0;
		user_rgb_led0_g <= 1'd0;
	end
	if (b_enable) begin
		if ((b_count < b_width)) begin
			user_rgb_led0_b <= 1'd1;
		end else begin
			user_rgb_led0_b <= 1'd0;
		end
		if ((b_count == (b_period - 1'd1))) begin
			b_count <= 1'd0;
		end else begin
			b_count <= (b_count + 1'd1);
		end
	end else begin
		b_count <= 1'd0;
		user_rgb_led0_b <= 1'd0;
	end
	adxl362_clk_divider1 <= (adxl362_clk_divider1 + 1'd1);
	if (adxl362_clk_rise) begin
		adxl362_spi_clk <= adxl362_clk_enable;
	end else begin
		if (adxl362_clk_fall) begin
			adxl362_clk_divider1 <= 1'd0;
			adxl362_spi_clk <= 1'd0;
		end
	end
	adxl362_spi_cs_n <= (~(adxl362_cs & (adxl362_xfer_enable | (adxl362_cs_mode == 1'd1))));
	if (adxl362_mosi_latch) begin
		adxl362_mosi_data <= adxl362_mosi;
		adxl362_mosi_sel <= 5'd31;
	end else begin
		if (adxl362_clk_fall) begin
			if (adxl362_xfer_enable) begin
				adxl362_spi_mosi <= sync_array_muxed;
			end
			adxl362_mosi_sel <= (adxl362_mosi_sel - 1'd1);
		end
	end
	if (adxl362_clk_rise) begin
		if (adxl362_loopback) begin
			adxl362_miso_data <= {adxl362_miso_data, adxl362_spi_mosi};
		end else begin
			adxl362_miso_data <= {adxl362_miso_data, adxl362_spi_miso};
		end
	end
	if (adxl362_miso_latch) begin
		adxl362_miso <= adxl362_miso_data;
	end
	subfragments_state <= subfragments_next_state;
	if (adxl362_count_next_value_ce) begin
		adxl362_count <= adxl362_count_next_value;
	end
	if (display_write_re) begin
		case (display_sel_storage)
			1'd0: begin
				display_values0 <= display_value_storage;
			end
			1'd1: begin
				display_values1 <= display_value_storage;
			end
			2'd2: begin
				display_values2 <= display_value_storage;
			end
			2'd3: begin
				display_values3 <= display_value_storage;
			end
			3'd4: begin
				display_values4 <= display_value_storage;
			end
			3'd5: begin
				display_values5 <= display_value_storage;
			end
		endcase
	end
	if (display_ce) begin
		display_cs2[1] <= display_cs2[0];
		display_cs2[2] <= display_cs2[1];
		display_cs2[3] <= display_cs2[2];
		display_cs2[4] <= display_cs2[3];
		display_cs2[5] <= display_cs2[4];
		display_cs2[0] <= display_cs2[5];
	end
	if (((~display_enable) | display_ce)) begin
		display_counter <= 17'd99999;
	end else begin
		display_counter <= (display_counter - 1'd1);
	end
	basesoc_state <= basesoc_next_state;
	case (basesoc_grant)
		1'd0: begin
			if ((~basesoc_request[0])) begin
				if (basesoc_request[1]) begin
					basesoc_grant <= 1'd1;
				end
			end
		end
		1'd1: begin
			if ((~basesoc_request[1])) begin
				if (basesoc_request[0]) begin
					basesoc_grant <= 1'd0;
				end
			end
		end
	endcase
	basesoc_slave_sel_r <= basesoc_slave_sel;
	if (basesoc_wait) begin
		if ((~basesoc_done)) begin
			basesoc_count <= (basesoc_count - 1'd1);
		end
	end else begin
		basesoc_count <= 20'd1000000;
	end
	basesoc_csr_bankarray_interface0_bank_bus_dat_r <= 1'd0;
	if (basesoc_csr_bankarray_csrbank0_sel) begin
		case (basesoc_csr_bankarray_interface0_bank_bus_adr[8:0])
			1'd0: begin
				basesoc_csr_bankarray_interface0_bank_bus_dat_r <= basesoc_csr_bankarray_csrbank0_control0_w;
			end
			1'd1: begin
				basesoc_csr_bankarray_interface0_bank_bus_dat_r <= basesoc_csr_bankarray_csrbank0_status_w;
			end
			2'd2: begin
				basesoc_csr_bankarray_interface0_bank_bus_dat_r <= basesoc_csr_bankarray_csrbank0_mosi0_w;
			end
			2'd3: begin
				basesoc_csr_bankarray_interface0_bank_bus_dat_r <= basesoc_csr_bankarray_csrbank0_miso_w;
			end
			3'd4: begin
				basesoc_csr_bankarray_interface0_bank_bus_dat_r <= basesoc_csr_bankarray_csrbank0_cs0_w;
			end
			3'd5: begin
				basesoc_csr_bankarray_interface0_bank_bus_dat_r <= basesoc_csr_bankarray_csrbank0_loopback0_w;
			end
		endcase
	end
	if (basesoc_csr_bankarray_csrbank0_control0_re) begin
		adxl362_control_storage[15:0] <= basesoc_csr_bankarray_csrbank0_control0_r;
	end
	adxl362_control_re <= basesoc_csr_bankarray_csrbank0_control0_re;
	adxl362_status_re <= basesoc_csr_bankarray_csrbank0_status_re;
	if (basesoc_csr_bankarray_csrbank0_mosi0_re) begin
		adxl362_mosi_storage[31:0] <= basesoc_csr_bankarray_csrbank0_mosi0_r;
	end
	adxl362_mosi_re <= basesoc_csr_bankarray_csrbank0_mosi0_re;
	adxl362_miso_re <= basesoc_csr_bankarray_csrbank0_miso_re;
	if (basesoc_csr_bankarray_csrbank0_cs0_re) begin
		adxl362_cs_storage[16:0] <= basesoc_csr_bankarray_csrbank0_cs0_r;
	end
	adxl362_cs_re <= basesoc_csr_bankarray_csrbank0_cs0_re;
	if (basesoc_csr_bankarray_csrbank0_loopback0_re) begin
		adxl362_loopback_storage <= basesoc_csr_bankarray_csrbank0_loopback0_r;
	end
	adxl362_loopback_re <= basesoc_csr_bankarray_csrbank0_loopback0_re;
	basesoc_csr_bankarray_interface1_bank_bus_dat_r <= 1'd0;
	if (basesoc_csr_bankarray_csrbank1_sel) begin
		case (basesoc_csr_bankarray_interface1_bank_bus_adr[8:0])
			1'd0: begin
				basesoc_csr_bankarray_interface1_bank_bus_dat_r <= basesoc_csr_bankarray_csrbank1_in_w;
			end
		endcase
	end
	buttons_re <= basesoc_csr_bankarray_csrbank1_in_re;
	basesoc_csr_bankarray_interface2_bank_bus_dat_r <= 1'd0;
	if (basesoc_csr_bankarray_csrbank2_sel) begin
		case (basesoc_csr_bankarray_interface2_bank_bus_adr[8:0])
			1'd0: begin
				basesoc_csr_bankarray_interface2_bank_bus_dat_r <= basesoc_csr_bankarray_csrbank2_reset0_w;
			end
			1'd1: begin
				basesoc_csr_bankarray_interface2_bank_bus_dat_r <= basesoc_csr_bankarray_csrbank2_scratch0_w;
			end
			2'd2: begin
				basesoc_csr_bankarray_interface2_bank_bus_dat_r <= basesoc_csr_bankarray_csrbank2_bus_errors_w;
			end
		endcase
	end
	if (basesoc_csr_bankarray_csrbank2_reset0_re) begin
		reset_storage[1:0] <= basesoc_csr_bankarray_csrbank2_reset0_r;
	end
	reset_re <= basesoc_csr_bankarray_csrbank2_reset0_re;
	if (basesoc_csr_bankarray_csrbank2_scratch0_re) begin
		scratch_storage[31:0] <= basesoc_csr_bankarray_csrbank2_scratch0_r;
	end
	scratch_re <= basesoc_csr_bankarray_csrbank2_scratch0_re;
	bus_errors_re <= basesoc_csr_bankarray_csrbank2_bus_errors_re;
	basesoc_csr_bankarray_interface3_bank_bus_dat_r <= 1'd0;
	if (basesoc_csr_bankarray_csrbank3_sel) begin
		case (basesoc_csr_bankarray_interface3_bank_bus_adr[8:0])
			1'd0: begin
				basesoc_csr_bankarray_interface3_bank_bus_dat_r <= basesoc_csr_bankarray_csrbank3_sel0_w;
			end
			1'd1: begin
				basesoc_csr_bankarray_interface3_bank_bus_dat_r <= basesoc_csr_bankarray_csrbank3_value0_w;
			end
			2'd2: begin
				basesoc_csr_bankarray_interface3_bank_bus_dat_r <= display_write_w;
			end
		endcase
	end
	if (basesoc_csr_bankarray_csrbank3_sel0_re) begin
		display_sel_storage[3:0] <= basesoc_csr_bankarray_csrbank3_sel0_r;
	end
	display_sel_re <= basesoc_csr_bankarray_csrbank3_sel0_re;
	if (basesoc_csr_bankarray_csrbank3_value0_re) begin
		display_value_storage[3:0] <= basesoc_csr_bankarray_csrbank3_value0_r;
	end
	display_value_re <= basesoc_csr_bankarray_csrbank3_value0_re;
	basesoc_csr_bankarray_interface4_bank_bus_dat_r <= 1'd0;
	if (basesoc_csr_bankarray_csrbank4_sel) begin
		case (basesoc_csr_bankarray_interface4_bank_bus_adr[8:0])
			1'd0: begin
				basesoc_csr_bankarray_interface4_bank_bus_dat_r <= basesoc_csr_bankarray_csrbank4_id1_w;
			end
			1'd1: begin
				basesoc_csr_bankarray_interface4_bank_bus_dat_r <= basesoc_csr_bankarray_csrbank4_id0_w;
			end
		endcase
	end
	dna_re <= basesoc_csr_bankarray_csrbank4_id0_re;
	basesoc_csr_bankarray_sel_r <= basesoc_csr_bankarray_sel;
	basesoc_csr_bankarray_interface5_bank_bus_dat_r <= 1'd0;
	if (basesoc_csr_bankarray_csrbank5_sel) begin
		case (basesoc_csr_bankarray_interface5_bank_bus_adr[8:0])
			1'd0: begin
				basesoc_csr_bankarray_interface5_bank_bus_dat_r <= basesoc_csr_bankarray_csrbank5_out0_w;
			end
		endcase
	end
	if (basesoc_csr_bankarray_csrbank5_out0_re) begin
		leds_storage[15:0] <= basesoc_csr_bankarray_csrbank5_out0_r;
	end
	leds_re <= basesoc_csr_bankarray_csrbank5_out0_re;
	basesoc_csr_bankarray_interface6_bank_bus_dat_r <= 1'd0;
	if (basesoc_csr_bankarray_csrbank6_sel) begin
		case (basesoc_csr_bankarray_interface6_bank_bus_adr[8:0])
			1'd0: begin
				basesoc_csr_bankarray_interface6_bank_bus_dat_r <= basesoc_csr_bankarray_csrbank6_r_enable0_w;
			end
			1'd1: begin
				basesoc_csr_bankarray_interface6_bank_bus_dat_r <= basesoc_csr_bankarray_csrbank6_r_width0_w;
			end
			2'd2: begin
				basesoc_csr_bankarray_interface6_bank_bus_dat_r <= basesoc_csr_bankarray_csrbank6_r_period0_w;
			end
			2'd3: begin
				basesoc_csr_bankarray_interface6_bank_bus_dat_r <= basesoc_csr_bankarray_csrbank6_g_enable0_w;
			end
			3'd4: begin
				basesoc_csr_bankarray_interface6_bank_bus_dat_r <= basesoc_csr_bankarray_csrbank6_g_width0_w;
			end
			3'd5: begin
				basesoc_csr_bankarray_interface6_bank_bus_dat_r <= basesoc_csr_bankarray_csrbank6_g_period0_w;
			end
			3'd6: begin
				basesoc_csr_bankarray_interface6_bank_bus_dat_r <= basesoc_csr_bankarray_csrbank6_b_enable0_w;
			end
			3'd7: begin
				basesoc_csr_bankarray_interface6_bank_bus_dat_r <= basesoc_csr_bankarray_csrbank6_b_width0_w;
			end
			4'd8: begin
				basesoc_csr_bankarray_interface6_bank_bus_dat_r <= basesoc_csr_bankarray_csrbank6_b_period0_w;
			end
		endcase
	end
	if (basesoc_csr_bankarray_csrbank6_r_enable0_re) begin
		r_enable_storage <= basesoc_csr_bankarray_csrbank6_r_enable0_r;
	end
	r_enable_re <= basesoc_csr_bankarray_csrbank6_r_enable0_re;
	if (basesoc_csr_bankarray_csrbank6_r_width0_re) begin
		r_width_storage[31:0] <= basesoc_csr_bankarray_csrbank6_r_width0_r;
	end
	r_width_re <= basesoc_csr_bankarray_csrbank6_r_width0_re;
	if (basesoc_csr_bankarray_csrbank6_r_period0_re) begin
		r_period_storage[31:0] <= basesoc_csr_bankarray_csrbank6_r_period0_r;
	end
	r_period_re <= basesoc_csr_bankarray_csrbank6_r_period0_re;
	if (basesoc_csr_bankarray_csrbank6_g_enable0_re) begin
		g_enable_storage <= basesoc_csr_bankarray_csrbank6_g_enable0_r;
	end
	g_enable_re <= basesoc_csr_bankarray_csrbank6_g_enable0_re;
	if (basesoc_csr_bankarray_csrbank6_g_width0_re) begin
		g_width_storage[31:0] <= basesoc_csr_bankarray_csrbank6_g_width0_r;
	end
	g_width_re <= basesoc_csr_bankarray_csrbank6_g_width0_re;
	if (basesoc_csr_bankarray_csrbank6_g_period0_re) begin
		g_period_storage[31:0] <= basesoc_csr_bankarray_csrbank6_g_period0_r;
	end
	g_period_re <= basesoc_csr_bankarray_csrbank6_g_period0_re;
	if (basesoc_csr_bankarray_csrbank6_b_enable0_re) begin
		b_enable_storage <= basesoc_csr_bankarray_csrbank6_b_enable0_r;
	end
	b_enable_re <= basesoc_csr_bankarray_csrbank6_b_enable0_re;
	if (basesoc_csr_bankarray_csrbank6_b_width0_re) begin
		b_width_storage[31:0] <= basesoc_csr_bankarray_csrbank6_b_width0_r;
	end
	b_width_re <= basesoc_csr_bankarray_csrbank6_b_width0_re;
	if (basesoc_csr_bankarray_csrbank6_b_period0_re) begin
		b_period_storage[31:0] <= basesoc_csr_bankarray_csrbank6_b_period0_r;
	end
	b_period_re <= basesoc_csr_bankarray_csrbank6_b_period0_re;
	basesoc_csr_bankarray_interface7_bank_bus_dat_r <= 1'd0;
	if (basesoc_csr_bankarray_csrbank7_sel) begin
		case (basesoc_csr_bankarray_interface7_bank_bus_adr[8:0])
			1'd0: begin
				basesoc_csr_bankarray_interface7_bank_bus_dat_r <= basesoc_csr_bankarray_csrbank7_in_w;
			end
		endcase
	end
	switches_re <= basesoc_csr_bankarray_csrbank7_in_re;
	basesoc_csr_bankarray_interface8_bank_bus_dat_r <= 1'd0;
	if (basesoc_csr_bankarray_csrbank8_sel) begin
		case (basesoc_csr_bankarray_interface8_bank_bus_adr[8:0])
			1'd0: begin
				basesoc_csr_bankarray_interface8_bank_bus_dat_r <= basesoc_csr_bankarray_csrbank8_load0_w;
			end
			1'd1: begin
				basesoc_csr_bankarray_interface8_bank_bus_dat_r <= basesoc_csr_bankarray_csrbank8_reload0_w;
			end
			2'd2: begin
				basesoc_csr_bankarray_interface8_bank_bus_dat_r <= basesoc_csr_bankarray_csrbank8_en0_w;
			end
			2'd3: begin
				basesoc_csr_bankarray_interface8_bank_bus_dat_r <= basesoc_csr_bankarray_csrbank8_update_value0_w;
			end
			3'd4: begin
				basesoc_csr_bankarray_interface8_bank_bus_dat_r <= basesoc_csr_bankarray_csrbank8_value_w;
			end
			3'd5: begin
				basesoc_csr_bankarray_interface8_bank_bus_dat_r <= basesoc_csr_bankarray_csrbank8_ev_status_w;
			end
			3'd6: begin
				basesoc_csr_bankarray_interface8_bank_bus_dat_r <= basesoc_csr_bankarray_csrbank8_ev_pending_w;
			end
			3'd7: begin
				basesoc_csr_bankarray_interface8_bank_bus_dat_r <= basesoc_csr_bankarray_csrbank8_ev_enable0_w;
			end
		endcase
	end
	if (basesoc_csr_bankarray_csrbank8_load0_re) begin
		timer_load_storage[31:0] <= basesoc_csr_bankarray_csrbank8_load0_r;
	end
	timer_load_re <= basesoc_csr_bankarray_csrbank8_load0_re;
	if (basesoc_csr_bankarray_csrbank8_reload0_re) begin
		timer_reload_storage[31:0] <= basesoc_csr_bankarray_csrbank8_reload0_r;
	end
	timer_reload_re <= basesoc_csr_bankarray_csrbank8_reload0_re;
	if (basesoc_csr_bankarray_csrbank8_en0_re) begin
		timer_en_storage <= basesoc_csr_bankarray_csrbank8_en0_r;
	end
	timer_en_re <= basesoc_csr_bankarray_csrbank8_en0_re;
	if (basesoc_csr_bankarray_csrbank8_update_value0_re) begin
		timer_update_value_storage <= basesoc_csr_bankarray_csrbank8_update_value0_r;
	end
	timer_update_value_re <= basesoc_csr_bankarray_csrbank8_update_value0_re;
	timer_value_re <= basesoc_csr_bankarray_csrbank8_value_re;
	timer_status_re <= basesoc_csr_bankarray_csrbank8_ev_status_re;
	if (basesoc_csr_bankarray_csrbank8_ev_pending_re) begin
		timer_pending_r <= basesoc_csr_bankarray_csrbank8_ev_pending_r;
	end
	timer_pending_re <= basesoc_csr_bankarray_csrbank8_ev_pending_re;
	if (basesoc_csr_bankarray_csrbank8_ev_enable0_re) begin
		timer_enable_storage <= basesoc_csr_bankarray_csrbank8_ev_enable0_r;
	end
	timer_enable_re <= basesoc_csr_bankarray_csrbank8_ev_enable0_re;
	basesoc_csr_bankarray_interface9_bank_bus_dat_r <= 1'd0;
	if (basesoc_csr_bankarray_csrbank9_sel) begin
		case (basesoc_csr_bankarray_interface9_bank_bus_adr[8:0])
			1'd0: begin
				basesoc_csr_bankarray_interface9_bank_bus_dat_r <= uart_rxtx_w;
			end
			1'd1: begin
				basesoc_csr_bankarray_interface9_bank_bus_dat_r <= basesoc_csr_bankarray_csrbank9_txfull_w;
			end
			2'd2: begin
				basesoc_csr_bankarray_interface9_bank_bus_dat_r <= basesoc_csr_bankarray_csrbank9_rxempty_w;
			end
			2'd3: begin
				basesoc_csr_bankarray_interface9_bank_bus_dat_r <= basesoc_csr_bankarray_csrbank9_ev_status_w;
			end
			3'd4: begin
				basesoc_csr_bankarray_interface9_bank_bus_dat_r <= basesoc_csr_bankarray_csrbank9_ev_pending_w;
			end
			3'd5: begin
				basesoc_csr_bankarray_interface9_bank_bus_dat_r <= basesoc_csr_bankarray_csrbank9_ev_enable0_w;
			end
			3'd6: begin
				basesoc_csr_bankarray_interface9_bank_bus_dat_r <= basesoc_csr_bankarray_csrbank9_txempty_w;
			end
			3'd7: begin
				basesoc_csr_bankarray_interface9_bank_bus_dat_r <= basesoc_csr_bankarray_csrbank9_rxfull_w;
			end
		endcase
	end
	uart_txfull_re <= basesoc_csr_bankarray_csrbank9_txfull_re;
	uart_rxempty_re <= basesoc_csr_bankarray_csrbank9_rxempty_re;
	uart_status_re <= basesoc_csr_bankarray_csrbank9_ev_status_re;
	if (basesoc_csr_bankarray_csrbank9_ev_pending_re) begin
		uart_pending_r[1:0] <= basesoc_csr_bankarray_csrbank9_ev_pending_r;
	end
	uart_pending_re <= basesoc_csr_bankarray_csrbank9_ev_pending_re;
	if (basesoc_csr_bankarray_csrbank9_ev_enable0_re) begin
		uart_enable_storage[1:0] <= basesoc_csr_bankarray_csrbank9_ev_enable0_r;
	end
	uart_enable_re <= basesoc_csr_bankarray_csrbank9_ev_enable0_re;
	uart_txempty_re <= basesoc_csr_bankarray_csrbank9_txempty_re;
	uart_rxfull_re <= basesoc_csr_bankarray_csrbank9_rxfull_re;
	basesoc_csr_bankarray_interface10_bank_bus_dat_r <= 1'd0;
	if (basesoc_csr_bankarray_csrbank10_sel) begin
		case (basesoc_csr_bankarray_interface10_bank_bus_adr[8:0])
			1'd0: begin
				basesoc_csr_bankarray_interface10_bank_bus_dat_r <= basesoc_csr_bankarray_csrbank10_temperature_w;
			end
			1'd1: begin
				basesoc_csr_bankarray_interface10_bank_bus_dat_r <= basesoc_csr_bankarray_csrbank10_vccint_w;
			end
			2'd2: begin
				basesoc_csr_bankarray_interface10_bank_bus_dat_r <= basesoc_csr_bankarray_csrbank10_vccaux_w;
			end
			2'd3: begin
				basesoc_csr_bankarray_interface10_bank_bus_dat_r <= basesoc_csr_bankarray_csrbank10_vccbram_w;
			end
			3'd4: begin
				basesoc_csr_bankarray_interface10_bank_bus_dat_r <= basesoc_csr_bankarray_csrbank10_eoc_w;
			end
			3'd5: begin
				basesoc_csr_bankarray_interface10_bank_bus_dat_r <= basesoc_csr_bankarray_csrbank10_eos_w;
			end
		endcase
	end
	xadc_temperature_re <= basesoc_csr_bankarray_csrbank10_temperature_re;
	xadc_vccint_re <= basesoc_csr_bankarray_csrbank10_vccint_re;
	xadc_vccaux_re <= basesoc_csr_bankarray_csrbank10_vccaux_re;
	xadc_vccbram_re <= basesoc_csr_bankarray_csrbank10_vccbram_re;
	xadc_eoc_re <= basesoc_csr_bankarray_csrbank10_eoc_re;
	xadc_eos_re <= basesoc_csr_bankarray_csrbank10_eos_re;
	if (sys_rst) begin
		reset_storage <= 2'd0;
		reset_re <= 1'd0;
		scratch_storage <= 32'd305419896;
		scratch_re <= 1'd0;
		bus_errors_re <= 1'd0;
		bus_errors <= 32'd0;
		ram_bus_ack <= 1'd0;
		interface0_ram_bus_ack <= 1'd0;
		interface1_ram_bus_ack <= 1'd0;
		serial_tx <= 1'd1;
		tx_tick <= 1'd0;
		rx_tick <= 1'd0;
		rx_rx_d <= 1'd0;
		uart_txfull_re <= 1'd0;
		uart_rxempty_re <= 1'd0;
		uart_tx_pending <= 1'd0;
		uart_tx_trigger_d <= 1'd0;
		uart_rx_pending <= 1'd0;
		uart_rx_trigger_d <= 1'd0;
		uart_status_re <= 1'd0;
		uart_pending_re <= 1'd0;
		uart_pending_r <= 2'd0;
		uart_enable_storage <= 2'd0;
		uart_enable_re <= 1'd0;
		uart_txempty_re <= 1'd0;
		uart_rxfull_re <= 1'd0;
		uart_tx_fifo_readable <= 1'd0;
		uart_tx_fifo_level0 <= 5'd0;
		uart_tx_fifo_produce <= 4'd0;
		uart_tx_fifo_consume <= 4'd0;
		uart_rx_fifo_readable <= 1'd0;
		uart_rx_fifo_level0 <= 5'd0;
		uart_rx_fifo_produce <= 4'd0;
		uart_rx_fifo_consume <= 4'd0;
		timer_load_storage <= 32'd0;
		timer_load_re <= 1'd0;
		timer_reload_storage <= 32'd0;
		timer_reload_re <= 1'd0;
		timer_en_storage <= 1'd0;
		timer_en_re <= 1'd0;
		timer_update_value_storage <= 1'd0;
		timer_update_value_re <= 1'd0;
		timer_value_status <= 32'd0;
		timer_value_re <= 1'd0;
		timer_zero_pending <= 1'd0;
		timer_zero_trigger_d <= 1'd0;
		timer_status_re <= 1'd0;
		timer_pending_re <= 1'd0;
		timer_pending_r <= 1'd0;
		timer_enable_storage <= 1'd0;
		timer_enable_re <= 1'd0;
		timer_value <= 32'd0;
		dna_status <= 57'd0;
		dna_re <= 1'd0;
		dna_count <= 7'd0;
		xadc_temperature_status <= 12'd0;
		xadc_temperature_re <= 1'd0;
		xadc_vccint_status <= 12'd0;
		xadc_vccint_re <= 1'd0;
		xadc_vccaux_status <= 12'd0;
		xadc_vccaux_re <= 1'd0;
		xadc_vccbram_status <= 12'd0;
		xadc_vccbram_re <= 1'd0;
		xadc_eoc_status <= 1'd0;
		xadc_eoc_re <= 1'd0;
		xadc_eos_status <= 1'd0;
		xadc_eos_re <= 1'd0;
		leds_storage <= 16'd0;
		leds_re <= 1'd0;
		switches_re <= 1'd0;
		buttons_re <= 1'd0;
		user_rgb_led0_r <= 1'd0;
		user_rgb_led0_g <= 1'd0;
		user_rgb_led0_b <= 1'd0;
		r_enable_storage <= 1'd0;
		r_enable_re <= 1'd0;
		r_width_storage <= 32'd0;
		r_width_re <= 1'd0;
		r_period_storage <= 32'd0;
		r_period_re <= 1'd0;
		r_count <= 32'd0;
		g_enable_storage <= 1'd0;
		g_enable_re <= 1'd0;
		g_width_storage <= 32'd0;
		g_width_re <= 1'd0;
		g_period_storage <= 32'd0;
		g_period_re <= 1'd0;
		g_count <= 32'd0;
		b_enable_storage <= 1'd0;
		b_enable_re <= 1'd0;
		b_width_storage <= 32'd0;
		b_width_re <= 1'd0;
		b_period_storage <= 32'd0;
		b_period_re <= 1'd0;
		b_count <= 32'd0;
		adxl362_spi_cs_n <= 1'd0;
		adxl362_spi_clk <= 1'd0;
		adxl362_spi_mosi <= 1'd0;
		adxl362_miso <= 32'd0;
		adxl362_control_storage <= 16'd0;
		adxl362_control_re <= 1'd0;
		adxl362_status_re <= 1'd0;
		adxl362_mosi_re <= 1'd0;
		adxl362_miso_re <= 1'd0;
		adxl362_cs_storage <= 17'd1;
		adxl362_cs_re <= 1'd0;
		adxl362_loopback_storage <= 1'd0;
		adxl362_loopback_re <= 1'd0;
		adxl362_count <= 5'd0;
		adxl362_clk_divider1 <= 16'd0;
		adxl362_mosi_data <= 32'd0;
		adxl362_mosi_sel <= 5'd0;
		adxl362_miso_data <= 32'd0;
		display_sel_storage <= 4'd0;
		display_sel_re <= 1'd0;
		display_value_storage <= 4'd0;
		display_value_re <= 1'd0;
		display_values0 <= 5'd0;
		display_values1 <= 5'd0;
		display_values2 <= 5'd0;
		display_values3 <= 5'd0;
		display_values4 <= 5'd0;
		display_values5 <= 5'd0;
		display_counter <= 17'd0;
		display_cs2 <= 6'd1;
		subfragments_rs232phytx_state <= 1'd0;
		subfragments_rs232phyrx_state <= 1'd0;
		subfragments_state <= 2'd0;
		basesoc_grant <= 1'd0;
		basesoc_slave_sel_r <= 4'd0;
		basesoc_count <= 20'd1000000;
		basesoc_csr_bankarray_sel_r <= 1'd0;
		basesoc_state <= 1'd0;
	end
	xilinxmultiregimpl0_regs0 <= serial_rx;
	xilinxmultiregimpl0_regs1 <= xilinxmultiregimpl0_regs0;
	xilinxmultiregimpl1_regs0 <= {user_sw15, user_sw14, user_sw13, user_sw12, user_sw11, user_sw10, user_sw9, user_sw8, user_sw7, user_sw6, user_sw5, user_sw4, user_sw3, user_sw2, user_sw1, user_sw0};
	xilinxmultiregimpl1_regs1 <= xilinxmultiregimpl1_regs0;
	xilinxmultiregimpl2_regs0 <= {user_btn4, user_btn3, user_btn2, user_btn1, user_btn0};
	xilinxmultiregimpl2_regs1 <= xilinxmultiregimpl2_regs0;
end


//------------------------------------------------------------------------------
// Specialized Logic
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Memory rom: 5361-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: ---- | 
reg [31:0] rom[0:5360];
initial begin
	$readmemh("top_rom.init", rom);
end
reg [31:0] rom_dat0;
always @(posedge sys_clk) begin
	rom_dat0 <= rom[adr];
end
assign dat_r = rom_dat0;


//------------------------------------------------------------------------------
// Memory sram: 2048-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [31:0] sram[0:2047];
initial begin
	$readmemh("top_sram.init", sram);
end
reg [10:0] sram_adr0;
always @(posedge sys_clk) begin
	if (sram0_we[0])
		sram[sram0_adr][7:0] <= sram0_dat_w[7:0];
	if (sram0_we[1])
		sram[sram0_adr][15:8] <= sram0_dat_w[15:8];
	if (sram0_we[2])
		sram[sram0_adr][23:16] <= sram0_dat_w[23:16];
	if (sram0_we[3])
		sram[sram0_adr][31:24] <= sram0_dat_w[31:24];
	sram_adr0 <= sram0_adr;
end
assign sram0_dat_r = sram[sram_adr0];


//------------------------------------------------------------------------------
// Memory main_ram: 4096-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [31:0] main_ram[0:4095];
initial begin
	$readmemh("top_main_ram.init", main_ram);
end
reg [11:0] main_ram_adr0;
always @(posedge sys_clk) begin
	if (sram1_we[0])
		main_ram[sram1_adr][7:0] <= sram1_dat_w[7:0];
	if (sram1_we[1])
		main_ram[sram1_adr][15:8] <= sram1_dat_w[15:8];
	if (sram1_we[2])
		main_ram[sram1_adr][23:16] <= sram1_dat_w[23:16];
	if (sram1_we[3])
		main_ram[sram1_adr][31:24] <= sram1_dat_w[31:24];
	main_ram_adr0 <= sram1_adr;
end
assign sram1_dat_r = main_ram[main_ram_adr0];


//------------------------------------------------------------------------------
// Memory mem: 39-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: ---- | 
reg [7:0] mem[0:38];
initial begin
	$readmemh("top_mem.init", mem);
end
reg [5:0] mem_adr0;
always @(posedge sys_clk) begin
	mem_adr0 <= basesoc_csr_bankarray_adr;
end
assign basesoc_csr_bankarray_dat_r = mem[mem_adr0];


//------------------------------------------------------------------------------
// Memory storage: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage[0:15];
reg [9:0] storage_dat0;
reg [9:0] storage_dat1;
always @(posedge sys_clk) begin
	if (uart_tx_fifo_wrport_we)
		storage[uart_tx_fifo_wrport_adr] <= uart_tx_fifo_wrport_dat_w;
	storage_dat0 <= storage[uart_tx_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
	if (uart_tx_fifo_rdport_re)
		storage_dat1 <= storage[uart_tx_fifo_rdport_adr];
end
assign uart_tx_fifo_wrport_dat_r = storage_dat0;
assign uart_tx_fifo_rdport_dat_r = storage_dat1;


//------------------------------------------------------------------------------
// Memory storage_1: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage_1[0:15];
reg [9:0] storage_1_dat0;
reg [9:0] storage_1_dat1;
always @(posedge sys_clk) begin
	if (uart_rx_fifo_wrport_we)
		storage_1[uart_rx_fifo_wrport_adr] <= uart_rx_fifo_wrport_dat_w;
	storage_1_dat0 <= storage_1[uart_rx_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
	if (uart_rx_fifo_rdport_re)
		storage_1_dat1 <= storage_1[uart_rx_fifo_rdport_adr];
end
assign uart_rx_fifo_wrport_dat_r = storage_1_dat0;
assign uart_rx_fifo_rdport_dat_r = storage_1_dat1;


DNA_PORT DNA_PORT(
	.CLK(dna_clk),
	.DIN(dna_status[56]),
	.READ((dna_count < 2'd2)),
	.SHIFT(1'd1),
	.DOUT(dna_do)
);

XADC #(
	.INIT_40(16'd36864),
	.INIT_41(14'd12016),
	.INIT_42(11'd1024),
	.INIT_48(15'd18177),
	.INIT_49(4'd15),
	.INIT_4A(15'd18176),
	.INIT_4B(1'd0),
	.INIT_4C(1'd0),
	.INIT_4D(1'd0),
	.INIT_4E(1'd0),
	.INIT_4F(1'd0),
	.INIT_50(16'd46573),
	.INIT_51(15'd22937),
	.INIT_52(16'd41287),
	.INIT_53(16'd56797),
	.INIT_54(16'd43322),
	.INIT_55(15'd20753),
	.INIT_56(16'd37355),
	.INIT_57(16'd44622),
	.INIT_58(15'd22937),
	.INIT_5C(15'd20753)
) XADC (
	.CONVST(1'd0),
	.CONVSTCLK(1'd0),
	.DADDR(xadc_dadr),
	.DCLK(sys_clk),
	.DEN(xadc_den),
	.DI(xadc_di),
	.DWE(xadc_dwe),
	.RESET(sys_rst),
	.VAUXN(1'd0),
	.VAUXP(1'd0),
	.VN(1'd0),
	.VP(1'd0),
	.ALM(xadc_alarm),
	.BUSY(xadc_busy),
	.CHANNEL(xadc_channel),
	.DO(xadc_do),
	.DRDY(xadc_drdy),
	.EOC(xadc_eoc),
	.EOS(xadc_eos),
	.OT(xadc_ot)
);

VexRiscv VexRiscv(
	.clk(sys_clk),
	.dBusWishbone_ACK(dbus_ack),
	.dBusWishbone_DAT_MISO(dbus_dat_r),
	.dBusWishbone_ERR(dbus_err),
	.externalInterruptArray(interrupt),
	.externalResetVector(vexriscv),
	.iBusWishbone_ACK(ibus_ack),
	.iBusWishbone_DAT_MISO(ibus_dat_r),
	.iBusWishbone_ERR(ibus_err),
	.reset((sys_rst | reset)),
	.softwareInterrupt(1'd0),
	.timerInterrupt(1'd0),
	.dBusWishbone_ADR(dbus_adr),
	.dBusWishbone_BTE(dbus_bte),
	.dBusWishbone_CTI(dbus_cti),
	.dBusWishbone_CYC(dbus_cyc),
	.dBusWishbone_DAT_MOSI(dbus_dat_w),
	.dBusWishbone_SEL(dbus_sel),
	.dBusWishbone_STB(dbus_stb),
	.dBusWishbone_WE(dbus_we),
	.iBusWishbone_ADR(ibus_adr),
	.iBusWishbone_BTE(ibus_bte),
	.iBusWishbone_CTI(ibus_cti),
	.iBusWishbone_CYC(ibus_cyc),
	.iBusWishbone_DAT_MOSI(ibus_dat_w),
	.iBusWishbone_SEL(ibus_sel),
	.iBusWishbone_STB(ibus_stb),
	.iBusWishbone_WE(ibus_we)
);

endmodule

// -----------------------------------------------------------------------------
//  Auto-Generated by LiteX on 2022-05-23 21:50:27.
//------------------------------------------------------------------------------
