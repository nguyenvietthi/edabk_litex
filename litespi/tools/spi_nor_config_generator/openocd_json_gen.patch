From: Jan Kowalewski <jkowalewski@antmicro.com>
Date: Mon, 23 Mar 2020 17:46:26 +0100
Subject: [PATCH] Implement extracting SPI NOR configurations as JSON

---
 src/flash/nor/spi.c  | 62 +++++++++++++++++------------------
 src/helper/options.c | 78 ++++++++++++++++++++++++++++++++++++++++++--
 2 files changed, 107 insertions(+), 33 deletions(-)

diff --git a/src/flash/nor/spi.c b/src/flash/nor/spi.c
index af72ffc4..aab601ae 100644
--- a/src/flash/nor/spi.c
+++ b/src/flash/nor/spi.c
@@ -62,52 +62,52 @@ const struct flash_device flash_devices[] = {
 	FLASH_ID("cyp s25fl064l",       0x03, 0x00, 0x02, 0xd8, 0xc7, 0x00176001, 0x100, 0x10000, 0x800000),
 	FLASH_ID("cyp s25fl128l",       0x03, 0x00, 0x02, 0xd8, 0xc7, 0x00186001, 0x100, 0x10000, 0x1000000),
 	FLASH_ID("cyp s25fl256l",       0x13, 0x00, 0x12, 0xdc, 0xc7, 0x00196001, 0x100, 0x10000, 0x2000000),
-	FLASH_ID("atmel 25f512",        0x03, 0x00, 0x02, 0x52, 0xc7, 0x0065001f, 0x80,  0x8000,  0x10000),
-	FLASH_ID("atmel 25f1024",       0x03, 0x00, 0x02, 0x52, 0x62, 0x0060001f, 0x100, 0x8000,  0x20000),
-	FLASH_ID("atmel 25f2048",       0x03, 0x00, 0x02, 0x52, 0x62, 0x0063001f, 0x100, 0x10000, 0x40000),
-	FLASH_ID("atmel 25f4096",       0x03, 0x00, 0x02, 0x52, 0x62, 0x0064001f, 0x100, 0x10000, 0x80000),
-	FLASH_ID("atmel 25fs040",       0x03, 0x00, 0x02, 0xd7, 0xc7, 0x0004661f, 0x100, 0x10000, 0x80000),
+	FLASH_ID("atmel at25f512",        0x03, 0x00, 0x02, 0x52, 0xc7, 0x0065001f, 0x80,  0x8000,  0x10000),
+	FLASH_ID("atmel at25f1024",       0x03, 0x00, 0x02, 0x52, 0x62, 0x0060001f, 0x100, 0x8000,  0x20000),
+	FLASH_ID("atmel at25f2048",       0x03, 0x00, 0x02, 0x52, 0x62, 0x0063001f, 0x100, 0x10000, 0x40000),
+	FLASH_ID("atmel at25f4096",       0x03, 0x00, 0x02, 0x52, 0x62, 0x0064001f, 0x100, 0x10000, 0x80000),
+	FLASH_ID("atmel at25fs040",       0x03, 0x00, 0x02, 0xd7, 0xc7, 0x0004661f, 0x100, 0x10000, 0x80000),
 	FLASH_ID("adesto 25df081a",     0x03, 0x00, 0x02, 0xd8, 0xc7, 0x0001451f, 0x100, 0x10000, 0x100000),
-	FLASH_ID("mac 25l512",          0x03, 0x00, 0x02, 0xd8, 0xc7, 0x001020c2, 0x010, 0x10000, 0x10000),
-	FLASH_ID("mac 25l1005",         0x03, 0x00, 0x02, 0xd8, 0xc7, 0x001120c2, 0x010, 0x10000, 0x20000),
-	FLASH_ID("mac 25l2005",         0x03, 0x00, 0x02, 0xd8, 0xc7, 0x001220c2, 0x010, 0x10000, 0x40000),
-	FLASH_ID("mac 25l4005",         0x03, 0x00, 0x02, 0xd8, 0xc7, 0x001320c2, 0x010, 0x10000, 0x80000),
-	FLASH_ID("mac 25l8005",         0x03, 0x00, 0x02, 0xd8, 0xc7, 0x001420c2, 0x010, 0x10000, 0x100000),
-	FLASH_ID("mac 25l1605",         0x03, 0x00, 0x02, 0xd8, 0xc7, 0x001520c2, 0x100, 0x10000, 0x200000),
-	FLASH_ID("mac 25l3205",         0x03, 0x00, 0x02, 0xd8, 0xc7, 0x001620c2, 0x100, 0x10000, 0x400000),
-	FLASH_ID("mac 25l6405",         0x03, 0x00, 0x02, 0xd8, 0xc7, 0x001720c2, 0x100, 0x10000, 0x800000),
-	FLASH_ID("mac 25l12845",        0x03, 0xeb, 0x02, 0xd8, 0xc7, 0x001820c2, 0x100, 0x10000, 0x1000000),
-	FLASH_ID("mac 25l25645",        0x13, 0xec, 0x12, 0xdc, 0xc7, 0x001920c2, 0x100, 0x10000, 0x2000000),
-	FLASH_ID("mac 25l51245",        0x13, 0xec, 0x12, 0xdc, 0xc7, 0x001a20c2, 0x100, 0x10000, 0x4000000),
-	FLASH_ID("mac 25lm51245",       0x13, 0xec, 0x12, 0xdc, 0xc7, 0x003a85c2, 0x100, 0x10000, 0x4000000),
-	FLASH_ID("mac 25r512f",         0x03, 0x00, 0x02, 0xd8, 0xc7, 0x001028c2, 0x100, 0x10000, 0x10000),
-	FLASH_ID("mac 25r1035f",        0x03, 0x00, 0x02, 0xd8, 0xc7, 0x001128c2, 0x100, 0x10000, 0x20000),
-	FLASH_ID("mac 25r2035f",        0x03, 0x00, 0x02, 0xd8, 0xc7, 0x001228c2, 0x100, 0x10000, 0x40000),
-	FLASH_ID("mac 25r4035f",        0x03, 0x00, 0x02, 0xd8, 0xc7, 0x001328c2, 0x100, 0x10000, 0x80000),
-	FLASH_ID("mac 25r8035f",        0x03, 0x00, 0x02, 0xd8, 0xc7, 0x001428c2, 0x100, 0x10000, 0x100000),
-	FLASH_ID("mac 25r1635f",        0x03, 0x00, 0x02, 0xd8, 0xc7, 0x001528c2, 0x100, 0x10000, 0x200000),
-	FLASH_ID("mac 25r3235f",        0x03, 0x00, 0x02, 0xd8, 0xc7, 0x001628c2, 0x100, 0x10000, 0x400000),
-	FLASH_ID("mac 25r6435f",        0x03, 0x00, 0x02, 0xd8, 0xc7, 0x001728c2, 0x100, 0x10000, 0x800000),
+	FLASH_ID("mac mx25l512",          0x03, 0x00, 0x02, 0xd8, 0xc7, 0x001020c2, 0x010, 0x10000, 0x10000),
+	FLASH_ID("mac mx25l1005",         0x03, 0x00, 0x02, 0xd8, 0xc7, 0x001120c2, 0x010, 0x10000, 0x20000),
+	FLASH_ID("mac mx25l2005",         0x03, 0x00, 0x02, 0xd8, 0xc7, 0x001220c2, 0x010, 0x10000, 0x40000),
+	FLASH_ID("mac mx25l4005",         0x03, 0x00, 0x02, 0xd8, 0xc7, 0x001320c2, 0x010, 0x10000, 0x80000),
+	FLASH_ID("mac mx25l8005",         0x03, 0x00, 0x02, 0xd8, 0xc7, 0x001420c2, 0x010, 0x10000, 0x100000),
+	FLASH_ID("mac mx25l1605",         0x03, 0x00, 0x02, 0xd8, 0xc7, 0x001520c2, 0x100, 0x10000, 0x200000),
+	FLASH_ID("mac mx25l3205",         0x03, 0x00, 0x02, 0xd8, 0xc7, 0x001620c2, 0x100, 0x10000, 0x400000),
+	FLASH_ID("mac mx25l6405",         0x03, 0x00, 0x02, 0xd8, 0xc7, 0x001720c2, 0x100, 0x10000, 0x800000),
+	FLASH_ID("mac mx25l12845",        0x03, 0xeb, 0x02, 0xd8, 0xc7, 0x001820c2, 0x100, 0x10000, 0x1000000),
+	FLASH_ID("mac mx25l25645",        0x13, 0xec, 0x12, 0xdc, 0xc7, 0x001920c2, 0x100, 0x10000, 0x2000000),
+	FLASH_ID("mac mx25l51245",        0x13, 0xec, 0x12, 0xdc, 0xc7, 0x001a20c2, 0x100, 0x10000, 0x4000000),
+	FLASH_ID("mac mx25lm51245",       0x13, 0xec, 0x12, 0xdc, 0xc7, 0x003a85c2, 0x100, 0x10000, 0x4000000),
+	FLASH_ID("mac mx25r512f",         0x03, 0x00, 0x02, 0xd8, 0xc7, 0x001028c2, 0x100, 0x10000, 0x10000),
+	FLASH_ID("mac mx25r1035f",        0x03, 0x00, 0x02, 0xd8, 0xc7, 0x001128c2, 0x100, 0x10000, 0x20000),
+	FLASH_ID("mac mx25r2035f",        0x03, 0x00, 0x02, 0xd8, 0xc7, 0x001228c2, 0x100, 0x10000, 0x40000),
+	FLASH_ID("mac mx25r4035f",        0x03, 0x00, 0x02, 0xd8, 0xc7, 0x001328c2, 0x100, 0x10000, 0x80000),
+	FLASH_ID("mac mx25r8035f",        0x03, 0x00, 0x02, 0xd8, 0xc7, 0x001428c2, 0x100, 0x10000, 0x100000),
+	FLASH_ID("mac mx25r1635f",        0x03, 0x00, 0x02, 0xd8, 0xc7, 0x001528c2, 0x100, 0x10000, 0x200000),
+	FLASH_ID("mac mx25r3235f",        0x03, 0x00, 0x02, 0xd8, 0xc7, 0x001628c2, 0x100, 0x10000, 0x400000),
+	FLASH_ID("mac mx25r6435f",        0x03, 0x00, 0x02, 0xd8, 0xc7, 0x001728c2, 0x100, 0x10000, 0x800000),
 	FLASH_ID("micron n25q064",      0x03, 0xeb, 0x02, 0xd8, 0xc7, 0x0017ba20, 0x100, 0x10000, 0x800000),
 	FLASH_ID("micron n25q128",      0x03, 0xeb, 0x02, 0xd8, 0xc7, 0x0018ba20, 0x100, 0x10000, 0x1000000),
-	FLASH_ID("micron n25q256 3v",   0x13, 0xec, 0x12, 0xdc, 0xc7, 0x0019ba20, 0x100, 0x10000, 0x2000000),
-	FLASH_ID("micron n25q256 1.8v", 0x13, 0xec, 0x12, 0xdc, 0xc7, 0x0019bb20, 0x100, 0x10000, 0x2000000),
+	FLASH_ID("micron n25q256..3e 3v",   0x13, 0xec, 0x12, 0xdc, 0xc7, 0x0019ba20, 0x100, 0x10000, 0x2000000),
+	FLASH_ID("micron n25q256..1e 1.8v", 0x13, 0xec, 0x12, 0xdc, 0xc7, 0x0019bb20, 0x100, 0x10000, 0x2000000),
 	FLASH_ID("micron mt25ql512",    0x13, 0xec, 0x12, 0xdc, 0xc7, 0x0020ba20, 0x100, 0x10000, 0x4000000),
 	FLASH_ID("micron mt25ql01",     0x13, 0xec, 0x12, 0xdc, 0xc7, 0x0021ba20, 0x100, 0x10000, 0x8000000),
 	FLASH_ID("micron mt25ql02",     0x13, 0xec, 0x12, 0xdc, 0xc7, 0x0022ba20, 0x100, 0x10000, 0x10000000),
 	FLASH_ID("win w25q80bv",        0x03, 0x00, 0x02, 0xd8, 0xc7, 0x001440ef, 0x100, 0x10000, 0x100000),
 	FLASH_ID("win w25q16jv",        0x03, 0x00, 0x02, 0xd8, 0xc7, 0x001540ef, 0x100, 0x10000, 0x200000),
 	FLASH_ID("win w25q16jv",        0x03, 0x00, 0x02, 0xd8, 0xc7, 0x001570ef, 0x100, 0x10000, 0x200000), /* QPI / DTR */
-	FLASH_ID("win w25q32fv/jv",     0x03, 0xeb, 0x02, 0xd8, 0xc7, 0x001640ef, 0x100, 0x10000, 0x400000),
+	FLASH_ID("win w25q32fv/w25q32jv",     0x03, 0xeb, 0x02, 0xd8, 0xc7, 0x001640ef, 0x100, 0x10000, 0x400000),
 	FLASH_ID("win w25q32fv",        0x03, 0xeb, 0x02, 0xd8, 0xc7, 0x001660ef, 0x100, 0x10000, 0x400000), /* QPI mode */
 	FLASH_ID("win w25q32jv",        0x03, 0x00, 0x02, 0xd8, 0xc7, 0x001670ef, 0x100, 0x10000, 0x400000),
-	FLASH_ID("win w25q64fv/jv",     0x03, 0xeb, 0x02, 0xd8, 0xc7, 0x001740ef, 0x100, 0x10000, 0x800000),
+	FLASH_ID("win w25q64fv/w25q64jv",     0x03, 0xeb, 0x02, 0xd8, 0xc7, 0x001740ef, 0x100, 0x10000, 0x800000),
 	FLASH_ID("win w25q64fv",        0x03, 0xeb, 0x02, 0xd8, 0xc7, 0x001760ef, 0x100, 0x10000, 0x800000), /* QPI mode */
 	FLASH_ID("win w25q64jv",        0x03, 0x00, 0x02, 0xd8, 0xc7, 0x001770ef, 0x100, 0x10000, 0x800000),
-	FLASH_ID("win w25q128fv/jv",    0x03, 0xeb, 0x02, 0xd8, 0xc7, 0x001840ef, 0x100, 0x10000, 0x1000000),
+	FLASH_ID("win w25q128fv/w25q128jv",    0x03, 0xeb, 0x02, 0xd8, 0xc7, 0x001840ef, 0x100, 0x10000, 0x1000000),
 	FLASH_ID("win w25q128fv",       0x03, 0xeb, 0x02, 0xd8, 0xc7, 0x001860ef, 0x100, 0x10000, 0x1000000), /* QPI mode */
 	FLASH_ID("win w25q128jv",       0x03, 0x00, 0x02, 0xd8, 0xc7, 0x001870ef, 0x100, 0x10000, 0x1000000),
-	FLASH_ID("win w25q256fv/jv",    0x03, 0xeb, 0x02, 0xd8, 0xc7, 0x001940ef, 0x100, 0x10000, 0x2000000),
+	FLASH_ID("win w25q256fv/w25q256jv",    0x03, 0xeb, 0x02, 0xd8, 0xc7, 0x001940ef, 0x100, 0x10000, 0x2000000),
 	FLASH_ID("win w25q256fv",       0x03, 0xeb, 0x02, 0xd8, 0xc7, 0x001960ef, 0x100, 0x10000, 0x2000000), /* QPI mode */
 	FLASH_ID("win w25q256jv",       0x03, 0x00, 0x02, 0xd8, 0xc7, 0x001970ef, 0x100, 0x10000, 0x2000000),
 	FLASH_ID("gd gd25q512",         0x03, 0x00, 0x02, 0x20, 0xc7, 0x001040c8, 0x100, 0x1000,  0x10000),
diff --git a/src/helper/options.c b/src/helper/options.c
index 6622ece6..4f9fd1a0 100644
--- a/src/helper/options.c
+++ b/src/helper/options.c
@@ -44,7 +44,13 @@
 #include <windows.h>
 #endif
 
-static int help_flag, version_flag;
+#include <flash/nor/spi.h>
+#include <json-c/json.h>
+#include <string.h>
+#include <stdio.h>
+
+static int help_flag, version_flag, dump_json_flag;
+static char *dump_output;
 
 static const struct option long_options[] = {
 	{"help",		no_argument,			&help_flag,		1},
@@ -52,9 +58,10 @@ static const struct option long_options[] = {
 	{"debug",		optional_argument,		0,				'd'},
 	{"file",		required_argument,		0,				'f'},
 	{"search",		required_argument,		0,				's'},
-	{"log_output",	required_argument,		0,				'l'},
+	{"log_output",	        required_argument,		0,		       		'l'},
 	{"command",		required_argument,		0,				'c'},
 	{"pipe",		no_argument,			0,				'p'},
+	{"dump_json",		required_argument,		0,              		'j'},
 	{0, 0, 0, 0}
 };
 
@@ -281,6 +288,12 @@ int parse_cmdline_args(struct command_context *cmd_ctx, int argc, char *argv[])
 				if (optarg)
 					command_run_linef(cmd_ctx, "log_output %s", optarg);
 				break;
+                        case 'j':
+                                dump_json_flag = 1;
+				if (optarg)
+					command_run_linef(cmd_ctx, "JSON file %s", optarg);
+                                dump_output = optarg;
+				break;
 			case 'c':		/* --command | -c */
 				if (optarg)
 				    add_config_command(optarg);
@@ -313,6 +326,7 @@ int parse_cmdline_args(struct command_context *cmd_ctx, int argc, char *argv[])
 		LOG_OUTPUT("--debug      | -d\tset debug level to 3\n");
 		LOG_OUTPUT("             | -d<n>\tset debug level to <level>\n");
 		LOG_OUTPUT("--log_output | -l\tredirect log output to file <name>\n");
+		LOG_OUTPUT("--dump_json  | -j\tdump SPI NOR configurations to JSON\n");
 		LOG_OUTPUT("--command    | -c\trun <command>\n");
 		exit(-1);
 	}
@@ -323,6 +337,66 @@ int parse_cmdline_args(struct command_context *cmd_ctx, int argc, char *argv[])
 		exit(0);
 	}
 
+        if (dump_json_flag) {
+			/* Just dump JSON file with configurations of SPI NOR chips */
+        	const struct flash_device *chip = NULL;
+			FILE *fp;
+			LOG_OUTPUT("Dumping configurations of SPI devices to %s.\n", dump_output);
+			fp = fopen(dump_output, "w+");
+			for (chip = flash_devices; chip && chip->name; chip++) {
+				if (chip->erase_cmd == 0 && chip->chip_erase_cmd == 0 && chip->pagesize == 0 && chip->sectorsize == 0) {
+					/* Skip FRAM chips */
+					continue;
+				}
+				struct json_object *chip_cfg = json_object_new_object();
+				char name[32] = {};
+				size_t name_size = 0;
+
+				/* Skip vendor name */
+				char *chr = chip->name;
+				while (*chr != ' ') {
+					chr++;
+				}
+				chr++; // Skip space
+
+				/* Extract chip name */
+				while (*chr != ' ' && *chr) {
+					name[name_size] = *chr++;
+					name_size++;
+				}
+
+        	    uint8_t manufacture_id = chip->device_id & 0xFF;
+        	    uint32_t model_id = (chip->device_id & 0xFF00) | ((chip->device_id & 0xFF0000) >> 16);
+
+				int64_t chip_id = ((int64_t)manufacture_id << 40) | ((int64_t)model_id << 24);
+
+				struct json_object *chip_name = json_object_new_string(name);
+				struct json_object *id = json_object_new_int64(chip_id);
+				struct json_object *total_size = json_object_new_int64(chip->size_in_bytes);
+				struct json_object *page_size = json_object_new_int64(chip->pagesize);
+
+				/* Feature bits are not supported in OpenOCD, set all to false */
+				struct json_object *dual_rw_support = json_object_new_boolean(false);
+				struct json_object *quad_rw_support = json_object_new_boolean(false);
+				struct json_object *octal_rw_support = json_object_new_boolean(false);
+				struct json_object *fast_read_support = json_object_new_boolean(false);
+				struct json_object *addr32_support = json_object_new_boolean(false);
+
+				json_object_object_add(chip_cfg, "chip_name", chip_name);
+				json_object_object_add(chip_cfg, "id", id);
+				json_object_object_add(chip_cfg, "total_size", total_size);
+				json_object_object_add(chip_cfg, "page_size", page_size);
+				json_object_object_add(chip_cfg, "dual_support", dual_rw_support);
+				json_object_object_add(chip_cfg, "quad_support", quad_rw_support);
+				json_object_object_add(chip_cfg, "octal_support", octal_rw_support);
+				json_object_object_add(chip_cfg, "fast_read_support", fast_read_support);
+				json_object_object_add(chip_cfg, "addr32_support", addr32_support);
+				fputs(json_object_to_json_string(chip_cfg), fp);
+			}
+		fclose(fp);
+		exit(0);
+    }
+
 	/* paths specified on the command line take precedence over these
 	 * built-in paths
 	 */
-- 
2.22.0

