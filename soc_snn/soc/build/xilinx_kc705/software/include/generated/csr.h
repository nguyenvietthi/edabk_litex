//--------------------------------------------------------------------------------
// Auto-generated by LiteX (a2c6080) on 2022-09-09 20:31:58
//--------------------------------------------------------------------------------
#include <generated/soc.h>
#ifndef __GENERATED_CSR_H
#define __GENERATED_CSR_H
#include <stdint.h>
#include <system.h>
#ifndef CSR_ACCESSORS_DEFINED
#include <hw/common.h>
#endif /* ! CSR_ACCESSORS_DEFINED */
#ifndef CSR_BASE
#define CSR_BASE 0xf0000000L
#endif

/* edabk_snn */
#define CSR_EDABK_SNN_BASE (CSR_BASE + 0x0L)
#define CSR_EDABK_SNN_TICK_ADDR (CSR_BASE + 0x0L)
#define CSR_EDABK_SNN_TICK_SIZE 1
static inline uint32_t edabk_snn_tick_read(void) {
	return csr_read_simple(CSR_BASE + 0x0L);
}
static inline void edabk_snn_tick_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x0L);
}
#define CSR_EDABK_SNN_PACKET_WDATA_ADDR (CSR_BASE + 0x4L)
#define CSR_EDABK_SNN_PACKET_WDATA_SIZE 1
static inline uint32_t edabk_snn_packet_wdata_read(void) {
	return csr_read_simple(CSR_BASE + 0x4L);
}
static inline void edabk_snn_packet_wdata_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x4L);
}
#define CSR_EDABK_SNN_PARAM_WDATA0_ADDR (CSR_BASE + 0x8L)
#define CSR_EDABK_SNN_PARAM_WDATA0_SIZE 1
static inline uint32_t edabk_snn_param_wdata0_read(void) {
	return csr_read_simple(CSR_BASE + 0x8L);
}
static inline void edabk_snn_param_wdata0_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x8L);
}
#define CSR_EDABK_SNN_PARAM_WDATA1_ADDR (CSR_BASE + 0xcL)
#define CSR_EDABK_SNN_PARAM_WDATA1_SIZE 1
static inline uint32_t edabk_snn_param_wdata1_read(void) {
	return csr_read_simple(CSR_BASE + 0xcL);
}
static inline void edabk_snn_param_wdata1_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0xcL);
}
#define CSR_EDABK_SNN_PARAM_WDATA2_ADDR (CSR_BASE + 0x10L)
#define CSR_EDABK_SNN_PARAM_WDATA2_SIZE 1
static inline uint32_t edabk_snn_param_wdata2_read(void) {
	return csr_read_simple(CSR_BASE + 0x10L);
}
static inline void edabk_snn_param_wdata2_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x10L);
}
#define CSR_EDABK_SNN_PARAM_WDATA3_ADDR (CSR_BASE + 0x14L)
#define CSR_EDABK_SNN_PARAM_WDATA3_SIZE 1
static inline uint32_t edabk_snn_param_wdata3_read(void) {
	return csr_read_simple(CSR_BASE + 0x14L);
}
static inline void edabk_snn_param_wdata3_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x14L);
}
#define CSR_EDABK_SNN_PARAM_WDATA4_ADDR (CSR_BASE + 0x18L)
#define CSR_EDABK_SNN_PARAM_WDATA4_SIZE 1
static inline uint32_t edabk_snn_param_wdata4_read(void) {
	return csr_read_simple(CSR_BASE + 0x18L);
}
static inline void edabk_snn_param_wdata4_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x18L);
}
#define CSR_EDABK_SNN_PARAM_WDATA5_ADDR (CSR_BASE + 0x1cL)
#define CSR_EDABK_SNN_PARAM_WDATA5_SIZE 1
static inline uint32_t edabk_snn_param_wdata5_read(void) {
	return csr_read_simple(CSR_BASE + 0x1cL);
}
static inline void edabk_snn_param_wdata5_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x1cL);
}
#define CSR_EDABK_SNN_PARAM_WDATA6_ADDR (CSR_BASE + 0x20L)
#define CSR_EDABK_SNN_PARAM_WDATA6_SIZE 1
static inline uint32_t edabk_snn_param_wdata6_read(void) {
	return csr_read_simple(CSR_BASE + 0x20L);
}
static inline void edabk_snn_param_wdata6_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x20L);
}
#define CSR_EDABK_SNN_PARAM_WDATA7_ADDR (CSR_BASE + 0x24L)
#define CSR_EDABK_SNN_PARAM_WDATA7_SIZE 1
static inline uint32_t edabk_snn_param_wdata7_read(void) {
	return csr_read_simple(CSR_BASE + 0x24L);
}
static inline void edabk_snn_param_wdata7_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x24L);
}
#define CSR_EDABK_SNN_PARAM_WDATA8_ADDR (CSR_BASE + 0x28L)
#define CSR_EDABK_SNN_PARAM_WDATA8_SIZE 1
static inline uint32_t edabk_snn_param_wdata8_read(void) {
	return csr_read_simple(CSR_BASE + 0x28L);
}
static inline void edabk_snn_param_wdata8_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x28L);
}
#define CSR_EDABK_SNN_PARAM_WDATA9_ADDR (CSR_BASE + 0x2cL)
#define CSR_EDABK_SNN_PARAM_WDATA9_SIZE 1
static inline uint32_t edabk_snn_param_wdata9_read(void) {
	return csr_read_simple(CSR_BASE + 0x2cL);
}
static inline void edabk_snn_param_wdata9_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x2cL);
}
#define CSR_EDABK_SNN_PARAM_WDATA10_ADDR (CSR_BASE + 0x30L)
#define CSR_EDABK_SNN_PARAM_WDATA10_SIZE 1
static inline uint32_t edabk_snn_param_wdata10_read(void) {
	return csr_read_simple(CSR_BASE + 0x30L);
}
static inline void edabk_snn_param_wdata10_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x30L);
}
#define CSR_EDABK_SNN_PARAM_WDATA11_ADDR (CSR_BASE + 0x34L)
#define CSR_EDABK_SNN_PARAM_WDATA11_SIZE 1
static inline uint32_t edabk_snn_param_wdata11_read(void) {
	return csr_read_simple(CSR_BASE + 0x34L);
}
static inline void edabk_snn_param_wdata11_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x34L);
}
#define CSR_EDABK_SNN_NEURON_INST_WDATA_ADDR (CSR_BASE + 0x38L)
#define CSR_EDABK_SNN_NEURON_INST_WDATA_SIZE 1
static inline uint32_t edabk_snn_neuron_inst_wdata_read(void) {
	return csr_read_simple(CSR_BASE + 0x38L);
}
static inline void edabk_snn_neuron_inst_wdata_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x38L);
}
#define CSR_EDABK_SNN_PACKET_OUT_RINC_ADDR (CSR_BASE + 0x3cL)
#define CSR_EDABK_SNN_PACKET_OUT_RINC_SIZE 1
static inline uint32_t edabk_snn_packet_out_rinc_read(void) {
	return csr_read_simple(CSR_BASE + 0x3cL);
}
static inline void edabk_snn_packet_out_rinc_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x3cL);
}
#define CSR_EDABK_SNN_PACKET_OUT_ADDR (CSR_BASE + 0x40L)
#define CSR_EDABK_SNN_PACKET_OUT_SIZE 1
static inline uint32_t edabk_snn_packet_out_read(void) {
	return csr_read_simple(CSR_BASE + 0x40L);
}
static inline void edabk_snn_packet_out_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x40L);
}
#define CSR_EDABK_SNN_SNN_STATUS_ADDR (CSR_BASE + 0x44L)
#define CSR_EDABK_SNN_SNN_STATUS_SIZE 1
static inline uint32_t edabk_snn_snn_status_read(void) {
	return csr_read_simple(CSR_BASE + 0x44L);
}
#define CSR_EDABK_SNN_SNN_STATUS_PACKET_WFULL_OFFSET 0
#define CSR_EDABK_SNN_SNN_STATUS_PACKET_WFULL_SIZE 1
static inline uint32_t edabk_snn_snn_status_packet_wfull_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t edabk_snn_snn_status_packet_wfull_read(void) {
	uint32_t word = edabk_snn_snn_status_read();
	return edabk_snn_snn_status_packet_wfull_extract(word);
}
#define CSR_EDABK_SNN_SNN_STATUS_PARAM_WFULL_OFFSET 1
#define CSR_EDABK_SNN_SNN_STATUS_PARAM_WFULL_SIZE 1
static inline uint32_t edabk_snn_snn_status_param_wfull_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 1) & mask );
}
static inline uint32_t edabk_snn_snn_status_param_wfull_read(void) {
	uint32_t word = edabk_snn_snn_status_read();
	return edabk_snn_snn_status_param_wfull_extract(word);
}
#define CSR_EDABK_SNN_SNN_STATUS_NEURON_INST_WFULL_OFFSET 2
#define CSR_EDABK_SNN_SNN_STATUS_NEURON_INST_WFULL_SIZE 1
static inline uint32_t edabk_snn_snn_status_neuron_inst_wfull_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 2) & mask );
}
static inline uint32_t edabk_snn_snn_status_neuron_inst_wfull_read(void) {
	uint32_t word = edabk_snn_snn_status_read();
	return edabk_snn_snn_status_neuron_inst_wfull_extract(word);
}
#define CSR_EDABK_SNN_SNN_STATUS_PACKET_OUT_REMPTY_OFFSET 3
#define CSR_EDABK_SNN_SNN_STATUS_PACKET_OUT_REMPTY_SIZE 1
static inline uint32_t edabk_snn_snn_status_packet_out_rempty_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 3) & mask );
}
static inline uint32_t edabk_snn_snn_status_packet_out_rempty_read(void) {
	uint32_t word = edabk_snn_snn_status_read();
	return edabk_snn_snn_status_packet_out_rempty_extract(word);
}
#define CSR_EDABK_SNN_SNN_STATUS_TOKEN_CONTROLLER_ERROR_OFFSET 4
#define CSR_EDABK_SNN_SNN_STATUS_TOKEN_CONTROLLER_ERROR_SIZE 1
static inline uint32_t edabk_snn_snn_status_token_controller_error_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 4) & mask );
}
static inline uint32_t edabk_snn_snn_status_token_controller_error_read(void) {
	uint32_t word = edabk_snn_snn_status_read();
	return edabk_snn_snn_status_token_controller_error_extract(word);
}
#define CSR_EDABK_SNN_SNN_STATUS_SCHEDULER_ERROR_OFFSET 5
#define CSR_EDABK_SNN_SNN_STATUS_SCHEDULER_ERROR_SIZE 1
static inline uint32_t edabk_snn_snn_status_scheduler_error_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 5) & mask );
}
static inline uint32_t edabk_snn_snn_status_scheduler_error_read(void) {
	uint32_t word = edabk_snn_snn_status_read();
	return edabk_snn_snn_status_scheduler_error_extract(word);
}
#define CSR_EDABK_SNN_SNN_STATUS_WAIT_PACKETS_OFFSET 6
#define CSR_EDABK_SNN_SNN_STATUS_WAIT_PACKETS_SIZE 1
static inline uint32_t edabk_snn_snn_status_wait_packets_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 6) & mask );
}
static inline uint32_t edabk_snn_snn_status_wait_packets_read(void) {
	uint32_t word = edabk_snn_snn_status_read();
	return edabk_snn_snn_status_wait_packets_extract(word);
}
#define CSR_EDABK_SNN_SNN_STATUS_TICK_READY_OFFSET 7
#define CSR_EDABK_SNN_SNN_STATUS_TICK_READY_SIZE 1
static inline uint32_t edabk_snn_snn_status_tick_ready_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 7) & mask );
}
static inline uint32_t edabk_snn_snn_status_tick_ready_read(void) {
	uint32_t word = edabk_snn_snn_status_read();
	return edabk_snn_snn_status_tick_ready_extract(word);
}

/* ctrl */
#define CSR_CTRL_BASE (CSR_BASE + 0x800L)
#define CSR_CTRL_RESET_ADDR (CSR_BASE + 0x800L)
#define CSR_CTRL_RESET_SIZE 1
static inline uint32_t ctrl_reset_read(void) {
	return csr_read_simple(CSR_BASE + 0x800L);
}
static inline void ctrl_reset_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x800L);
}
#define CSR_CTRL_RESET_SOC_RST_OFFSET 0
#define CSR_CTRL_RESET_SOC_RST_SIZE 1
static inline uint32_t ctrl_reset_soc_rst_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t ctrl_reset_soc_rst_read(void) {
	uint32_t word = ctrl_reset_read();
	return ctrl_reset_soc_rst_extract(word);
}
static inline uint32_t ctrl_reset_soc_rst_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void ctrl_reset_soc_rst_write(uint32_t plain_value) {
	uint32_t oldword = ctrl_reset_read();
	uint32_t newword = ctrl_reset_soc_rst_replace(oldword, plain_value);
	ctrl_reset_write(newword);
}
#define CSR_CTRL_RESET_CPU_RST_OFFSET 1
#define CSR_CTRL_RESET_CPU_RST_SIZE 1
static inline uint32_t ctrl_reset_cpu_rst_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 1) & mask );
}
static inline uint32_t ctrl_reset_cpu_rst_read(void) {
	uint32_t word = ctrl_reset_read();
	return ctrl_reset_cpu_rst_extract(word);
}
static inline uint32_t ctrl_reset_cpu_rst_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void ctrl_reset_cpu_rst_write(uint32_t plain_value) {
	uint32_t oldword = ctrl_reset_read();
	uint32_t newword = ctrl_reset_cpu_rst_replace(oldword, plain_value);
	ctrl_reset_write(newword);
}
#define CSR_CTRL_SCRATCH_ADDR (CSR_BASE + 0x804L)
#define CSR_CTRL_SCRATCH_SIZE 1
static inline uint32_t ctrl_scratch_read(void) {
	return csr_read_simple(CSR_BASE + 0x804L);
}
static inline void ctrl_scratch_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x804L);
}
#define CSR_CTRL_BUS_ERRORS_ADDR (CSR_BASE + 0x808L)
#define CSR_CTRL_BUS_ERRORS_SIZE 1
static inline uint32_t ctrl_bus_errors_read(void) {
	return csr_read_simple(CSR_BASE + 0x808L);
}

/* ddrphy */
#define CSR_DDRPHY_BASE (CSR_BASE + 0x1000L)
#define CSR_DDRPHY_RST_ADDR (CSR_BASE + 0x1000L)
#define CSR_DDRPHY_RST_SIZE 1
static inline uint32_t ddrphy_rst_read(void) {
	return csr_read_simple(CSR_BASE + 0x1000L);
}
static inline void ddrphy_rst_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x1000L);
}
#define CSR_DDRPHY_DLY_SEL_ADDR (CSR_BASE + 0x1004L)
#define CSR_DDRPHY_DLY_SEL_SIZE 1
static inline uint32_t ddrphy_dly_sel_read(void) {
	return csr_read_simple(CSR_BASE + 0x1004L);
}
static inline void ddrphy_dly_sel_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x1004L);
}
#define CSR_DDRPHY_HALF_SYS8X_TAPS_ADDR (CSR_BASE + 0x1008L)
#define CSR_DDRPHY_HALF_SYS8X_TAPS_SIZE 1
static inline uint32_t ddrphy_half_sys8x_taps_read(void) {
	return csr_read_simple(CSR_BASE + 0x1008L);
}
static inline void ddrphy_half_sys8x_taps_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x1008L);
}
#define CSR_DDRPHY_WLEVEL_EN_ADDR (CSR_BASE + 0x100cL)
#define CSR_DDRPHY_WLEVEL_EN_SIZE 1
static inline uint32_t ddrphy_wlevel_en_read(void) {
	return csr_read_simple(CSR_BASE + 0x100cL);
}
static inline void ddrphy_wlevel_en_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x100cL);
}
#define CSR_DDRPHY_WLEVEL_STROBE_ADDR (CSR_BASE + 0x1010L)
#define CSR_DDRPHY_WLEVEL_STROBE_SIZE 1
static inline uint32_t ddrphy_wlevel_strobe_read(void) {
	return csr_read_simple(CSR_BASE + 0x1010L);
}
static inline void ddrphy_wlevel_strobe_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x1010L);
}
#define CSR_DDRPHY_CDLY_RST_ADDR (CSR_BASE + 0x1014L)
#define CSR_DDRPHY_CDLY_RST_SIZE 1
static inline uint32_t ddrphy_cdly_rst_read(void) {
	return csr_read_simple(CSR_BASE + 0x1014L);
}
static inline void ddrphy_cdly_rst_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x1014L);
}
#define CSR_DDRPHY_CDLY_INC_ADDR (CSR_BASE + 0x1018L)
#define CSR_DDRPHY_CDLY_INC_SIZE 1
static inline uint32_t ddrphy_cdly_inc_read(void) {
	return csr_read_simple(CSR_BASE + 0x1018L);
}
static inline void ddrphy_cdly_inc_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x1018L);
}
#define CSR_DDRPHY_RDLY_DQ_RST_ADDR (CSR_BASE + 0x101cL)
#define CSR_DDRPHY_RDLY_DQ_RST_SIZE 1
static inline uint32_t ddrphy_rdly_dq_rst_read(void) {
	return csr_read_simple(CSR_BASE + 0x101cL);
}
static inline void ddrphy_rdly_dq_rst_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x101cL);
}
#define CSR_DDRPHY_RDLY_DQ_INC_ADDR (CSR_BASE + 0x1020L)
#define CSR_DDRPHY_RDLY_DQ_INC_SIZE 1
static inline uint32_t ddrphy_rdly_dq_inc_read(void) {
	return csr_read_simple(CSR_BASE + 0x1020L);
}
static inline void ddrphy_rdly_dq_inc_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x1020L);
}
#define CSR_DDRPHY_RDLY_DQ_BITSLIP_RST_ADDR (CSR_BASE + 0x1024L)
#define CSR_DDRPHY_RDLY_DQ_BITSLIP_RST_SIZE 1
static inline uint32_t ddrphy_rdly_dq_bitslip_rst_read(void) {
	return csr_read_simple(CSR_BASE + 0x1024L);
}
static inline void ddrphy_rdly_dq_bitslip_rst_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x1024L);
}
#define CSR_DDRPHY_RDLY_DQ_BITSLIP_ADDR (CSR_BASE + 0x1028L)
#define CSR_DDRPHY_RDLY_DQ_BITSLIP_SIZE 1
static inline uint32_t ddrphy_rdly_dq_bitslip_read(void) {
	return csr_read_simple(CSR_BASE + 0x1028L);
}
static inline void ddrphy_rdly_dq_bitslip_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x1028L);
}
#define CSR_DDRPHY_WDLY_DQ_RST_ADDR (CSR_BASE + 0x102cL)
#define CSR_DDRPHY_WDLY_DQ_RST_SIZE 1
static inline uint32_t ddrphy_wdly_dq_rst_read(void) {
	return csr_read_simple(CSR_BASE + 0x102cL);
}
static inline void ddrphy_wdly_dq_rst_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x102cL);
}
#define CSR_DDRPHY_WDLY_DQ_INC_ADDR (CSR_BASE + 0x1030L)
#define CSR_DDRPHY_WDLY_DQ_INC_SIZE 1
static inline uint32_t ddrphy_wdly_dq_inc_read(void) {
	return csr_read_simple(CSR_BASE + 0x1030L);
}
static inline void ddrphy_wdly_dq_inc_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x1030L);
}
#define CSR_DDRPHY_WDLY_DQS_RST_ADDR (CSR_BASE + 0x1034L)
#define CSR_DDRPHY_WDLY_DQS_RST_SIZE 1
static inline uint32_t ddrphy_wdly_dqs_rst_read(void) {
	return csr_read_simple(CSR_BASE + 0x1034L);
}
static inline void ddrphy_wdly_dqs_rst_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x1034L);
}
#define CSR_DDRPHY_WDLY_DQS_INC_ADDR (CSR_BASE + 0x1038L)
#define CSR_DDRPHY_WDLY_DQS_INC_SIZE 1
static inline uint32_t ddrphy_wdly_dqs_inc_read(void) {
	return csr_read_simple(CSR_BASE + 0x1038L);
}
static inline void ddrphy_wdly_dqs_inc_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x1038L);
}
#define CSR_DDRPHY_WDLY_DQ_BITSLIP_RST_ADDR (CSR_BASE + 0x103cL)
#define CSR_DDRPHY_WDLY_DQ_BITSLIP_RST_SIZE 1
static inline uint32_t ddrphy_wdly_dq_bitslip_rst_read(void) {
	return csr_read_simple(CSR_BASE + 0x103cL);
}
static inline void ddrphy_wdly_dq_bitslip_rst_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x103cL);
}
#define CSR_DDRPHY_WDLY_DQ_BITSLIP_ADDR (CSR_BASE + 0x1040L)
#define CSR_DDRPHY_WDLY_DQ_BITSLIP_SIZE 1
static inline uint32_t ddrphy_wdly_dq_bitslip_read(void) {
	return csr_read_simple(CSR_BASE + 0x1040L);
}
static inline void ddrphy_wdly_dq_bitslip_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x1040L);
}
#define CSR_DDRPHY_RDPHASE_ADDR (CSR_BASE + 0x1044L)
#define CSR_DDRPHY_RDPHASE_SIZE 1
static inline uint32_t ddrphy_rdphase_read(void) {
	return csr_read_simple(CSR_BASE + 0x1044L);
}
static inline void ddrphy_rdphase_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x1044L);
}
#define CSR_DDRPHY_WRPHASE_ADDR (CSR_BASE + 0x1048L)
#define CSR_DDRPHY_WRPHASE_SIZE 1
static inline uint32_t ddrphy_wrphase_read(void) {
	return csr_read_simple(CSR_BASE + 0x1048L);
}
static inline void ddrphy_wrphase_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x1048L);
}

/* identifier_mem */
#define CSR_IDENTIFIER_MEM_BASE (CSR_BASE + 0x1800L)

/* leds */
#define CSR_LEDS_BASE (CSR_BASE + 0x2000L)
#define CSR_LEDS_OUT_ADDR (CSR_BASE + 0x2000L)
#define CSR_LEDS_OUT_SIZE 1
static inline uint32_t leds_out_read(void) {
	return csr_read_simple(CSR_BASE + 0x2000L);
}
static inline void leds_out_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x2000L);
}

/* sdblock2mem */
#define CSR_SDBLOCK2MEM_BASE (CSR_BASE + 0x2800L)
#define CSR_SDBLOCK2MEM_DMA_BASE_ADDR (CSR_BASE + 0x2800L)
#define CSR_SDBLOCK2MEM_DMA_BASE_SIZE 2
static inline uint64_t sdblock2mem_dma_base_read(void) {
	uint64_t r = csr_read_simple(CSR_BASE + 10240L);
	r <<= 32;
	r |= csr_read_simple(CSR_BASE + 0x2804L);
	return r;
}
static inline void sdblock2mem_dma_base_write(uint64_t v) {
	csr_write_simple(v >> 32, CSR_BASE + 0x2800L);
	csr_write_simple(v, CSR_BASE + 0x2804L);
}
#define CSR_SDBLOCK2MEM_DMA_LENGTH_ADDR (CSR_BASE + 0x2808L)
#define CSR_SDBLOCK2MEM_DMA_LENGTH_SIZE 1
static inline uint32_t sdblock2mem_dma_length_read(void) {
	return csr_read_simple(CSR_BASE + 0x2808L);
}
static inline void sdblock2mem_dma_length_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x2808L);
}
#define CSR_SDBLOCK2MEM_DMA_ENABLE_ADDR (CSR_BASE + 0x280cL)
#define CSR_SDBLOCK2MEM_DMA_ENABLE_SIZE 1
static inline uint32_t sdblock2mem_dma_enable_read(void) {
	return csr_read_simple(CSR_BASE + 0x280cL);
}
static inline void sdblock2mem_dma_enable_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x280cL);
}
#define CSR_SDBLOCK2MEM_DMA_DONE_ADDR (CSR_BASE + 0x2810L)
#define CSR_SDBLOCK2MEM_DMA_DONE_SIZE 1
static inline uint32_t sdblock2mem_dma_done_read(void) {
	return csr_read_simple(CSR_BASE + 0x2810L);
}
#define CSR_SDBLOCK2MEM_DMA_LOOP_ADDR (CSR_BASE + 0x2814L)
#define CSR_SDBLOCK2MEM_DMA_LOOP_SIZE 1
static inline uint32_t sdblock2mem_dma_loop_read(void) {
	return csr_read_simple(CSR_BASE + 0x2814L);
}
static inline void sdblock2mem_dma_loop_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x2814L);
}
#define CSR_SDBLOCK2MEM_DMA_OFFSET_ADDR (CSR_BASE + 0x2818L)
#define CSR_SDBLOCK2MEM_DMA_OFFSET_SIZE 1
static inline uint32_t sdblock2mem_dma_offset_read(void) {
	return csr_read_simple(CSR_BASE + 0x2818L);
}

/* sdcore */
#define CSR_SDCORE_BASE (CSR_BASE + 0x3000L)
#define CSR_SDCORE_CMD_ARGUMENT_ADDR (CSR_BASE + 0x3000L)
#define CSR_SDCORE_CMD_ARGUMENT_SIZE 1
static inline uint32_t sdcore_cmd_argument_read(void) {
	return csr_read_simple(CSR_BASE + 0x3000L);
}
static inline void sdcore_cmd_argument_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x3000L);
}
#define CSR_SDCORE_CMD_COMMAND_ADDR (CSR_BASE + 0x3004L)
#define CSR_SDCORE_CMD_COMMAND_SIZE 1
static inline uint32_t sdcore_cmd_command_read(void) {
	return csr_read_simple(CSR_BASE + 0x3004L);
}
static inline void sdcore_cmd_command_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x3004L);
}
#define CSR_SDCORE_CMD_COMMAND_CMD_TYPE_OFFSET 0
#define CSR_SDCORE_CMD_COMMAND_CMD_TYPE_SIZE 2
static inline uint32_t sdcore_cmd_command_cmd_type_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 2)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sdcore_cmd_command_cmd_type_read(void) {
	uint32_t word = sdcore_cmd_command_read();
	return sdcore_cmd_command_cmd_type_extract(word);
}
static inline uint32_t sdcore_cmd_command_cmd_type_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 2)-1);
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sdcore_cmd_command_cmd_type_write(uint32_t plain_value) {
	uint32_t oldword = sdcore_cmd_command_read();
	uint32_t newword = sdcore_cmd_command_cmd_type_replace(oldword, plain_value);
	sdcore_cmd_command_write(newword);
}
#define CSR_SDCORE_CMD_COMMAND_DATA_TYPE_OFFSET 5
#define CSR_SDCORE_CMD_COMMAND_DATA_TYPE_SIZE 2
static inline uint32_t sdcore_cmd_command_data_type_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 2)-1);
	return ( (oldword >> 5) & mask );
}
static inline uint32_t sdcore_cmd_command_data_type_read(void) {
	uint32_t word = sdcore_cmd_command_read();
	return sdcore_cmd_command_data_type_extract(word);
}
static inline uint32_t sdcore_cmd_command_data_type_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 2)-1);
	return (oldword & (~(mask << 5))) | (mask & plain_value)<< 5 ;
}
static inline void sdcore_cmd_command_data_type_write(uint32_t plain_value) {
	uint32_t oldword = sdcore_cmd_command_read();
	uint32_t newword = sdcore_cmd_command_data_type_replace(oldword, plain_value);
	sdcore_cmd_command_write(newword);
}
#define CSR_SDCORE_CMD_COMMAND_CMD_OFFSET 8
#define CSR_SDCORE_CMD_COMMAND_CMD_SIZE 6
static inline uint32_t sdcore_cmd_command_cmd_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 6)-1);
	return ( (oldword >> 8) & mask );
}
static inline uint32_t sdcore_cmd_command_cmd_read(void) {
	uint32_t word = sdcore_cmd_command_read();
	return sdcore_cmd_command_cmd_extract(word);
}
static inline uint32_t sdcore_cmd_command_cmd_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 6)-1);
	return (oldword & (~(mask << 8))) | (mask & plain_value)<< 8 ;
}
static inline void sdcore_cmd_command_cmd_write(uint32_t plain_value) {
	uint32_t oldword = sdcore_cmd_command_read();
	uint32_t newword = sdcore_cmd_command_cmd_replace(oldword, plain_value);
	sdcore_cmd_command_write(newword);
}
#define CSR_SDCORE_CMD_SEND_ADDR (CSR_BASE + 0x3008L)
#define CSR_SDCORE_CMD_SEND_SIZE 1
static inline uint32_t sdcore_cmd_send_read(void) {
	return csr_read_simple(CSR_BASE + 0x3008L);
}
static inline void sdcore_cmd_send_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x3008L);
}
#define CSR_SDCORE_CMD_RESPONSE_ADDR (CSR_BASE + 0x300cL)
#define CSR_SDCORE_CMD_RESPONSE_SIZE 4
#define CSR_SDCORE_CMD_EVENT_ADDR (CSR_BASE + 0x301cL)
#define CSR_SDCORE_CMD_EVENT_SIZE 1
static inline uint32_t sdcore_cmd_event_read(void) {
	return csr_read_simple(CSR_BASE + 0x301cL);
}
#define CSR_SDCORE_CMD_EVENT_DONE_OFFSET 0
#define CSR_SDCORE_CMD_EVENT_DONE_SIZE 1
static inline uint32_t sdcore_cmd_event_done_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sdcore_cmd_event_done_read(void) {
	uint32_t word = sdcore_cmd_event_read();
	return sdcore_cmd_event_done_extract(word);
}
#define CSR_SDCORE_CMD_EVENT_ERROR_OFFSET 1
#define CSR_SDCORE_CMD_EVENT_ERROR_SIZE 1
static inline uint32_t sdcore_cmd_event_error_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 1) & mask );
}
static inline uint32_t sdcore_cmd_event_error_read(void) {
	uint32_t word = sdcore_cmd_event_read();
	return sdcore_cmd_event_error_extract(word);
}
#define CSR_SDCORE_CMD_EVENT_TIMEOUT_OFFSET 2
#define CSR_SDCORE_CMD_EVENT_TIMEOUT_SIZE 1
static inline uint32_t sdcore_cmd_event_timeout_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 2) & mask );
}
static inline uint32_t sdcore_cmd_event_timeout_read(void) {
	uint32_t word = sdcore_cmd_event_read();
	return sdcore_cmd_event_timeout_extract(word);
}
#define CSR_SDCORE_CMD_EVENT_CRC_OFFSET 3
#define CSR_SDCORE_CMD_EVENT_CRC_SIZE 1
static inline uint32_t sdcore_cmd_event_crc_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 3) & mask );
}
static inline uint32_t sdcore_cmd_event_crc_read(void) {
	uint32_t word = sdcore_cmd_event_read();
	return sdcore_cmd_event_crc_extract(word);
}
#define CSR_SDCORE_DATA_EVENT_ADDR (CSR_BASE + 0x3020L)
#define CSR_SDCORE_DATA_EVENT_SIZE 1
static inline uint32_t sdcore_data_event_read(void) {
	return csr_read_simple(CSR_BASE + 0x3020L);
}
#define CSR_SDCORE_DATA_EVENT_DONE_OFFSET 0
#define CSR_SDCORE_DATA_EVENT_DONE_SIZE 1
static inline uint32_t sdcore_data_event_done_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sdcore_data_event_done_read(void) {
	uint32_t word = sdcore_data_event_read();
	return sdcore_data_event_done_extract(word);
}
#define CSR_SDCORE_DATA_EVENT_ERROR_OFFSET 1
#define CSR_SDCORE_DATA_EVENT_ERROR_SIZE 1
static inline uint32_t sdcore_data_event_error_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 1) & mask );
}
static inline uint32_t sdcore_data_event_error_read(void) {
	uint32_t word = sdcore_data_event_read();
	return sdcore_data_event_error_extract(word);
}
#define CSR_SDCORE_DATA_EVENT_TIMEOUT_OFFSET 2
#define CSR_SDCORE_DATA_EVENT_TIMEOUT_SIZE 1
static inline uint32_t sdcore_data_event_timeout_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 2) & mask );
}
static inline uint32_t sdcore_data_event_timeout_read(void) {
	uint32_t word = sdcore_data_event_read();
	return sdcore_data_event_timeout_extract(word);
}
#define CSR_SDCORE_DATA_EVENT_CRC_OFFSET 3
#define CSR_SDCORE_DATA_EVENT_CRC_SIZE 1
static inline uint32_t sdcore_data_event_crc_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 3) & mask );
}
static inline uint32_t sdcore_data_event_crc_read(void) {
	uint32_t word = sdcore_data_event_read();
	return sdcore_data_event_crc_extract(word);
}
#define CSR_SDCORE_BLOCK_LENGTH_ADDR (CSR_BASE + 0x3024L)
#define CSR_SDCORE_BLOCK_LENGTH_SIZE 1
static inline uint32_t sdcore_block_length_read(void) {
	return csr_read_simple(CSR_BASE + 0x3024L);
}
static inline void sdcore_block_length_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x3024L);
}
#define CSR_SDCORE_BLOCK_COUNT_ADDR (CSR_BASE + 0x3028L)
#define CSR_SDCORE_BLOCK_COUNT_SIZE 1
static inline uint32_t sdcore_block_count_read(void) {
	return csr_read_simple(CSR_BASE + 0x3028L);
}
static inline void sdcore_block_count_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x3028L);
}

/* sdirq */
#define CSR_SDIRQ_BASE (CSR_BASE + 0x3800L)
#define CSR_SDIRQ_STATUS_ADDR (CSR_BASE + 0x3800L)
#define CSR_SDIRQ_STATUS_SIZE 1
static inline uint32_t sdirq_status_read(void) {
	return csr_read_simple(CSR_BASE + 0x3800L);
}
#define CSR_SDIRQ_STATUS_CARD_DETECT_OFFSET 0
#define CSR_SDIRQ_STATUS_CARD_DETECT_SIZE 1
static inline uint32_t sdirq_status_card_detect_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sdirq_status_card_detect_read(void) {
	uint32_t word = sdirq_status_read();
	return sdirq_status_card_detect_extract(word);
}
#define CSR_SDIRQ_STATUS_BLOCK2MEM_DMA_OFFSET 1
#define CSR_SDIRQ_STATUS_BLOCK2MEM_DMA_SIZE 1
static inline uint32_t sdirq_status_block2mem_dma_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 1) & mask );
}
static inline uint32_t sdirq_status_block2mem_dma_read(void) {
	uint32_t word = sdirq_status_read();
	return sdirq_status_block2mem_dma_extract(word);
}
#define CSR_SDIRQ_STATUS_MEM2BLOCK_DMA_OFFSET 2
#define CSR_SDIRQ_STATUS_MEM2BLOCK_DMA_SIZE 1
static inline uint32_t sdirq_status_mem2block_dma_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 2) & mask );
}
static inline uint32_t sdirq_status_mem2block_dma_read(void) {
	uint32_t word = sdirq_status_read();
	return sdirq_status_mem2block_dma_extract(word);
}
#define CSR_SDIRQ_STATUS_CMD_DONE_OFFSET 3
#define CSR_SDIRQ_STATUS_CMD_DONE_SIZE 1
static inline uint32_t sdirq_status_cmd_done_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 3) & mask );
}
static inline uint32_t sdirq_status_cmd_done_read(void) {
	uint32_t word = sdirq_status_read();
	return sdirq_status_cmd_done_extract(word);
}
#define CSR_SDIRQ_PENDING_ADDR (CSR_BASE + 0x3804L)
#define CSR_SDIRQ_PENDING_SIZE 1
static inline uint32_t sdirq_pending_read(void) {
	return csr_read_simple(CSR_BASE + 0x3804L);
}
static inline void sdirq_pending_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x3804L);
}
#define CSR_SDIRQ_PENDING_CARD_DETECT_OFFSET 0
#define CSR_SDIRQ_PENDING_CARD_DETECT_SIZE 1
static inline uint32_t sdirq_pending_card_detect_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sdirq_pending_card_detect_read(void) {
	uint32_t word = sdirq_pending_read();
	return sdirq_pending_card_detect_extract(word);
}
static inline uint32_t sdirq_pending_card_detect_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sdirq_pending_card_detect_write(uint32_t plain_value) {
	uint32_t oldword = sdirq_pending_read();
	uint32_t newword = sdirq_pending_card_detect_replace(oldword, plain_value);
	sdirq_pending_write(newword);
}
#define CSR_SDIRQ_PENDING_BLOCK2MEM_DMA_OFFSET 1
#define CSR_SDIRQ_PENDING_BLOCK2MEM_DMA_SIZE 1
static inline uint32_t sdirq_pending_block2mem_dma_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 1) & mask );
}
static inline uint32_t sdirq_pending_block2mem_dma_read(void) {
	uint32_t word = sdirq_pending_read();
	return sdirq_pending_block2mem_dma_extract(word);
}
static inline uint32_t sdirq_pending_block2mem_dma_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void sdirq_pending_block2mem_dma_write(uint32_t plain_value) {
	uint32_t oldword = sdirq_pending_read();
	uint32_t newword = sdirq_pending_block2mem_dma_replace(oldword, plain_value);
	sdirq_pending_write(newword);
}
#define CSR_SDIRQ_PENDING_MEM2BLOCK_DMA_OFFSET 2
#define CSR_SDIRQ_PENDING_MEM2BLOCK_DMA_SIZE 1
static inline uint32_t sdirq_pending_mem2block_dma_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 2) & mask );
}
static inline uint32_t sdirq_pending_mem2block_dma_read(void) {
	uint32_t word = sdirq_pending_read();
	return sdirq_pending_mem2block_dma_extract(word);
}
static inline uint32_t sdirq_pending_mem2block_dma_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 2))) | (mask & plain_value)<< 2 ;
}
static inline void sdirq_pending_mem2block_dma_write(uint32_t plain_value) {
	uint32_t oldword = sdirq_pending_read();
	uint32_t newword = sdirq_pending_mem2block_dma_replace(oldword, plain_value);
	sdirq_pending_write(newword);
}
#define CSR_SDIRQ_PENDING_CMD_DONE_OFFSET 3
#define CSR_SDIRQ_PENDING_CMD_DONE_SIZE 1
static inline uint32_t sdirq_pending_cmd_done_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 3) & mask );
}
static inline uint32_t sdirq_pending_cmd_done_read(void) {
	uint32_t word = sdirq_pending_read();
	return sdirq_pending_cmd_done_extract(word);
}
static inline uint32_t sdirq_pending_cmd_done_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 3))) | (mask & plain_value)<< 3 ;
}
static inline void sdirq_pending_cmd_done_write(uint32_t plain_value) {
	uint32_t oldword = sdirq_pending_read();
	uint32_t newword = sdirq_pending_cmd_done_replace(oldword, plain_value);
	sdirq_pending_write(newword);
}
#define CSR_SDIRQ_ENABLE_ADDR (CSR_BASE + 0x3808L)
#define CSR_SDIRQ_ENABLE_SIZE 1
static inline uint32_t sdirq_enable_read(void) {
	return csr_read_simple(CSR_BASE + 0x3808L);
}
static inline void sdirq_enable_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x3808L);
}
#define CSR_SDIRQ_ENABLE_CARD_DETECT_OFFSET 0
#define CSR_SDIRQ_ENABLE_CARD_DETECT_SIZE 1
static inline uint32_t sdirq_enable_card_detect_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sdirq_enable_card_detect_read(void) {
	uint32_t word = sdirq_enable_read();
	return sdirq_enable_card_detect_extract(word);
}
static inline uint32_t sdirq_enable_card_detect_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sdirq_enable_card_detect_write(uint32_t plain_value) {
	uint32_t oldword = sdirq_enable_read();
	uint32_t newword = sdirq_enable_card_detect_replace(oldword, plain_value);
	sdirq_enable_write(newword);
}
#define CSR_SDIRQ_ENABLE_BLOCK2MEM_DMA_OFFSET 1
#define CSR_SDIRQ_ENABLE_BLOCK2MEM_DMA_SIZE 1
static inline uint32_t sdirq_enable_block2mem_dma_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 1) & mask );
}
static inline uint32_t sdirq_enable_block2mem_dma_read(void) {
	uint32_t word = sdirq_enable_read();
	return sdirq_enable_block2mem_dma_extract(word);
}
static inline uint32_t sdirq_enable_block2mem_dma_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void sdirq_enable_block2mem_dma_write(uint32_t plain_value) {
	uint32_t oldword = sdirq_enable_read();
	uint32_t newword = sdirq_enable_block2mem_dma_replace(oldword, plain_value);
	sdirq_enable_write(newword);
}
#define CSR_SDIRQ_ENABLE_MEM2BLOCK_DMA_OFFSET 2
#define CSR_SDIRQ_ENABLE_MEM2BLOCK_DMA_SIZE 1
static inline uint32_t sdirq_enable_mem2block_dma_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 2) & mask );
}
static inline uint32_t sdirq_enable_mem2block_dma_read(void) {
	uint32_t word = sdirq_enable_read();
	return sdirq_enable_mem2block_dma_extract(word);
}
static inline uint32_t sdirq_enable_mem2block_dma_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 2))) | (mask & plain_value)<< 2 ;
}
static inline void sdirq_enable_mem2block_dma_write(uint32_t plain_value) {
	uint32_t oldword = sdirq_enable_read();
	uint32_t newword = sdirq_enable_mem2block_dma_replace(oldword, plain_value);
	sdirq_enable_write(newword);
}
#define CSR_SDIRQ_ENABLE_CMD_DONE_OFFSET 3
#define CSR_SDIRQ_ENABLE_CMD_DONE_SIZE 1
static inline uint32_t sdirq_enable_cmd_done_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 3) & mask );
}
static inline uint32_t sdirq_enable_cmd_done_read(void) {
	uint32_t word = sdirq_enable_read();
	return sdirq_enable_cmd_done_extract(word);
}
static inline uint32_t sdirq_enable_cmd_done_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 3))) | (mask & plain_value)<< 3 ;
}
static inline void sdirq_enable_cmd_done_write(uint32_t plain_value) {
	uint32_t oldword = sdirq_enable_read();
	uint32_t newword = sdirq_enable_cmd_done_replace(oldword, plain_value);
	sdirq_enable_write(newword);
}

/* sdmem2block */
#define CSR_SDMEM2BLOCK_BASE (CSR_BASE + 0x4000L)
#define CSR_SDMEM2BLOCK_DMA_BASE_ADDR (CSR_BASE + 0x4000L)
#define CSR_SDMEM2BLOCK_DMA_BASE_SIZE 2
static inline uint64_t sdmem2block_dma_base_read(void) {
	uint64_t r = csr_read_simple(CSR_BASE + 16384L);
	r <<= 32;
	r |= csr_read_simple(CSR_BASE + 0x4004L);
	return r;
}
static inline void sdmem2block_dma_base_write(uint64_t v) {
	csr_write_simple(v >> 32, CSR_BASE + 0x4000L);
	csr_write_simple(v, CSR_BASE + 0x4004L);
}
#define CSR_SDMEM2BLOCK_DMA_LENGTH_ADDR (CSR_BASE + 0x4008L)
#define CSR_SDMEM2BLOCK_DMA_LENGTH_SIZE 1
static inline uint32_t sdmem2block_dma_length_read(void) {
	return csr_read_simple(CSR_BASE + 0x4008L);
}
static inline void sdmem2block_dma_length_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x4008L);
}
#define CSR_SDMEM2BLOCK_DMA_ENABLE_ADDR (CSR_BASE + 0x400cL)
#define CSR_SDMEM2BLOCK_DMA_ENABLE_SIZE 1
static inline uint32_t sdmem2block_dma_enable_read(void) {
	return csr_read_simple(CSR_BASE + 0x400cL);
}
static inline void sdmem2block_dma_enable_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x400cL);
}
#define CSR_SDMEM2BLOCK_DMA_DONE_ADDR (CSR_BASE + 0x4010L)
#define CSR_SDMEM2BLOCK_DMA_DONE_SIZE 1
static inline uint32_t sdmem2block_dma_done_read(void) {
	return csr_read_simple(CSR_BASE + 0x4010L);
}
#define CSR_SDMEM2BLOCK_DMA_LOOP_ADDR (CSR_BASE + 0x4014L)
#define CSR_SDMEM2BLOCK_DMA_LOOP_SIZE 1
static inline uint32_t sdmem2block_dma_loop_read(void) {
	return csr_read_simple(CSR_BASE + 0x4014L);
}
static inline void sdmem2block_dma_loop_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x4014L);
}
#define CSR_SDMEM2BLOCK_DMA_OFFSET_ADDR (CSR_BASE + 0x4018L)
#define CSR_SDMEM2BLOCK_DMA_OFFSET_SIZE 1
static inline uint32_t sdmem2block_dma_offset_read(void) {
	return csr_read_simple(CSR_BASE + 0x4018L);
}

/* sdphy */
#define CSR_SDPHY_BASE (CSR_BASE + 0x4800L)
#define CSR_SDPHY_CARD_DETECT_ADDR (CSR_BASE + 0x4800L)
#define CSR_SDPHY_CARD_DETECT_SIZE 1
static inline uint32_t sdphy_card_detect_read(void) {
	return csr_read_simple(CSR_BASE + 0x4800L);
}
#define CSR_SDPHY_CLOCKER_DIVIDER_ADDR (CSR_BASE + 0x4804L)
#define CSR_SDPHY_CLOCKER_DIVIDER_SIZE 1
static inline uint32_t sdphy_clocker_divider_read(void) {
	return csr_read_simple(CSR_BASE + 0x4804L);
}
static inline void sdphy_clocker_divider_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x4804L);
}
#define CSR_SDPHY_INIT_INITIALIZE_ADDR (CSR_BASE + 0x4808L)
#define CSR_SDPHY_INIT_INITIALIZE_SIZE 1
static inline uint32_t sdphy_init_initialize_read(void) {
	return csr_read_simple(CSR_BASE + 0x4808L);
}
static inline void sdphy_init_initialize_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x4808L);
}
#define CSR_SDPHY_DATAW_STATUS_ADDR (CSR_BASE + 0x480cL)
#define CSR_SDPHY_DATAW_STATUS_SIZE 1
static inline uint32_t sdphy_dataw_status_read(void) {
	return csr_read_simple(CSR_BASE + 0x480cL);
}
#define CSR_SDPHY_DATAW_STATUS_ACCEPTED_OFFSET 0
#define CSR_SDPHY_DATAW_STATUS_ACCEPTED_SIZE 1
static inline uint32_t sdphy_dataw_status_accepted_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sdphy_dataw_status_accepted_read(void) {
	uint32_t word = sdphy_dataw_status_read();
	return sdphy_dataw_status_accepted_extract(word);
}
#define CSR_SDPHY_DATAW_STATUS_CRC_ERROR_OFFSET 1
#define CSR_SDPHY_DATAW_STATUS_CRC_ERROR_SIZE 1
static inline uint32_t sdphy_dataw_status_crc_error_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 1) & mask );
}
static inline uint32_t sdphy_dataw_status_crc_error_read(void) {
	uint32_t word = sdphy_dataw_status_read();
	return sdphy_dataw_status_crc_error_extract(word);
}
#define CSR_SDPHY_DATAW_STATUS_WRITE_ERROR_OFFSET 2
#define CSR_SDPHY_DATAW_STATUS_WRITE_ERROR_SIZE 1
static inline uint32_t sdphy_dataw_status_write_error_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 2) & mask );
}
static inline uint32_t sdphy_dataw_status_write_error_read(void) {
	uint32_t word = sdphy_dataw_status_read();
	return sdphy_dataw_status_write_error_extract(word);
}

/* sdram */
#define CSR_SDRAM_BASE (CSR_BASE + 0x5000L)
#define CSR_SDRAM_DFII_CONTROL_ADDR (CSR_BASE + 0x5000L)
#define CSR_SDRAM_DFII_CONTROL_SIZE 1
static inline uint32_t sdram_dfii_control_read(void) {
	return csr_read_simple(CSR_BASE + 0x5000L);
}
static inline void sdram_dfii_control_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x5000L);
}
#define CSR_SDRAM_DFII_CONTROL_SEL_OFFSET 0
#define CSR_SDRAM_DFII_CONTROL_SEL_SIZE 1
static inline uint32_t sdram_dfii_control_sel_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sdram_dfii_control_sel_read(void) {
	uint32_t word = sdram_dfii_control_read();
	return sdram_dfii_control_sel_extract(word);
}
static inline uint32_t sdram_dfii_control_sel_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sdram_dfii_control_sel_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_control_read();
	uint32_t newword = sdram_dfii_control_sel_replace(oldword, plain_value);
	sdram_dfii_control_write(newword);
}
#define CSR_SDRAM_DFII_CONTROL_CKE_OFFSET 1
#define CSR_SDRAM_DFII_CONTROL_CKE_SIZE 1
static inline uint32_t sdram_dfii_control_cke_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 1) & mask );
}
static inline uint32_t sdram_dfii_control_cke_read(void) {
	uint32_t word = sdram_dfii_control_read();
	return sdram_dfii_control_cke_extract(word);
}
static inline uint32_t sdram_dfii_control_cke_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void sdram_dfii_control_cke_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_control_read();
	uint32_t newword = sdram_dfii_control_cke_replace(oldword, plain_value);
	sdram_dfii_control_write(newword);
}
#define CSR_SDRAM_DFII_CONTROL_ODT_OFFSET 2
#define CSR_SDRAM_DFII_CONTROL_ODT_SIZE 1
static inline uint32_t sdram_dfii_control_odt_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 2) & mask );
}
static inline uint32_t sdram_dfii_control_odt_read(void) {
	uint32_t word = sdram_dfii_control_read();
	return sdram_dfii_control_odt_extract(word);
}
static inline uint32_t sdram_dfii_control_odt_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 2))) | (mask & plain_value)<< 2 ;
}
static inline void sdram_dfii_control_odt_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_control_read();
	uint32_t newword = sdram_dfii_control_odt_replace(oldword, plain_value);
	sdram_dfii_control_write(newword);
}
#define CSR_SDRAM_DFII_CONTROL_RESET_N_OFFSET 3
#define CSR_SDRAM_DFII_CONTROL_RESET_N_SIZE 1
static inline uint32_t sdram_dfii_control_reset_n_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 3) & mask );
}
static inline uint32_t sdram_dfii_control_reset_n_read(void) {
	uint32_t word = sdram_dfii_control_read();
	return sdram_dfii_control_reset_n_extract(word);
}
static inline uint32_t sdram_dfii_control_reset_n_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 3))) | (mask & plain_value)<< 3 ;
}
static inline void sdram_dfii_control_reset_n_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_control_read();
	uint32_t newword = sdram_dfii_control_reset_n_replace(oldword, plain_value);
	sdram_dfii_control_write(newword);
}
#define CSR_SDRAM_DFII_PI0_COMMAND_ADDR (CSR_BASE + 0x5004L)
#define CSR_SDRAM_DFII_PI0_COMMAND_SIZE 1
static inline uint32_t sdram_dfii_pi0_command_read(void) {
	return csr_read_simple(CSR_BASE + 0x5004L);
}
static inline void sdram_dfii_pi0_command_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x5004L);
}
#define CSR_SDRAM_DFII_PI0_COMMAND_CS_OFFSET 0
#define CSR_SDRAM_DFII_PI0_COMMAND_CS_SIZE 1
static inline uint32_t sdram_dfii_pi0_command_cs_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sdram_dfii_pi0_command_cs_read(void) {
	uint32_t word = sdram_dfii_pi0_command_read();
	return sdram_dfii_pi0_command_cs_extract(word);
}
static inline uint32_t sdram_dfii_pi0_command_cs_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sdram_dfii_pi0_command_cs_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi0_command_read();
	uint32_t newword = sdram_dfii_pi0_command_cs_replace(oldword, plain_value);
	sdram_dfii_pi0_command_write(newword);
}
#define CSR_SDRAM_DFII_PI0_COMMAND_WE_OFFSET 1
#define CSR_SDRAM_DFII_PI0_COMMAND_WE_SIZE 1
static inline uint32_t sdram_dfii_pi0_command_we_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 1) & mask );
}
static inline uint32_t sdram_dfii_pi0_command_we_read(void) {
	uint32_t word = sdram_dfii_pi0_command_read();
	return sdram_dfii_pi0_command_we_extract(word);
}
static inline uint32_t sdram_dfii_pi0_command_we_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void sdram_dfii_pi0_command_we_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi0_command_read();
	uint32_t newword = sdram_dfii_pi0_command_we_replace(oldword, plain_value);
	sdram_dfii_pi0_command_write(newword);
}
#define CSR_SDRAM_DFII_PI0_COMMAND_CAS_OFFSET 2
#define CSR_SDRAM_DFII_PI0_COMMAND_CAS_SIZE 1
static inline uint32_t sdram_dfii_pi0_command_cas_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 2) & mask );
}
static inline uint32_t sdram_dfii_pi0_command_cas_read(void) {
	uint32_t word = sdram_dfii_pi0_command_read();
	return sdram_dfii_pi0_command_cas_extract(word);
}
static inline uint32_t sdram_dfii_pi0_command_cas_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 2))) | (mask & plain_value)<< 2 ;
}
static inline void sdram_dfii_pi0_command_cas_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi0_command_read();
	uint32_t newword = sdram_dfii_pi0_command_cas_replace(oldword, plain_value);
	sdram_dfii_pi0_command_write(newword);
}
#define CSR_SDRAM_DFII_PI0_COMMAND_RAS_OFFSET 3
#define CSR_SDRAM_DFII_PI0_COMMAND_RAS_SIZE 1
static inline uint32_t sdram_dfii_pi0_command_ras_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 3) & mask );
}
static inline uint32_t sdram_dfii_pi0_command_ras_read(void) {
	uint32_t word = sdram_dfii_pi0_command_read();
	return sdram_dfii_pi0_command_ras_extract(word);
}
static inline uint32_t sdram_dfii_pi0_command_ras_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 3))) | (mask & plain_value)<< 3 ;
}
static inline void sdram_dfii_pi0_command_ras_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi0_command_read();
	uint32_t newword = sdram_dfii_pi0_command_ras_replace(oldword, plain_value);
	sdram_dfii_pi0_command_write(newword);
}
#define CSR_SDRAM_DFII_PI0_COMMAND_WREN_OFFSET 4
#define CSR_SDRAM_DFII_PI0_COMMAND_WREN_SIZE 1
static inline uint32_t sdram_dfii_pi0_command_wren_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 4) & mask );
}
static inline uint32_t sdram_dfii_pi0_command_wren_read(void) {
	uint32_t word = sdram_dfii_pi0_command_read();
	return sdram_dfii_pi0_command_wren_extract(word);
}
static inline uint32_t sdram_dfii_pi0_command_wren_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 4))) | (mask & plain_value)<< 4 ;
}
static inline void sdram_dfii_pi0_command_wren_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi0_command_read();
	uint32_t newword = sdram_dfii_pi0_command_wren_replace(oldword, plain_value);
	sdram_dfii_pi0_command_write(newword);
}
#define CSR_SDRAM_DFII_PI0_COMMAND_RDEN_OFFSET 5
#define CSR_SDRAM_DFII_PI0_COMMAND_RDEN_SIZE 1
static inline uint32_t sdram_dfii_pi0_command_rden_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 5) & mask );
}
static inline uint32_t sdram_dfii_pi0_command_rden_read(void) {
	uint32_t word = sdram_dfii_pi0_command_read();
	return sdram_dfii_pi0_command_rden_extract(word);
}
static inline uint32_t sdram_dfii_pi0_command_rden_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 5))) | (mask & plain_value)<< 5 ;
}
static inline void sdram_dfii_pi0_command_rden_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi0_command_read();
	uint32_t newword = sdram_dfii_pi0_command_rden_replace(oldword, plain_value);
	sdram_dfii_pi0_command_write(newword);
}
#define CSR_SDRAM_DFII_PI0_COMMAND_ISSUE_ADDR (CSR_BASE + 0x5008L)
#define CSR_SDRAM_DFII_PI0_COMMAND_ISSUE_SIZE 1
static inline uint32_t sdram_dfii_pi0_command_issue_read(void) {
	return csr_read_simple(CSR_BASE + 0x5008L);
}
static inline void sdram_dfii_pi0_command_issue_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x5008L);
}
#define CSR_SDRAM_DFII_PI0_ADDRESS_ADDR (CSR_BASE + 0x500cL)
#define CSR_SDRAM_DFII_PI0_ADDRESS_SIZE 1
static inline uint32_t sdram_dfii_pi0_address_read(void) {
	return csr_read_simple(CSR_BASE + 0x500cL);
}
static inline void sdram_dfii_pi0_address_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x500cL);
}
#define CSR_SDRAM_DFII_PI0_BADDRESS_ADDR (CSR_BASE + 0x5010L)
#define CSR_SDRAM_DFII_PI0_BADDRESS_SIZE 1
static inline uint32_t sdram_dfii_pi0_baddress_read(void) {
	return csr_read_simple(CSR_BASE + 0x5010L);
}
static inline void sdram_dfii_pi0_baddress_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x5010L);
}
#define CSR_SDRAM_DFII_PI0_WRDATA_ADDR (CSR_BASE + 0x5014L)
#define CSR_SDRAM_DFII_PI0_WRDATA_SIZE 4
#define CSR_SDRAM_DFII_PI0_RDDATA_ADDR (CSR_BASE + 0x5024L)
#define CSR_SDRAM_DFII_PI0_RDDATA_SIZE 4
#define CSR_SDRAM_DFII_PI1_COMMAND_ADDR (CSR_BASE + 0x5034L)
#define CSR_SDRAM_DFII_PI1_COMMAND_SIZE 1
static inline uint32_t sdram_dfii_pi1_command_read(void) {
	return csr_read_simple(CSR_BASE + 0x5034L);
}
static inline void sdram_dfii_pi1_command_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x5034L);
}
#define CSR_SDRAM_DFII_PI1_COMMAND_CS_OFFSET 0
#define CSR_SDRAM_DFII_PI1_COMMAND_CS_SIZE 1
static inline uint32_t sdram_dfii_pi1_command_cs_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sdram_dfii_pi1_command_cs_read(void) {
	uint32_t word = sdram_dfii_pi1_command_read();
	return sdram_dfii_pi1_command_cs_extract(word);
}
static inline uint32_t sdram_dfii_pi1_command_cs_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sdram_dfii_pi1_command_cs_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi1_command_read();
	uint32_t newword = sdram_dfii_pi1_command_cs_replace(oldword, plain_value);
	sdram_dfii_pi1_command_write(newword);
}
#define CSR_SDRAM_DFII_PI1_COMMAND_WE_OFFSET 1
#define CSR_SDRAM_DFII_PI1_COMMAND_WE_SIZE 1
static inline uint32_t sdram_dfii_pi1_command_we_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 1) & mask );
}
static inline uint32_t sdram_dfii_pi1_command_we_read(void) {
	uint32_t word = sdram_dfii_pi1_command_read();
	return sdram_dfii_pi1_command_we_extract(word);
}
static inline uint32_t sdram_dfii_pi1_command_we_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void sdram_dfii_pi1_command_we_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi1_command_read();
	uint32_t newword = sdram_dfii_pi1_command_we_replace(oldword, plain_value);
	sdram_dfii_pi1_command_write(newword);
}
#define CSR_SDRAM_DFII_PI1_COMMAND_CAS_OFFSET 2
#define CSR_SDRAM_DFII_PI1_COMMAND_CAS_SIZE 1
static inline uint32_t sdram_dfii_pi1_command_cas_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 2) & mask );
}
static inline uint32_t sdram_dfii_pi1_command_cas_read(void) {
	uint32_t word = sdram_dfii_pi1_command_read();
	return sdram_dfii_pi1_command_cas_extract(word);
}
static inline uint32_t sdram_dfii_pi1_command_cas_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 2))) | (mask & plain_value)<< 2 ;
}
static inline void sdram_dfii_pi1_command_cas_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi1_command_read();
	uint32_t newword = sdram_dfii_pi1_command_cas_replace(oldword, plain_value);
	sdram_dfii_pi1_command_write(newword);
}
#define CSR_SDRAM_DFII_PI1_COMMAND_RAS_OFFSET 3
#define CSR_SDRAM_DFII_PI1_COMMAND_RAS_SIZE 1
static inline uint32_t sdram_dfii_pi1_command_ras_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 3) & mask );
}
static inline uint32_t sdram_dfii_pi1_command_ras_read(void) {
	uint32_t word = sdram_dfii_pi1_command_read();
	return sdram_dfii_pi1_command_ras_extract(word);
}
static inline uint32_t sdram_dfii_pi1_command_ras_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 3))) | (mask & plain_value)<< 3 ;
}
static inline void sdram_dfii_pi1_command_ras_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi1_command_read();
	uint32_t newword = sdram_dfii_pi1_command_ras_replace(oldword, plain_value);
	sdram_dfii_pi1_command_write(newword);
}
#define CSR_SDRAM_DFII_PI1_COMMAND_WREN_OFFSET 4
#define CSR_SDRAM_DFII_PI1_COMMAND_WREN_SIZE 1
static inline uint32_t sdram_dfii_pi1_command_wren_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 4) & mask );
}
static inline uint32_t sdram_dfii_pi1_command_wren_read(void) {
	uint32_t word = sdram_dfii_pi1_command_read();
	return sdram_dfii_pi1_command_wren_extract(word);
}
static inline uint32_t sdram_dfii_pi1_command_wren_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 4))) | (mask & plain_value)<< 4 ;
}
static inline void sdram_dfii_pi1_command_wren_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi1_command_read();
	uint32_t newword = sdram_dfii_pi1_command_wren_replace(oldword, plain_value);
	sdram_dfii_pi1_command_write(newword);
}
#define CSR_SDRAM_DFII_PI1_COMMAND_RDEN_OFFSET 5
#define CSR_SDRAM_DFII_PI1_COMMAND_RDEN_SIZE 1
static inline uint32_t sdram_dfii_pi1_command_rden_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 5) & mask );
}
static inline uint32_t sdram_dfii_pi1_command_rden_read(void) {
	uint32_t word = sdram_dfii_pi1_command_read();
	return sdram_dfii_pi1_command_rden_extract(word);
}
static inline uint32_t sdram_dfii_pi1_command_rden_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 5))) | (mask & plain_value)<< 5 ;
}
static inline void sdram_dfii_pi1_command_rden_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi1_command_read();
	uint32_t newword = sdram_dfii_pi1_command_rden_replace(oldword, plain_value);
	sdram_dfii_pi1_command_write(newword);
}
#define CSR_SDRAM_DFII_PI1_COMMAND_ISSUE_ADDR (CSR_BASE + 0x5038L)
#define CSR_SDRAM_DFII_PI1_COMMAND_ISSUE_SIZE 1
static inline uint32_t sdram_dfii_pi1_command_issue_read(void) {
	return csr_read_simple(CSR_BASE + 0x5038L);
}
static inline void sdram_dfii_pi1_command_issue_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x5038L);
}
#define CSR_SDRAM_DFII_PI1_ADDRESS_ADDR (CSR_BASE + 0x503cL)
#define CSR_SDRAM_DFII_PI1_ADDRESS_SIZE 1
static inline uint32_t sdram_dfii_pi1_address_read(void) {
	return csr_read_simple(CSR_BASE + 0x503cL);
}
static inline void sdram_dfii_pi1_address_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x503cL);
}
#define CSR_SDRAM_DFII_PI1_BADDRESS_ADDR (CSR_BASE + 0x5040L)
#define CSR_SDRAM_DFII_PI1_BADDRESS_SIZE 1
static inline uint32_t sdram_dfii_pi1_baddress_read(void) {
	return csr_read_simple(CSR_BASE + 0x5040L);
}
static inline void sdram_dfii_pi1_baddress_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x5040L);
}
#define CSR_SDRAM_DFII_PI1_WRDATA_ADDR (CSR_BASE + 0x5044L)
#define CSR_SDRAM_DFII_PI1_WRDATA_SIZE 4
#define CSR_SDRAM_DFII_PI1_RDDATA_ADDR (CSR_BASE + 0x5054L)
#define CSR_SDRAM_DFII_PI1_RDDATA_SIZE 4
#define CSR_SDRAM_DFII_PI2_COMMAND_ADDR (CSR_BASE + 0x5064L)
#define CSR_SDRAM_DFII_PI2_COMMAND_SIZE 1
static inline uint32_t sdram_dfii_pi2_command_read(void) {
	return csr_read_simple(CSR_BASE + 0x5064L);
}
static inline void sdram_dfii_pi2_command_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x5064L);
}
#define CSR_SDRAM_DFII_PI2_COMMAND_CS_OFFSET 0
#define CSR_SDRAM_DFII_PI2_COMMAND_CS_SIZE 1
static inline uint32_t sdram_dfii_pi2_command_cs_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sdram_dfii_pi2_command_cs_read(void) {
	uint32_t word = sdram_dfii_pi2_command_read();
	return sdram_dfii_pi2_command_cs_extract(word);
}
static inline uint32_t sdram_dfii_pi2_command_cs_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sdram_dfii_pi2_command_cs_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi2_command_read();
	uint32_t newword = sdram_dfii_pi2_command_cs_replace(oldword, plain_value);
	sdram_dfii_pi2_command_write(newword);
}
#define CSR_SDRAM_DFII_PI2_COMMAND_WE_OFFSET 1
#define CSR_SDRAM_DFII_PI2_COMMAND_WE_SIZE 1
static inline uint32_t sdram_dfii_pi2_command_we_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 1) & mask );
}
static inline uint32_t sdram_dfii_pi2_command_we_read(void) {
	uint32_t word = sdram_dfii_pi2_command_read();
	return sdram_dfii_pi2_command_we_extract(word);
}
static inline uint32_t sdram_dfii_pi2_command_we_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void sdram_dfii_pi2_command_we_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi2_command_read();
	uint32_t newword = sdram_dfii_pi2_command_we_replace(oldword, plain_value);
	sdram_dfii_pi2_command_write(newword);
}
#define CSR_SDRAM_DFII_PI2_COMMAND_CAS_OFFSET 2
#define CSR_SDRAM_DFII_PI2_COMMAND_CAS_SIZE 1
static inline uint32_t sdram_dfii_pi2_command_cas_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 2) & mask );
}
static inline uint32_t sdram_dfii_pi2_command_cas_read(void) {
	uint32_t word = sdram_dfii_pi2_command_read();
	return sdram_dfii_pi2_command_cas_extract(word);
}
static inline uint32_t sdram_dfii_pi2_command_cas_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 2))) | (mask & plain_value)<< 2 ;
}
static inline void sdram_dfii_pi2_command_cas_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi2_command_read();
	uint32_t newword = sdram_dfii_pi2_command_cas_replace(oldword, plain_value);
	sdram_dfii_pi2_command_write(newword);
}
#define CSR_SDRAM_DFII_PI2_COMMAND_RAS_OFFSET 3
#define CSR_SDRAM_DFII_PI2_COMMAND_RAS_SIZE 1
static inline uint32_t sdram_dfii_pi2_command_ras_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 3) & mask );
}
static inline uint32_t sdram_dfii_pi2_command_ras_read(void) {
	uint32_t word = sdram_dfii_pi2_command_read();
	return sdram_dfii_pi2_command_ras_extract(word);
}
static inline uint32_t sdram_dfii_pi2_command_ras_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 3))) | (mask & plain_value)<< 3 ;
}
static inline void sdram_dfii_pi2_command_ras_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi2_command_read();
	uint32_t newword = sdram_dfii_pi2_command_ras_replace(oldword, plain_value);
	sdram_dfii_pi2_command_write(newword);
}
#define CSR_SDRAM_DFII_PI2_COMMAND_WREN_OFFSET 4
#define CSR_SDRAM_DFII_PI2_COMMAND_WREN_SIZE 1
static inline uint32_t sdram_dfii_pi2_command_wren_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 4) & mask );
}
static inline uint32_t sdram_dfii_pi2_command_wren_read(void) {
	uint32_t word = sdram_dfii_pi2_command_read();
	return sdram_dfii_pi2_command_wren_extract(word);
}
static inline uint32_t sdram_dfii_pi2_command_wren_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 4))) | (mask & plain_value)<< 4 ;
}
static inline void sdram_dfii_pi2_command_wren_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi2_command_read();
	uint32_t newword = sdram_dfii_pi2_command_wren_replace(oldword, plain_value);
	sdram_dfii_pi2_command_write(newword);
}
#define CSR_SDRAM_DFII_PI2_COMMAND_RDEN_OFFSET 5
#define CSR_SDRAM_DFII_PI2_COMMAND_RDEN_SIZE 1
static inline uint32_t sdram_dfii_pi2_command_rden_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 5) & mask );
}
static inline uint32_t sdram_dfii_pi2_command_rden_read(void) {
	uint32_t word = sdram_dfii_pi2_command_read();
	return sdram_dfii_pi2_command_rden_extract(word);
}
static inline uint32_t sdram_dfii_pi2_command_rden_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 5))) | (mask & plain_value)<< 5 ;
}
static inline void sdram_dfii_pi2_command_rden_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi2_command_read();
	uint32_t newword = sdram_dfii_pi2_command_rden_replace(oldword, plain_value);
	sdram_dfii_pi2_command_write(newword);
}
#define CSR_SDRAM_DFII_PI2_COMMAND_ISSUE_ADDR (CSR_BASE + 0x5068L)
#define CSR_SDRAM_DFII_PI2_COMMAND_ISSUE_SIZE 1
static inline uint32_t sdram_dfii_pi2_command_issue_read(void) {
	return csr_read_simple(CSR_BASE + 0x5068L);
}
static inline void sdram_dfii_pi2_command_issue_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x5068L);
}
#define CSR_SDRAM_DFII_PI2_ADDRESS_ADDR (CSR_BASE + 0x506cL)
#define CSR_SDRAM_DFII_PI2_ADDRESS_SIZE 1
static inline uint32_t sdram_dfii_pi2_address_read(void) {
	return csr_read_simple(CSR_BASE + 0x506cL);
}
static inline void sdram_dfii_pi2_address_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x506cL);
}
#define CSR_SDRAM_DFII_PI2_BADDRESS_ADDR (CSR_BASE + 0x5070L)
#define CSR_SDRAM_DFII_PI2_BADDRESS_SIZE 1
static inline uint32_t sdram_dfii_pi2_baddress_read(void) {
	return csr_read_simple(CSR_BASE + 0x5070L);
}
static inline void sdram_dfii_pi2_baddress_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x5070L);
}
#define CSR_SDRAM_DFII_PI2_WRDATA_ADDR (CSR_BASE + 0x5074L)
#define CSR_SDRAM_DFII_PI2_WRDATA_SIZE 4
#define CSR_SDRAM_DFII_PI2_RDDATA_ADDR (CSR_BASE + 0x5084L)
#define CSR_SDRAM_DFII_PI2_RDDATA_SIZE 4
#define CSR_SDRAM_DFII_PI3_COMMAND_ADDR (CSR_BASE + 0x5094L)
#define CSR_SDRAM_DFII_PI3_COMMAND_SIZE 1
static inline uint32_t sdram_dfii_pi3_command_read(void) {
	return csr_read_simple(CSR_BASE + 0x5094L);
}
static inline void sdram_dfii_pi3_command_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x5094L);
}
#define CSR_SDRAM_DFII_PI3_COMMAND_CS_OFFSET 0
#define CSR_SDRAM_DFII_PI3_COMMAND_CS_SIZE 1
static inline uint32_t sdram_dfii_pi3_command_cs_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sdram_dfii_pi3_command_cs_read(void) {
	uint32_t word = sdram_dfii_pi3_command_read();
	return sdram_dfii_pi3_command_cs_extract(word);
}
static inline uint32_t sdram_dfii_pi3_command_cs_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sdram_dfii_pi3_command_cs_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi3_command_read();
	uint32_t newword = sdram_dfii_pi3_command_cs_replace(oldword, plain_value);
	sdram_dfii_pi3_command_write(newword);
}
#define CSR_SDRAM_DFII_PI3_COMMAND_WE_OFFSET 1
#define CSR_SDRAM_DFII_PI3_COMMAND_WE_SIZE 1
static inline uint32_t sdram_dfii_pi3_command_we_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 1) & mask );
}
static inline uint32_t sdram_dfii_pi3_command_we_read(void) {
	uint32_t word = sdram_dfii_pi3_command_read();
	return sdram_dfii_pi3_command_we_extract(word);
}
static inline uint32_t sdram_dfii_pi3_command_we_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void sdram_dfii_pi3_command_we_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi3_command_read();
	uint32_t newword = sdram_dfii_pi3_command_we_replace(oldword, plain_value);
	sdram_dfii_pi3_command_write(newword);
}
#define CSR_SDRAM_DFII_PI3_COMMAND_CAS_OFFSET 2
#define CSR_SDRAM_DFII_PI3_COMMAND_CAS_SIZE 1
static inline uint32_t sdram_dfii_pi3_command_cas_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 2) & mask );
}
static inline uint32_t sdram_dfii_pi3_command_cas_read(void) {
	uint32_t word = sdram_dfii_pi3_command_read();
	return sdram_dfii_pi3_command_cas_extract(word);
}
static inline uint32_t sdram_dfii_pi3_command_cas_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 2))) | (mask & plain_value)<< 2 ;
}
static inline void sdram_dfii_pi3_command_cas_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi3_command_read();
	uint32_t newword = sdram_dfii_pi3_command_cas_replace(oldword, plain_value);
	sdram_dfii_pi3_command_write(newword);
}
#define CSR_SDRAM_DFII_PI3_COMMAND_RAS_OFFSET 3
#define CSR_SDRAM_DFII_PI3_COMMAND_RAS_SIZE 1
static inline uint32_t sdram_dfii_pi3_command_ras_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 3) & mask );
}
static inline uint32_t sdram_dfii_pi3_command_ras_read(void) {
	uint32_t word = sdram_dfii_pi3_command_read();
	return sdram_dfii_pi3_command_ras_extract(word);
}
static inline uint32_t sdram_dfii_pi3_command_ras_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 3))) | (mask & plain_value)<< 3 ;
}
static inline void sdram_dfii_pi3_command_ras_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi3_command_read();
	uint32_t newword = sdram_dfii_pi3_command_ras_replace(oldword, plain_value);
	sdram_dfii_pi3_command_write(newword);
}
#define CSR_SDRAM_DFII_PI3_COMMAND_WREN_OFFSET 4
#define CSR_SDRAM_DFII_PI3_COMMAND_WREN_SIZE 1
static inline uint32_t sdram_dfii_pi3_command_wren_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 4) & mask );
}
static inline uint32_t sdram_dfii_pi3_command_wren_read(void) {
	uint32_t word = sdram_dfii_pi3_command_read();
	return sdram_dfii_pi3_command_wren_extract(word);
}
static inline uint32_t sdram_dfii_pi3_command_wren_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 4))) | (mask & plain_value)<< 4 ;
}
static inline void sdram_dfii_pi3_command_wren_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi3_command_read();
	uint32_t newword = sdram_dfii_pi3_command_wren_replace(oldword, plain_value);
	sdram_dfii_pi3_command_write(newword);
}
#define CSR_SDRAM_DFII_PI3_COMMAND_RDEN_OFFSET 5
#define CSR_SDRAM_DFII_PI3_COMMAND_RDEN_SIZE 1
static inline uint32_t sdram_dfii_pi3_command_rden_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 5) & mask );
}
static inline uint32_t sdram_dfii_pi3_command_rden_read(void) {
	uint32_t word = sdram_dfii_pi3_command_read();
	return sdram_dfii_pi3_command_rden_extract(word);
}
static inline uint32_t sdram_dfii_pi3_command_rden_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 5))) | (mask & plain_value)<< 5 ;
}
static inline void sdram_dfii_pi3_command_rden_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi3_command_read();
	uint32_t newword = sdram_dfii_pi3_command_rden_replace(oldword, plain_value);
	sdram_dfii_pi3_command_write(newword);
}
#define CSR_SDRAM_DFII_PI3_COMMAND_ISSUE_ADDR (CSR_BASE + 0x5098L)
#define CSR_SDRAM_DFII_PI3_COMMAND_ISSUE_SIZE 1
static inline uint32_t sdram_dfii_pi3_command_issue_read(void) {
	return csr_read_simple(CSR_BASE + 0x5098L);
}
static inline void sdram_dfii_pi3_command_issue_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x5098L);
}
#define CSR_SDRAM_DFII_PI3_ADDRESS_ADDR (CSR_BASE + 0x509cL)
#define CSR_SDRAM_DFII_PI3_ADDRESS_SIZE 1
static inline uint32_t sdram_dfii_pi3_address_read(void) {
	return csr_read_simple(CSR_BASE + 0x509cL);
}
static inline void sdram_dfii_pi3_address_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x509cL);
}
#define CSR_SDRAM_DFII_PI3_BADDRESS_ADDR (CSR_BASE + 0x50a0L)
#define CSR_SDRAM_DFII_PI3_BADDRESS_SIZE 1
static inline uint32_t sdram_dfii_pi3_baddress_read(void) {
	return csr_read_simple(CSR_BASE + 0x50a0L);
}
static inline void sdram_dfii_pi3_baddress_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x50a0L);
}
#define CSR_SDRAM_DFII_PI3_WRDATA_ADDR (CSR_BASE + 0x50a4L)
#define CSR_SDRAM_DFII_PI3_WRDATA_SIZE 4
#define CSR_SDRAM_DFII_PI3_RDDATA_ADDR (CSR_BASE + 0x50b4L)
#define CSR_SDRAM_DFII_PI3_RDDATA_SIZE 4

/* timer0 */
#define CSR_TIMER0_BASE (CSR_BASE + 0x5800L)
#define CSR_TIMER0_LOAD_ADDR (CSR_BASE + 0x5800L)
#define CSR_TIMER0_LOAD_SIZE 1
static inline uint32_t timer0_load_read(void) {
	return csr_read_simple(CSR_BASE + 0x5800L);
}
static inline void timer0_load_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x5800L);
}
#define CSR_TIMER0_RELOAD_ADDR (CSR_BASE + 0x5804L)
#define CSR_TIMER0_RELOAD_SIZE 1
static inline uint32_t timer0_reload_read(void) {
	return csr_read_simple(CSR_BASE + 0x5804L);
}
static inline void timer0_reload_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x5804L);
}
#define CSR_TIMER0_EN_ADDR (CSR_BASE + 0x5808L)
#define CSR_TIMER0_EN_SIZE 1
static inline uint32_t timer0_en_read(void) {
	return csr_read_simple(CSR_BASE + 0x5808L);
}
static inline void timer0_en_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x5808L);
}
#define CSR_TIMER0_UPDATE_VALUE_ADDR (CSR_BASE + 0x580cL)
#define CSR_TIMER0_UPDATE_VALUE_SIZE 1
static inline uint32_t timer0_update_value_read(void) {
	return csr_read_simple(CSR_BASE + 0x580cL);
}
static inline void timer0_update_value_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x580cL);
}
#define CSR_TIMER0_VALUE_ADDR (CSR_BASE + 0x5810L)
#define CSR_TIMER0_VALUE_SIZE 1
static inline uint32_t timer0_value_read(void) {
	return csr_read_simple(CSR_BASE + 0x5810L);
}
#define CSR_TIMER0_EV_STATUS_ADDR (CSR_BASE + 0x5814L)
#define CSR_TIMER0_EV_STATUS_SIZE 1
static inline uint32_t timer0_ev_status_read(void) {
	return csr_read_simple(CSR_BASE + 0x5814L);
}
#define CSR_TIMER0_EV_STATUS_ZERO_OFFSET 0
#define CSR_TIMER0_EV_STATUS_ZERO_SIZE 1
static inline uint32_t timer0_ev_status_zero_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t timer0_ev_status_zero_read(void) {
	uint32_t word = timer0_ev_status_read();
	return timer0_ev_status_zero_extract(word);
}
#define CSR_TIMER0_EV_PENDING_ADDR (CSR_BASE + 0x5818L)
#define CSR_TIMER0_EV_PENDING_SIZE 1
static inline uint32_t timer0_ev_pending_read(void) {
	return csr_read_simple(CSR_BASE + 0x5818L);
}
static inline void timer0_ev_pending_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x5818L);
}
#define CSR_TIMER0_EV_PENDING_ZERO_OFFSET 0
#define CSR_TIMER0_EV_PENDING_ZERO_SIZE 1
static inline uint32_t timer0_ev_pending_zero_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t timer0_ev_pending_zero_read(void) {
	uint32_t word = timer0_ev_pending_read();
	return timer0_ev_pending_zero_extract(word);
}
static inline uint32_t timer0_ev_pending_zero_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void timer0_ev_pending_zero_write(uint32_t plain_value) {
	uint32_t oldword = timer0_ev_pending_read();
	uint32_t newword = timer0_ev_pending_zero_replace(oldword, plain_value);
	timer0_ev_pending_write(newword);
}
#define CSR_TIMER0_EV_ENABLE_ADDR (CSR_BASE + 0x581cL)
#define CSR_TIMER0_EV_ENABLE_SIZE 1
static inline uint32_t timer0_ev_enable_read(void) {
	return csr_read_simple(CSR_BASE + 0x581cL);
}
static inline void timer0_ev_enable_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x581cL);
}
#define CSR_TIMER0_EV_ENABLE_ZERO_OFFSET 0
#define CSR_TIMER0_EV_ENABLE_ZERO_SIZE 1
static inline uint32_t timer0_ev_enable_zero_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t timer0_ev_enable_zero_read(void) {
	uint32_t word = timer0_ev_enable_read();
	return timer0_ev_enable_zero_extract(word);
}
static inline uint32_t timer0_ev_enable_zero_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void timer0_ev_enable_zero_write(uint32_t plain_value) {
	uint32_t oldword = timer0_ev_enable_read();
	uint32_t newword = timer0_ev_enable_zero_replace(oldword, plain_value);
	timer0_ev_enable_write(newword);
}

/* uart */
#define CSR_UART_BASE (CSR_BASE + 0x6000L)
#define CSR_UART_RXTX_ADDR (CSR_BASE + 0x6000L)
#define CSR_UART_RXTX_SIZE 1
static inline uint32_t uart_rxtx_read(void) {
	return csr_read_simple(CSR_BASE + 0x6000L);
}
static inline void uart_rxtx_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x6000L);
}
#define CSR_UART_TXFULL_ADDR (CSR_BASE + 0x6004L)
#define CSR_UART_TXFULL_SIZE 1
static inline uint32_t uart_txfull_read(void) {
	return csr_read_simple(CSR_BASE + 0x6004L);
}
#define CSR_UART_RXEMPTY_ADDR (CSR_BASE + 0x6008L)
#define CSR_UART_RXEMPTY_SIZE 1
static inline uint32_t uart_rxempty_read(void) {
	return csr_read_simple(CSR_BASE + 0x6008L);
}
#define CSR_UART_EV_STATUS_ADDR (CSR_BASE + 0x600cL)
#define CSR_UART_EV_STATUS_SIZE 1
static inline uint32_t uart_ev_status_read(void) {
	return csr_read_simple(CSR_BASE + 0x600cL);
}
#define CSR_UART_EV_STATUS_TX_OFFSET 0
#define CSR_UART_EV_STATUS_TX_SIZE 1
static inline uint32_t uart_ev_status_tx_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t uart_ev_status_tx_read(void) {
	uint32_t word = uart_ev_status_read();
	return uart_ev_status_tx_extract(word);
}
#define CSR_UART_EV_STATUS_RX_OFFSET 1
#define CSR_UART_EV_STATUS_RX_SIZE 1
static inline uint32_t uart_ev_status_rx_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 1) & mask );
}
static inline uint32_t uart_ev_status_rx_read(void) {
	uint32_t word = uart_ev_status_read();
	return uart_ev_status_rx_extract(word);
}
#define CSR_UART_EV_PENDING_ADDR (CSR_BASE + 0x6010L)
#define CSR_UART_EV_PENDING_SIZE 1
static inline uint32_t uart_ev_pending_read(void) {
	return csr_read_simple(CSR_BASE + 0x6010L);
}
static inline void uart_ev_pending_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x6010L);
}
#define CSR_UART_EV_PENDING_TX_OFFSET 0
#define CSR_UART_EV_PENDING_TX_SIZE 1
static inline uint32_t uart_ev_pending_tx_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t uart_ev_pending_tx_read(void) {
	uint32_t word = uart_ev_pending_read();
	return uart_ev_pending_tx_extract(word);
}
static inline uint32_t uart_ev_pending_tx_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void uart_ev_pending_tx_write(uint32_t plain_value) {
	uint32_t oldword = uart_ev_pending_read();
	uint32_t newword = uart_ev_pending_tx_replace(oldword, plain_value);
	uart_ev_pending_write(newword);
}
#define CSR_UART_EV_PENDING_RX_OFFSET 1
#define CSR_UART_EV_PENDING_RX_SIZE 1
static inline uint32_t uart_ev_pending_rx_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 1) & mask );
}
static inline uint32_t uart_ev_pending_rx_read(void) {
	uint32_t word = uart_ev_pending_read();
	return uart_ev_pending_rx_extract(word);
}
static inline uint32_t uart_ev_pending_rx_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void uart_ev_pending_rx_write(uint32_t plain_value) {
	uint32_t oldword = uart_ev_pending_read();
	uint32_t newword = uart_ev_pending_rx_replace(oldword, plain_value);
	uart_ev_pending_write(newword);
}
#define CSR_UART_EV_ENABLE_ADDR (CSR_BASE + 0x6014L)
#define CSR_UART_EV_ENABLE_SIZE 1
static inline uint32_t uart_ev_enable_read(void) {
	return csr_read_simple(CSR_BASE + 0x6014L);
}
static inline void uart_ev_enable_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x6014L);
}
#define CSR_UART_EV_ENABLE_TX_OFFSET 0
#define CSR_UART_EV_ENABLE_TX_SIZE 1
static inline uint32_t uart_ev_enable_tx_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t uart_ev_enable_tx_read(void) {
	uint32_t word = uart_ev_enable_read();
	return uart_ev_enable_tx_extract(word);
}
static inline uint32_t uart_ev_enable_tx_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void uart_ev_enable_tx_write(uint32_t plain_value) {
	uint32_t oldword = uart_ev_enable_read();
	uint32_t newword = uart_ev_enable_tx_replace(oldword, plain_value);
	uart_ev_enable_write(newword);
}
#define CSR_UART_EV_ENABLE_RX_OFFSET 1
#define CSR_UART_EV_ENABLE_RX_SIZE 1
static inline uint32_t uart_ev_enable_rx_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 1) & mask );
}
static inline uint32_t uart_ev_enable_rx_read(void) {
	uint32_t word = uart_ev_enable_read();
	return uart_ev_enable_rx_extract(word);
}
static inline uint32_t uart_ev_enable_rx_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void uart_ev_enable_rx_write(uint32_t plain_value) {
	uint32_t oldword = uart_ev_enable_read();
	uint32_t newword = uart_ev_enable_rx_replace(oldword, plain_value);
	uart_ev_enable_write(newword);
}
#define CSR_UART_TXEMPTY_ADDR (CSR_BASE + 0x6018L)
#define CSR_UART_TXEMPTY_SIZE 1
static inline uint32_t uart_txempty_read(void) {
	return csr_read_simple(CSR_BASE + 0x6018L);
}
#define CSR_UART_RXFULL_ADDR (CSR_BASE + 0x601cL)
#define CSR_UART_RXFULL_SIZE 1
static inline uint32_t uart_rxfull_read(void) {
	return csr_read_simple(CSR_BASE + 0x601cL);
}

#endif
